{
    "dertorch/datasets/image_dataset.py": {
        "torch": {}
    },
    "dertorch/engine/checkpoint.py": {
        "torch": {
            "load_59": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_92": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_50": {
                "obj": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'model': model.model.state_dict(), 'optimizer': model.optimizer.state_dict(), 'epoch': epoch, 'iters': iters, 'best_value': best_value}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.path, model_path) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/engine/inference.py": {
        "torch": {
            "save_113": {
                "obj": {
                    "value": "qfeats",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.log_dir, config.qfeats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_116": {
                "obj": {
                    "value": "gfeats",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.log_dir, config.gfeats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_66": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "inv_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "img.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/engine/trainer.py": {
        "torch": {
            "DataParallel_30": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradScaler_42": {
                "variable": {
                    "value": "amp_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_68": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradScaler_82": {
                "variable": {
                    "value": "amp_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_126": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_41": {
                "enabled": {
                    "value": "config.mixed_precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_81": {
                "enabled": {
                    "value": "config.mixed_precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/losses/__init__.py": {
        "torch": {
            "cross_entropy_24": {
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_78": {
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_89": {
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_34": {
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/losses/arcface.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_36": {
                "variable": {
                    "value": "cosine",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_37": {
                "variable": {
                    "value": "sine",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - torch.pow(cosine, 2)).clamp(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_39": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cosine > self.th",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cosine * self.cos_m - sine * self.sin_m",
                            "BinOp"
                        ],
                        [
                            "torch.where(cosine > self.th, phi, cosine - self.mm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cosine - self.mm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cosine.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_36": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_37": {
                "input": {
                    "value": "cosine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.linear(F.normalize(input), F.normalize(self.weight))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/losses/center.py": {
        "torch": {
            "rand_55": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_59": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_35": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_35": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_36": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_36": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_19": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_23": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/losses/triplet.py": {
        "torch": {
            "pow_26": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_26": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_27": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist_an.data.new()",
                            "Call"
                        ],
                        [
                            "Variable(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_27": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_51": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_ap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(dist_ap)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_64": {
                "variable": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_an",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(dist_an)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_92": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_probs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_43": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SoftMarginLoss_45": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_13": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/metrics/mAP.py": {
        "torch": {
            "norm_20": {
                "variable": {
                    "value": "qf_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qf",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "feats[:self.num_query]",
                            "Subscript"
                        ],
                        [
                            "feats[:self.num_query]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_21": {
                "variable": {
                    "value": "gf_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gf",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "feats[self.num_query:]",
                            "Subscript"
                        ],
                        [
                            "feats[self.num_query:]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_11": {
                "input": {
                    "value": "qf",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "feats[:self.num_query]",
                            "Subscript"
                        ],
                        [
                            "feats[:self.num_query]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_11": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_12": {
                "input": {
                    "value": "gf",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "feats[self.num_query:]",
                            "Subscript"
                        ],
                        [
                            "feats[self.num_query:]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_12": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_51": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(self.feats, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(feats, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "torch.cat(self.feats, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(feats, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_92": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(self.feats, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(feats, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "torch.cat(self.feats, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(feats, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_61": {
                "input": {
                    "value": "qf",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "feats[:self.num_query]",
                            "Subscript"
                        ],
                        [
                            "feats[:self.num_query]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_61": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_62": {
                "input": {
                    "value": "gf",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "feats[self.num_query:]",
                            "Subscript"
                        ],
                        [
                            "feats[self.num_query:]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_62": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/metrics/re_ranking.py": {
        "torch": {
            "cat_12": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probFea, galFea]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_14": {
                "input": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([probFea, galFea])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_14": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_15": {
                "input": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([probFea, galFea])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_15": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/nets/backbones/efficientnet_v2.py": {
        "torch": {
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(ch, ch // (4 * r), 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_99": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2], value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2], value=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight.shape[-2:]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "k // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch // (4 * r)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SiLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "ch // (4 * r)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SiLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SiLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SiLU_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SiLU_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SiLU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/nets/backbones/resnet.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_91": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_129": {
                "variable": {
                    "value": "param_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/nets/backbones/resnet_ibn.py": {
        "torch": {
            "InstanceNorm2d_24": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "half1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(planes / 2)",
                            "Call"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.BN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "half2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes - half1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_28": {
                "variable": {
                    "value": "split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_87": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_88": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_94": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "scale * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_146": {
                "variable": {
                    "value": "param_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/nets/nn.py": {
        "torch": {
            "Sequential_95": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*feature",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_157": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_202": {
                "variable": {
                    "value": "param_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "trained_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_170": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SiLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SiLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_104": {
                "f": {
                    "value": "trained_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/samplers/triplet_samplers.py": {
        "torch": {
            "randperm_91": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_identities",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/test.py": {
        "torch": {
            "empty_cache_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/utils/collate.py": {
        "torch": {
            "tensor_6": {
                "variable": {
                    "value": "pids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(pids, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_7": {
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_12": {
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/utils/cuda.py": {
        "torch": {
            "GradScaler_41": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__22": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_grad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__51": {
                "parameters": {
                    "value": "parameters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "clip_grad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "dertorch/utils/getter.py": {
        "torch": {
            "DataLoader_193": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageDataset(dataset.query + dataset.gallery, val_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "val_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageDataset(dataset.train, train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_184": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageDataset(dataset.train, train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(dataset.train, config.batch_size, config.num_instance)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamW_102": {
                "params": {
                    "value": "center_criterion.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "center_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt_config['center_lr'] if 'center_lr' in opt_config.keys() else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "SGD_103": {
                "params": {
                    "value": "center_criterion.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "center_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt_config['center_lr'] if 'center_lr' in opt_config.keys() else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dertorch/utils/random_seed.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SEED",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SEED",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "dertorch/visualize.py": {
        "torch": {
            "load_70": {
                "variable": {
                    "value": "gallery_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.log_dir, config.gfeats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transform(query_img)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}