{
    "obfsproxy/transports/model/dummy_nn.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.fc1_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc1_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_42": {
                "variable": {
                    "value": "out_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_time(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_size(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_size(out_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "out_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_time(out_time)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([i[1] for i in inp])",
                            "Call"
                        ],
                        [
                            "extract_time_size_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer/deepcorr.py": {
        "torch": {
            "is_available_461": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_462": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_468": {
                "variable": {
                    "value": "LOADED",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/abahramali/deepsec/general-noise/deepcorr-epoch20-step779-acc0.87.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "{'cuda:3': 'cuda:0'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Adam_537": {
                "variable": {
                    "value": "optim_nos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(addnois.parameters()) + list(timenois.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "noise_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gen_lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_540": {
                "variable": {
                    "value": "optim_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "disc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "disc_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.dis_lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_336": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_model(data_adv[:, 0, 0, :deps], eps, mid)",
                            "Call"
                        ],
                        [
                            "adv_model(data_adv[:, 0, 0, :deps], eps, mid)",
                            "Call"
                        ],
                        [
                            "adv_model(data[:, 0, 0, :deps], eps, mid)",
                            "Call"
                        ],
                        [
                            "adv_model(data_adv[:, 0, 0, :deps], eps, mid)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(noise[tops[:num]]) * 0.001",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_362": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(torch.clamp(data_adv + adv, min=0), 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "argsort_33": {
                "variable": {
                    "value": "tops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_127": {
                "variable": {
                    "value": "self.max_pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_130": {
                "variable": {
                    "value": "self.max_pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "49600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_148": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "inp[:, :self.inp]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([res, z, z, z, z, z, z, z], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "inp[:, :self.inp]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([res, z, z, z, z, z, z, z], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_158": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "inp[:, :self.inp]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([res, z, z, z, z, z, z, z], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.independent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inp, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_185": {
                "variable": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "inp[:, :self.inp]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([res, z, z, z, z, z, z, z], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_202": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - torch.clamp(x.mean(dim=1, keepdim=True) - mid, min=0) - torch.clamp(x.mean(dim=1, keepdim=True) + mid, max=0)",
                            "BinOp"
                        ],
                        [
                            "res * res_multi",
                            "BinOp"
                        ],
                        [
                            "ind",
                            "variable"
                        ],
                        [
                            "transfer_adv(res, eps, mid)",
                            "Call"
                        ],
                        [
                            "res.view(-1, 1, self.inp)",
                            "Call"
                        ],
                        [
                            "torch.cat([res, z, z, z, z, z], dim=2)",
                            "Call"
                        ],
                        [
                            "res[:, :, :outsize]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res, z, z, z, z, z, z, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "self.independent_where",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inp, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.independent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inp, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.dependent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inp, 1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_model(data_adv[:, 0, 0, :deps], eps, mid)",
                            "Call"
                        ],
                        [
                            "adv_model(data_adv[:, 0, 0, :deps], eps, mid)",
                            "Call"
                        ],
                        [
                            "adv_model(data[:, 0, 0, :deps], eps, mid)",
                            "Call"
                        ],
                        [
                            "adv_model(data_adv[:, 0, 0, :deps], eps, mid)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(noise[tops[:num]]) * 0.001",
                            "BinOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_306": {
                "variable": {
                    "value": "f_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disc_model(adv)",
                            "Call"
                        ],
                        [
                            "disc_model(adv)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.zeros_like(label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_307": {
                "variable": {
                    "value": "r_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disc_model(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones_like(label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_510": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.max_pool2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=dropout_prob)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "inp[:, :self.inp]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([res, z, z, z, z, z, z, z], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_567": {
                "obj": {
                    "value": "{'time_model': timenois.state_dict(), 'add_model': addnois.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "SAVE_PATH + '/model_epoch_%d' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_571": {
                "obj": {
                    "value": "{'corrs': total_corrs}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "SAVE_PATH + '/cors'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_197": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - torch.clamp(x.mean(dim=1, keepdim=True) - mid, min=0) - torch.clamp(x.mean(dim=1, keepdim=True) + mid, max=0)",
                            "BinOp"
                        ],
                        [
                            "res * res_multi",
                            "BinOp"
                        ],
                        [
                            "ind",
                            "variable"
                        ],
                        [
                            "transfer_adv(res, eps, mid)",
                            "Call"
                        ],
                        [
                            "res.view(-1, 1, self.inp)",
                            "Call"
                        ],
                        [
                            "torch.cat([res, z, z, z, z, z], dim=2)",
                            "Call"
                        ],
                        [
                            "res[:, :, :outsize]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res, z, z, z, z, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_242": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ind_where",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.independent_where(nz)",
                            "Call"
                        ],
                        [
                            "torch.cat([ind_where, z, z, z, z, z], dim=1)",
                            "Call"
                        ],
                        [
                            "ind_where[:, :outsize]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_243": {
                "variable": {
                    "value": "ind_size",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ind_size, z, z, z, z, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "ind_where",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ind_where, z, z, z, z, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_320": {
                "input": {
                    "value": "data_adv + adv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_323": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disc_model(adv)",
                            "Call"
                        ],
                        [
                            "disc_model(adv)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones_like(label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_360": {
                "input": {
                    "value": "data_adv + adv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_511": {
                "input": {
                    "value": "x.mean(dim=1, keepdim=True) - mid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_561": {
                "variable": {
                    "value": "batch_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "l2s[start_ind:end_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_562": {
                "variable": {
                    "value": "batch_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels[start_ind:end_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_40": {
                "input": {
                    "value": "noise[tops[:num]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "in_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_173": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_218": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_221": {
                "in_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_223": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_258": {
                "in_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_260": {
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_262": {
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_306": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_307": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_394": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "l2s_test_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, 1, 8, flow_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_513": {
                "input": {
                    "value": "x.std(dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ],
                        [
                            "eps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_323": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}