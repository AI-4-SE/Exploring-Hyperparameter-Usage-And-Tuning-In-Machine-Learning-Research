{
    "checkmate/tf2/execution.py": {
        "tensorflow": {
            "Operation_17": {
                "variable": {
                    "value": "new_op",
                    "type": "variable",
                    "possible_values": []
                },
                "node_def": {
                    "value": "nnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(op.node_def)",
                            "Call"
                        ]
                    ]
                },
                "g": {
                    "value": "op.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(op.inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_types": {
                    "value": "op._output_types[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "control_inputs": {
                    "value": "op.control_inputs[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_types": {
                    "value": "op._input_types[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "original_op": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op_dict[inst.id]",
                            "Subscript"
                        ]
                    ]
                },
                "op_def": {
                    "value": "op_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(op.op_def)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "checkmate/tf2/util/execution_utils.py": {
        "tensorflow": {
            "one_hot_9": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.random_uniform([batch_size], minval=0, maxval=num_classes, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "checkmate/tf2/util/load_keras_model.py": {
        "tensorflow": {
            "Input_51": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(input_shape)",
                            "Call"
                        ],
                        [
                            "(224",
                            "Method Argument"
                        ],
                        [
                            "(224",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_62": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(input_shape)",
                            "Call"
                        ],
                        [
                            "(224",
                            "Method Argument"
                        ],
                        [
                            "(224",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_114": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Model_58": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=input_size)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(num_classes, activation='softmax', name='predictions')(d)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(num_classes, activation='softmax', name='predictions')(d)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_68": {
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(num_classes, activation='softmax', name='predictions')(d)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(num_classes, activation='softmax', name='predictions')(d)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_135": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "keras.Input(shape=input_size)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(64, (3, 3), activation='relu', name='in_conv')(inputs)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.keras.layers.Conv2D(64, (3, 3), activation=None, use_bias=False, name='conv' + str(i))(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "LayerNormalization(name='f_att_{}'.format(i))(relu + x)",
                            "Call"
                        ],
                        [
                            "LayerNormalization(name='layer_out_{}'.format(i))(x + relu2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_52": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "in_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_53": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_54": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Add_55": {
                "name": {
                    "value": "addc1c2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_56": {
                "name": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_66": {
                "name": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_67": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_65": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_117": {
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'query_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_118": {
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'key_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_119": {
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'value_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Reshape_120": {
                "target_shape": {
                    "value": "(heads, seq_length, hidden_size // heads)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_121": {
                "target_shape": {
                    "value": "(heads, hidden_size // heads, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_122": {
                "target_shape": {
                    "value": "(heads, seq_length, hidden_size // heads)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Lambda_123": {
                "function": {
                    "value": "lambda x: tf.matmul(x[0], x[1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "'acts_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Lambda_124": {
                "function": {
                    "value": "lambda x: tf.matmul(x[0], x[1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "'fin_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Reshape_125": {
                "target_shape": {
                    "value": "(seq_length, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_127": {
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'att_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_128": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'relu0_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNormalization_129": {
                "name": {
                    "value": "'f_att_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_130": {
                "units": {
                    "value": "intermediate_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * hidden_size",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "'inter_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_131": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'relu1_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_132": {
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'shrink_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_133": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'relu2_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNormalization_134": {
                "name": {
                    "value": "'layer_out_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "a": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "a": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "checkmate/tf2/wrapper.py": {
        "tensorflow": {
            "set_experimental_options_20": {
                "options": {
                    "value": "opts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "is_gpu_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_built_with_cuda_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorSpec_116": {
                "shape": {
                    "value": "newshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tensorspec.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensorspec.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/isolate_sqrtn_bug.py": {
        "tensorflow": {
            "function_24": {
                "variable": {
                    "value": "grad_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_20": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pred - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorSpec_25": {
                "shape": {
                    "value": "(BS, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GradientTape_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/poet_reference_mlp.py": {
        "tensorflow": {
            "load_data_8": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_13": {
                "variable": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "batch_14": {
                "variable": {
                    "value": "test_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_25": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_18": {
                "input_shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_19": {
                "units": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_20": {
                "units": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_21": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "units": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_24": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_tf2_execution.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_102": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_105": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_106": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_107": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_108": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_experimental_options_250": {
                "variable": {
                    "value": "old_opts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_35": {
                "variable": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_36": {
                "variable": {
                    "value": "test_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "function_112": {
                "input_signature": {
                    "value": "train_signature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_172": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_173": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_175": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_176": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_177": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_178": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_experimental_options_251": {
                "options": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RunMetadata_152": {
                "variable": {
                    "value": "run_meta",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_experimental_options_255": {
                "options": {
                    "value": "old_opts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.config.optimizer.get_experimental_options()",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_50": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_52": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_53": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_54": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_154": {
                "trace_level": {
                    "value": "tf1.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_150": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.d1(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_cvxpy.py": {
        "tensorflow": {
            "ones_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_13": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_14": {
                "ys": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "model.trainable_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_tf2_extraction.py": {
        "tensorflow": {
            "ones_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_13": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_14": {
                "ys": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "vgg.trainable_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}