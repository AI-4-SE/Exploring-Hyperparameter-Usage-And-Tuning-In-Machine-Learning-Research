{
    "DAE.py": {
        "torch": {
            "Adam_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[*i3d.parameters()] + [*dae.parameters()]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_40": {
                "f": {
                    "value": "i3d_pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./ckpts/rgb_i3d_pretrained.pt'",
                            "str"
                        ]
                    ]
                }
            },
            "empty_73": {
                "variable": {
                    "value": "clip_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "save_100": {
                "obj": {
                    "value": "{'epoch': epoch, 'i3d': i3d.state_dict(), 'dae': dae.state_dict(), 'optimizer': optimizer.state_dict(), 'rho_best': rho_best}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ckpts/' + str(rho) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_61": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_65": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader.py": {
        "torch": {
            "DataLoader_94": {
                "variable": {
                    "value": "dataloaders[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset('train', args)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "dataloaders[test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset('test', args)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "103",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "pad_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "self.conv3d(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ],
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Conv3d_65": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self._output_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._kernel_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self._use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "self.conv3d(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ],
                        [
                            "self._modules[end_point](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ],
                        [
                            "(pad_w_f, pad_w_b, pad_h_f, pad_h_b, pad_t_f, pad_t_b)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "AvgPool3d_288": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_290": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.fch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_336": {
                "variable": {
                    "value": "self.fc2_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_337": {
                "variable": {
                    "value": "self.fc2_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_340": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_341": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fch(h0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_347": {
                "variable": {
                    "value": "esp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*mu.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm3d_74": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self._output_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[b0, b1, b2, b3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "MSELoss_26": {
                "variable": {
                    "value": "MSE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}