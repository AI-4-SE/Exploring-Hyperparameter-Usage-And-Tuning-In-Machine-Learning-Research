{
    "BatchDatsetReaderAtt.py": {
        "sklearn": {
            "shuffle_64": {
                "variable": {
                    "value": "(self.image_files, self.annotation_files)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.image_files",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.annotation_files",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "TensorflowUtils.py": {
        "tensorflow": {
            "constant_initializer_61": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(weights, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_68": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_76": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_89": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_94": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_107": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_90": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, output_shape, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "conv",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_95": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, output_shape, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "conv",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_108": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, output_shape, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "conv",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_112": {
                "x": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_116": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_120": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_134": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(1.0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_136": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_137": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_144": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "phase_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phase_train",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_var_with_update",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_147": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(phase_train, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, initializer=init, shape=weights.shape)",
                            "Call"
                        ],
                        [
                            "tf.cond(phase_train, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=[n_out], initializer=tf.constant_initializer(0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='gamma', shape=[n_out], initializer=tf.random_normal_initializer(1.0, 0.02), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_70": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_72": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_78": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_80": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bn'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_169": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([shape, shape, out_channel, in_channel], name=name)",
                            "Call"
                        ],
                        [
                            "weight_variable([shape, shape, in_channel, out_chans], name=name)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_transpose",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_175": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([shape, shape, out_channel, in_channel], name=name)",
                            "Call"
                        ],
                        [
                            "weight_variable([shape, shape, in_channel, out_chans], name=name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "'res%s' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_210": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_transpose(x, out_chans=out_chan1, shape=1, strides=first_stride, name='res%s_branch2a' % name)",
                            "Call"
                        ],
                        [
                            "conv(x, out_chans=out_chan1, shape=1, strides=first_stride, name='res%s_branch2a' % name)",
                            "Call"
                        ],
                        [
                            "bn(b2, 'bn%s_branch2a' % name, 'scale%s_branch2a' % name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(b2, name='relu')",
                            "Call"
                        ],
                        [
                            "conv(b2, out_chans=out_chan1, shape=3, strides=1, name='res%s_branch2b' % name)",
                            "Call"
                        ],
                        [
                            "bn(b2, 'bn%s_branch2b' % name, 'scale%s_branch2b' % name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(b2, name='relu')",
                            "Call"
                        ],
                        [
                            "conv(b2, out_chans=out_chan2, shape=1, strides=1, name='res%s_branch2c' % name)",
                            "Call"
                        ],
                        [
                            "bn(b2, 'bn%s_branch2c' % name, 'scale%s_branch2c' % name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_215": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_transpose(x, out_chans=out_chan1, shape=1, strides=first_stride, name='res%s_branch2a' % name)",
                            "Call"
                        ],
                        [
                            "conv(x, out_chans=out_chan1, shape=1, strides=first_stride, name='res%s_branch2a' % name)",
                            "Call"
                        ],
                        [
                            "bn(b2, 'bn%s_branch2a' % name, 'scale%s_branch2a' % name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(b2, name='relu')",
                            "Call"
                        ],
                        [
                            "conv(b2, out_chans=out_chan1, shape=3, strides=1, name='res%s_branch2b' % name)",
                            "Call"
                        ],
                        [
                            "bn(b2, 'bn%s_branch2b' % name, 'scale%s_branch2b' % name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(b2, name='relu')",
                            "Call"
                        ],
                        [
                            "conv(b2, out_chans=out_chan2, shape=1, strides=1, name='res%s_branch2c' % name)",
                            "Call"
                        ],
                        [
                            "bn(b2, 'bn%s_branch2c' % name, 'scale%s_branch2c' % name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_222": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b1 + b2",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_227": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, initializer=init, shape=weights.shape)",
                            "Call"
                        ],
                        [
                            "tf.cond(phase_train, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_228": {
                "name": {
                    "value": "reg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_233": {
                "name": {
                    "value": "var.op.name + '/activation'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, initializer=init, shape=weights.shape)",
                            "Call"
                        ],
                        [
                            "tf.cond(phase_train, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_234": {
                "name": {
                    "value": "var.op.name + '/sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_239": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "branch2a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "branch2b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "branch2c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_228": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, initializer=init, shape=weights.shape)",
                            "Call"
                        ],
                        [
                            "tf.cond(phase_train, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zero_fraction_234": {
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, initializer=init, shape=weights.shape)",
                            "Call"
                        ],
                        [
                            "tf.cond(phase_train, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_132": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_134": {
                "mean": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "control_dependencies_141": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_142": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, [0, 1, 2], name='moments')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets_mask.py": {
        "tensorflow": {}
    },
    "ops.py": {
        "tensorflow": {
            "moments_215": {
                "variable": {
                    "value": "(c_mean, c_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "content",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_216": {
                "variable": {
                    "value": "c_std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_var + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, channels, x.get_shape()[-1]], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_227": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_242": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "l2_norm(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_243": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_norm(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_245": {
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_norm(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, channels, x.get_shape()[-1]], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_91": {
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_94": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], -1, x.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_140": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[h * scale_factor, w * scale_factor]",
                            "List"
                        ]
                    ]
                }
            },
            "average_pooling2d_143": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "divide_146": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(x), axis=1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_153": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_156": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_159": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_162": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_184": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_modes, 1, 1, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_185": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_modes, 1, 1, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_186": {
                "variable": {
                    "value": "beta_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [num_modes, 1, 1, dim], initializer=tf.ones_initializer)",
                            "Call"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_187": {
                "variable": {
                    "value": "gamma_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [num_modes, 1, 1, dim], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "gamma",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_236": {
                "variable": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "l2_norm(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_norm(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, channels, x.get_shape()[-1]], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_267": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_270": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(real, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_271": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_274": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(real), logits=real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_275": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(fake), logits=fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_278": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu(1.0 - real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_279": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu(1.0 + fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_292": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(fake, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_295": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(fake), logits=fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_305": {
                "input_tensor": {
                    "value": "tf.abs(x - y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'deconv_0'",
                            "Method Argument"
                        ],
                        [
                            "'fully_0'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'group_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad, pad], [pad, pad], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad, pad], [pad, pad], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel, kernel, x.get_shape()[-1], channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "conv2d_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[-1]",
                            "Subscript"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'deconv_0'",
                            "Method Argument"
                        ],
                        [
                            "'fully_0'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'group_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel, kernel, channels, x.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "conv2d_transpose_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_shape[0], x_shape[1] * stride, x_shape[2] * stride, channels]",
                            "List"
                        ],
                        [
                            "[x_shape[0], x_shape[1] * stride + max(kernel - stride, 0), x_shape[2] * stride + max(kernel - stride, 0), channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[-1]",
                            "Subscript"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'deconv_0'",
                            "Method Argument"
                        ],
                        [
                            "'fully_0'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'group_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels, units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "dense_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'deconv_0'",
                            "Method Argument"
                        ],
                        [
                            "'fully_0'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'group_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'deconv_0'",
                            "Method Argument"
                        ],
                        [
                            "'fully_0'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'resblock'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'group_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_146": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cond_bn'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_221": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x), axis=-1, keepdims=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_245": {
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "l2_norm(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_248": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [units], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [units], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_146": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_188": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "beta_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(beta, mode, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_236": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, channels, x.get_shape()[-1]], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_266": {
                "input_tensor": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squared_difference_270": {
                "x": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_271": {
                "x": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_274": {
                "labels": {
                    "value": "tf.ones_like(real)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_275": {
                "labels": {
                    "value": "tf.zeros_like(fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_289": {
                "input_tensor": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squared_difference_292": {
                "x": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_295": {
                "labels": {
                    "value": "tf.ones_like(fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_298": {
                "input_tensor": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_305": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_146": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_221": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_255": {
                "input_tensor": {
                    "value": "v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_221": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad, pad], [pad, pad], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, filter=spectral_norm(w), output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, padding=padding, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias, sn=sn)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 0.5)",
                            "Call"
                        ],
                        [
                            "conv(x, dim, kernel=3, stride=1, pad=1, pad_type=pad_type, scope='conv')",
                            "Call"
                        ],
                        [
                            "norm_layer(x)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, center=False, scale=False, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(x, beta_g) + gamma_g",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_274": {
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_275": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_295": {
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_30": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_58": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_79": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "p2p_geo.py": {
        "tensorflow": {
            "DEFINE_integer_18": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "batch size for training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "logs_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/scratch1/ram095/nips21/logs_nlrgeon/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "path to logs directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/scratch1/ram095/nips20/datasets/pix2pix/datasets/att",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "path to dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_21": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-4",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate for Adam Optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "Model_zoo/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to vgg model mat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_23": {
                "name": {
                    "value": "debug",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Debug mode: True/ False",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Mode train/ test/ visualize",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_110": {
                "variable": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(bottom, -100.0, 100.0)",
                            "Call"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-100.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_265": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_274": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "S_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_303": {
                "variable": {
                    "value": "(Sf, Cf, If)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda S, C, i: i < 20",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "lambda S, C, i: (S + tf.trace(C) / i, tf.linalg.matmul(C, C), i + 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(S_, C_, 1.0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_320": {
                "variable": {
                    "value": "tensor_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_322": {
                "variable": {
                    "value": "tensor_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tensor_stack, [itr, FLAGS.batch_size, 64])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_324": {
                "variable": {
                    "value": "tensor_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.reshape(tensor_stack, [itr, FLAGS.batch_size, 64]), perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_330": {
                "variable": {
                    "value": "(inv_mat, p_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda x, i: tf.logical_and(i < 100, tf.less(tf.reduce_mean(x), tf.constant([10.0]))[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "lambda x, i: (tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) + 1.0 / 4.0 * tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), tf.matmul(3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), 3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar))), x), i + 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(v, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_333": {
                "variable": {
                    "value": "inv_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(inv_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(inv_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "inv_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(lambda x, i: tf.logical_and(i < 100, tf.less(tf.reduce_mean(x), tf.constant([10.0]))[0]), lambda x, i: (tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) + 1.0 / 4.0 * tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), tf.matmul(3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), 3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar))), x), i + 1), (v, 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(inv_mat), tf.zeros_like(inv_mat), inv_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_345": {
                "variable": {
                    "value": "annot_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "annot_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_346": {
                "variable": {
                    "value": "annot_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(annot_stack, [itr, FLAGS.batch_size, 64])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_347": {
                "variable": {
                    "value": "annot_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "annot_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.reshape(annot_stack, [itr, FLAGS.batch_size, 64]), perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_350": {
                "variable": {
                    "value": "res_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor_mean - annot_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, 64, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trace_355": {
                "variable": {
                    "value": "term_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.matmul(inv_mat, annot_covar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_356": {
                "variable": {
                    "value": "term_3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor_mean - annot_mean, [FLAGS.batch_size, 64, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "inv_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(lambda x, i: tf.logical_and(i < 100, tf.less(tf.reduce_mean(x), tf.constant([10.0]))[0]), lambda x, i: (tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) + 1.0 / 4.0 * tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), tf.matmul(3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), 3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar))), x), i + 1), (v, 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(inv_mat), tf.zeros_like(inv_mat), inv_mat)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_357": {
                "variable": {
                    "value": "term_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.linalg.matmul(term_3_1, res_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_380": {
                "variable": {
                    "value": "keep_probability",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_probabilty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_381": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, IMAGE_SIZE, IMAGE_SIZE, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_382": {
                "variable": {
                    "value": "annotation",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, IMAGE_SIZE, IMAGE_SIZE, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "annotation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_383": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 1, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_384": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 128, 128, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_385": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 128, 128, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_386": {
                "variable": {
                    "value": "z_new",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z_new",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_387": {
                "variable": {
                    "value": "istrain",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_390": {
                "variable": {
                    "value": "z_var_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 1, 1, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z_stack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_392": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4, 4, 1088]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "e",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_393": {
                "variable": {
                    "value": "e_p",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 1, 16448]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "e_p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_397": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, 1, 1, 16448]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_409": {
                "variable": {
                    "value": "advloss_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adv_cost(logits, keep_probability, image, istrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_412": {
                "variable": {
                    "value": "z_loss_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.contrib.layers.flatten(tf.abs(annotation - logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_415": {
                "variable": {
                    "value": "loss_interp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.contrib.layers.flatten(tf.abs(annotation - logits)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_417": {
                "variable": {
                    "value": "loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reduce_sum(tf.contrib.layers.flatten(tf.abs(annotation - logits)), 1)) - 10 * advloss_g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_418": {
                "variable": {
                    "value": "lip_loss_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.contrib.layers.flatten(tf.abs(logits - logits_e)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_425": {
                "variable": {
                    "value": "trainable_var",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_426": {
                "variable": {
                    "value": "trainable_z_pred_var",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "predictor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_456": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_459": {
                "variable": {
                    "value": "saver2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_460": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_462": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.logs_dir + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_463": {
                "variable": {
                    "value": "validation_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.logs_dir + '/validation'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_466": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.logs_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_shape",
                            "Method Argument"
                        ],
                        [
                            "filter_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0.0, 0.005)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "filter_shape",
                            "Method Argument"
                        ],
                        [
                            "filter_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(bottom, -100.0, 100.0)",
                            "Call"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=filter_shape, initializer=tf.random_normal_initializer(0.0, 0.005))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_shape",
                            "Method Argument"
                        ],
                        [
                            "filter_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0.0, 0.005)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_100": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape[-2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "filter_shape",
                            "Method Argument"
                        ],
                        [
                            "filter_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_104": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(bottom, -100.0, 100.0)",
                            "Call"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=filter_shape, initializer=tf.random_normal_initializer(0.0, 0.005))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ],
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_114": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_117": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(bottom, -100.0, 100.0)",
                            "Call"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_118": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_126": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "update",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "lambda : (ema_mean, ema_var)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_norm_with_global_normalization_131": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(bottom, -100.0, 100.0)",
                            "Call"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ],
                        [
                            "bottom",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_train, update, lambda : (ema_mean, ema_var))",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_train, update, lambda : (ema_mean, ema_var))",
                            "Call"
                        ],
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "trainable_var",
                            "variable"
                        ]
                    ]
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [depth], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [depth], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_after_normalization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, condition]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(previousFeatureMap, [4, 4, previousDepth, depth], stride=2, name='conv1')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_156": {
                "variable": {
                    "value": "bn1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv1, is_train, name='bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_160": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(bn1, [4, 4, previousDepth, depth], stride=2, name='conv2')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_161": {
                "variable": {
                    "value": "bn2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv2, is_train, name='bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_165": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(bn2, [4, 4, previousDepth, depth], stride=2, name='conv3')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_166": {
                "variable": {
                    "value": "bn3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv3, is_train, name='bn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_170": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(bn3, [4, 4, previousDepth, depth], stride=2, name='conv4')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_171": {
                "variable": {
                    "value": "bn4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv4, is_train, name='bn4')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_175": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(bn4, [4, 4, previousDepth, depth], stride=2, name='conv5')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_176": {
                "variable": {
                    "value": "bn5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv5, is_train, name='bn5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_181": {
                "variable": {
                    "value": "bn6",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv6, is_train, name='bn6')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_183": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "bn6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(batchnorm(conv6, is_train, name='bn6'))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(batchnorm(conv6, is_train, name='bn6'))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_185": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(bn6)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_186": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(flat, 16)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_203": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(previousFeatureMap, [4, 4, previousDepth, depth], stride=2, name='conv1')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_204": {
                "variable": {
                    "value": "bn1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv1, is_train, name='bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_207": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(bn1, [4, 4, previousDepth, depth], stride=2, name='conv2')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_208": {
                "variable": {
                    "value": "bn2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv2, is_train, name='bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_211": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(bn2, [4, 4, previousDepth, depth], stride=2, name='conv3')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_212": {
                "variable": {
                    "value": "bn3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv3, is_train, name='bn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_215": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(bn3, [4, 4, previousDepth, depth], stride=2, name='conv4')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_216": {
                "variable": {
                    "value": "bn4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv4, is_train, name='bn4')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_219": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_conv_layer(bn4, [4, 4, previousDepth, depth], stride=2, name='conv5')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_220": {
                "variable": {
                    "value": "bn5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv5, is_train, name='bn5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_224": {
                "variable": {
                    "value": "bn6",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv6, is_train, name='bn6')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_228": {
                "variable": {
                    "value": "deconv6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_deconv_layer(bn6, [4, 4, depth, previousDepth], [FLAGS.batch_size, featureMapSize, featureMapSize, depth], padding='VALID', stride=2, name='deconv6')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_231": {
                "variable": {
                    "value": "debn_",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(deconv6, is_train, name='debn6')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_261": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_deconv_layer(debn2, [4, 4, 3, previousDepth], [FLAGS.batch_size, 128, 128, 3], stride=2, name='recon')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_285": {
                "variable": {
                    "value": "bn1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv1, is_train, name='bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_288": {
                "variable": {
                    "value": "bn2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv2, is_train, name='bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_291": {
                "variable": {
                    "value": "bn3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batchnorm(conv3, is_train, name='bn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_314": {
                "variable": {
                    "value": "z_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(z_var_stack, [i, 0, 0, 0, 0], [1, FLAGS.batch_size, 1, 1, 64])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, 1, 1, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_339": {
                "variable": {
                    "value": "annot_r",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "annotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, IMAGE_SIZE, IMAGE_SIZE, 3], name='annotation')",
                            "Call"
                        ],
                        [
                            "annotation",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "random_contrast_340": {
                "variable": {
                    "value": "annot_r",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "annot_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(annotation, 0.8, seed=None)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(annot_r, 0.2, 0.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradients_362": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_ + 0.1 * lip_loss_dec + 0.0001 * variance_loss",
                            "BinOp"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "image_405": {
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, IMAGE_SIZE, IMAGE_SIZE, 3], name='input_image')",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_406": {
                "name": {
                    "value": "ground_truth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.cast(annotation, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_60": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=filter_shape, initializer=tf.random_normal_initializer(0.0, 0.005))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ],
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_299": {
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_300": {
                "num_rows": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "tensor": {
                    "value": "tensor_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(tensor_list, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[itr, FLAGS.batch_size, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_326": {
                "a": {
                    "value": "tensor_reshaped - tensor_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "tensor_reshaped - tensor_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_328": {
                "a": {
                    "value": "covar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(tensor_reshaped - tensor_mean, tensor_reshaped - tensor_mean, transpose_b=True) / 64.0",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_nan_333": {
                "x": {
                    "value": "inv_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(lambda x, i: tf.logical_and(i < 100, tf.less(tf.reduce_mean(x), tf.constant([10.0]))[0]), lambda x, i: (tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) + 1.0 / 4.0 * tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), tf.matmul(3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), 3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar))), x), i + 1), (v, 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(inv_mat), tf.zeros_like(inv_mat), inv_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_333": {
                "input": {
                    "value": "inv_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(lambda x, i: tf.logical_and(i < 100, tf.less(tf.reduce_mean(x), tf.constant([10.0]))[0]), lambda x, i: (tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) + 1.0 / 4.0 * tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), tf.matmul(3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), 3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar))), x), i + 1), (v, 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(inv_mat), tf.zeros_like(inv_mat), inv_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_346": {
                "tensor": {
                    "value": "annot_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(annot_list, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[itr, FLAGS.batch_size, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_348": {
                "a": {
                    "value": "annot_reshaped - annot_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "annot_reshaped - annot_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_355": {
                "a": {
                    "value": "inv_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(lambda x, i: tf.logical_and(i < 100, tf.less(tf.reduce_mean(x), tf.constant([10.0]))[0]), lambda x, i: (tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) + 1.0 / 4.0 * tf.matmul(tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), tf.matmul(3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar), 3.0 * tf.eye(64, batch_shape=[FLAGS.batch_size]) - tf.matmul(x, covar))), x), i + 1), (v, 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(inv_mat), tf.zeros_like(inv_mat), inv_mat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "annot_covar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(annot_reshaped - annot_mean, annot_reshaped - annot_mean, transpose_b=True) / 64.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_357": {
                "a": {
                    "value": "term_3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(res_tensor, inv_mat, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "res_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor_mean - annot_mean, [FLAGS.batch_size, 64, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_358": {
                "input_tensor": {
                    "value": "term_1 + term_2 + term_3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_406": {
                "x": {
                    "value": "annotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, IMAGE_SIZE, IMAGE_SIZE, 3], name='annotation')",
                            "Call"
                        ],
                        [
                            "annotation",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_410": {
                "input_tensor": {
                    "value": "adv_cost(annotation, keep_probability, image, istrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_412": {
                "structure": {
                    "value": "tf.abs(annotation - logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_413": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.contrib.layers.flatten(tf.abs(annotation - logits)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_415": {
                "input_tensor": {
                    "value": "tf.contrib.layers.flatten(tf.abs(annotation - logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_418": {
                "input_tensor": {
                    "value": "tf.contrib.layers.flatten(tf.abs(logits - logits_e))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bias_add_69": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(bottom, W, output_shape, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_88": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, w, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=filter_shape[-1], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=filter_shape[-2], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_105": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(bottom, W, output_shape, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', shape=filter_shape[-1], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', shape=filter_shape[-2], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_232": {
                "values": {
                    "value": "[debn_, tf.tile(z_, [1, 4, 4, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_240": {
                "features": {
                    "value": "batchnorm(deconv5, is_train, name='debn5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_246": {
                "features": {
                    "value": "batchnorm(deconv4, is_train, name='debn4')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_252": {
                "features": {
                    "value": "batchnorm(deconv3, is_train, name='debn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_257": {
                "features": {
                    "value": "batchnorm(deconv2, is_train, name='debn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_314": {
                "input_": {
                    "value": "z_var_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, None, 1, 1, 64], name='z_stack')",
                            "Call"
                        ],
                        [
                            "z_var_stack",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[i, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, FLAGS.batch_size, 1, 1, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_330": {
                "x": {
                    "value": "i < 100",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(tf.reduce_mean(x), tf.constant([10.0]))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_412": {
                "x": {
                    "value": "annotation - logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_413": {
                "input_tensor": {
                    "value": "tf.contrib.layers.flatten(tf.abs(annotation - logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_415": {
                "structure": {
                    "value": "tf.abs(annotation - logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_418": {
                "structure": {
                    "value": "tf.abs(logits - logits_e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_443": {
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p in range(11)",
                            "Call"
                        ],
                        [
                            "p in range(0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_39": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_45": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_49": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_57": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_68": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_81": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_85": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_99": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_115": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "control_dependencies_121": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_304": {
                "a": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_331": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "covar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(tensor_reshaped - tensor_mean, tensor_reshaped - tensor_mean, transpose_b=True) / 64.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_413": {
                "structure": {
                    "value": "tf.abs(annotation - logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_415": {
                "x": {
                    "value": "annotation - logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_418": {
                "x": {
                    "value": "logits - logits_e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_122": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(bottom, [0, 1, 2], name='moments')",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_232": {
                "input": {
                    "value": "z_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "np.random.uniform(low=-1.0, high=1.0, size=(FLAGS.batch_size, 1, 1, 64))",
                            "Call"
                        ],
                        [
                            "z_ + (0.001 * v_prev + (1 + 0.001) * v)",
                            "BinOp"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_330": {
                "x": {
                    "value": "tf.reduce_mean(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant([10.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_413": {
                "x": {
                    "value": "annotation - logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trace_304": {
                "*args": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_330": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_330": {
                "value": {
                    "value": "[10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_331": {
                "num_rows": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "read_Data.py": {
        "tensorflow": {
            "Exists_31": {
                "filename": {
                    "value": "image_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_dir",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}