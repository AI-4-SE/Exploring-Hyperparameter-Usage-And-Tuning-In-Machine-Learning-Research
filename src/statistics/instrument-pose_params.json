{
    "src/eval.py": {
        "tensorflow": {
            "DEFINE_integer_29": {
                "name": {
                    "value": "eval_interval_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How often to run the eval.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_42": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir + FLAGS.experiment + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Coordinator_56": {
                "variable": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_260": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_261": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_263": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_268": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_273": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_276": {
                "variable": {
                    "value": "summary_op",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_278": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.eval_dir + FLAGS.experiment",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Exists_290": {
                "filename": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_292": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_58": {
                "variable": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_61": {
                "variable": {
                    "value": "threads",
                    "type": "Name",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Summary_185": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_291": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_261": {
                "x": {
                    "value": "FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_266": {
                "x": {
                    "value": "FLAGS.image_height * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_267": {
                "x": {
                    "value": "FLAGS.image_width * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_283": {
                "x": {
                    "value": "logits_objects",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "src/input.py": {
        "tensorflow": {
            "meshgrid_274": {
                "variable": {
                    "value": "(grid_col, grid_row)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.linspace(0.0, tf.cast(FLAGS.image_width * FLAGS.resize_factor - 1, tf.float32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.linspace(0.0, tf.cast(FLAGS.image_height * FLAGS.resize_factor - 1, tf.float32), tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_284": {
                "variable": {
                    "value": "mean_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "coords[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_285": {
                "variable": {
                    "value": "mean_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(coord_x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mean_x, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_287": {
                "variable": {
                    "value": "mean_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "coord_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "coords[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_288": {
                "variable": {
                    "value": "mean_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(coord_y, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mean_y, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_batch_19": {
                "variable": {
                    "value": "(images, label_batch, num_instrument_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label, num_instrument]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 2 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN * min_fraction_of_examples_in_queue)",
                            "Call"
                        ],
                        [
                            "int(NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN * min_fraction_of_examples_in_queue)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_26": {
                "variable": {
                    "value": "(images, label_batch, num_instrument_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label, num_instrument]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 2 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_input_producer_146": {
                "variable": {
                    "value": "queue",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[filenames, coords, num_instruments]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "string_DISTORTED_input_producer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "read_file_155": {
                "variable": {
                    "value": "file_content",
                    "type": "Name",
                    "possible_values": []
                },
                "filename": {
                    "value": "data_dir + image_filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "decode_png_157": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_content",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(data_dir + image_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(data_dir + image_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_163": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_png(file_content)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)], method=0, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(file_content)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)], method=0, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_165": {
                "variable": {
                    "value": "num_instrument",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "num_instrument",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queue[2]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(num_instrument, tf.float32)",
                            "Call"
                        ],
                        [
                            "queue[2]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(num_instrument, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_169": {
                "variable": {
                    "value": "coord_navail",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "coord[:, 0] < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_191": {
                "variable": {
                    "value": "uniform",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "1 / (FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.image_height * FLAGS.resize_factor, FLAGS.image_width * FLAGS.resize_factor, FLAGS.num_classes * FLAGS.num_objects]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_195": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.exp(log_prob_q(coord, var))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_198": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.exp(log_prob_q(coord, var)), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(label, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "label + coord_navail * uniform",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(tf.exp(log_prob_q(coord, var)), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(label, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "label + coord_navail * uniform",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_205": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_207": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "per_image_standardization_211": {
                "variable": {
                    "value": "float_image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_input_producer_233": {
                "variable": {
                    "value": "queue",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[filenames, coords, num_instruments]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "string_DISTORTED_input_producer",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "read_file_238": {
                "variable": {
                    "value": "file_content",
                    "type": "Name",
                    "possible_values": []
                },
                "filename": {
                    "value": "data_dir + image_filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "decode_png_240": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_content",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(data_dir + image_filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(data_dir + image_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_246": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_png(file_content)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)], method=0, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(file_content)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)], method=0, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_248": {
                "variable": {
                    "value": "num_instrument",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "num_instrument",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queue[2]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(num_instrument, tf.float32)",
                            "Call"
                        ],
                        [
                            "queue[2]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(num_instrument, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_251": {
                "variable": {
                    "value": "uniform",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "1 / (FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.image_height * FLAGS.resize_factor, FLAGS.image_width * FLAGS.resize_factor, FLAGS.num_classes * FLAGS.num_objects]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_254": {
                "variable": {
                    "value": "coord_navail",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "coord[:, 0] < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_256": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.exp(log_prob_q(coord, var))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_257": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.exp(log_prob_q(coord, var)), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(label, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "label + coord_navail * uniform",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(tf.exp(log_prob_q(coord, var)), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(label, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "label + coord_navail * uniform",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "per_image_standardization_260": {
                "variable": {
                    "value": "float_image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_png(file_content)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)], method=0, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(file_content)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)], method=0, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_261": {
                "variable": {
                    "value": "float_image",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[float_image, image / 255.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_132": {
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_145": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_226": {
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_231": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_274": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(FLAGS.image_width * FLAGS.resize_factor - 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_275": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(FLAGS.image_height * FLAGS.resize_factor - 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_283": {
                "input": {
                    "value": "coord_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "coords[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_286": {
                "input": {
                    "value": "mean_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(coord_x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mean_x, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_195": {
                "x": {
                    "value": "log_prob_q(coord, var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_256": {
                "x": {
                    "value": "log_prob_q(coord, var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_274": {
                "x": {
                    "value": "FLAGS.image_width * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_275": {
                "x": {
                    "value": "FLAGS.image_height * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_292": {
                "x": {
                    "value": "diff_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grid_row[None, None, ...] - mean_y",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_293": {
                "x": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_158": {
                "x": {
                    "value": "FLAGS.image_width * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_241": {
                "x": {
                    "value": "FLAGS.image_width * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/layers.py": {
        "tensorflow": {
            "truncated_normal_5": {
                "variable": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_14": {
                "variable": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_27": {
                "variable": {
                    "value": "x_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_28": {
                "variable": {
                    "value": "factor",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(factor, tf.float32)",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(tf.cast(x_shape[3], tf.float32) // factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_shape[0], x_shape[1] * stride, x_shape[2] * stride, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_33": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([x_shape[0], x_shape[1] * stride, x_shape[2] * stride, channels])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_48": {
                "variable": {
                    "value": "x1_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_49": {
                "variable": {
                    "value": "x2_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "slice_54": {
                "variable": {
                    "value": "x1_crop",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "begin": {
                    "value": "offsets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, (x1_shape[1] - x2_shape[1]) // 2, (x1_shape[2] - x2_shape[2]) // 2, 0]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-1, x2_shape[1], x2_shape[2], -1]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Variable_6": {
                "initial_value": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_10": {
                "initial_value": {
                    "value": "tf.truncated_normal(shape, stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_15": {
                "initial_value": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_43": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_44": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_55": {
                "values": {
                    "value": "[x1_crop, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_10": {
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "round_30": {
                "x": {
                    "value": "tf.cast(x_shape[3], tf.float32) // factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_96": {
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "add_to_collection_99": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.mul(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_98": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=tf.contrib.layers.xavier_initializer(), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_30": {
                "x": {
                    "value": "x_shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss.py": {
        "tensorflow": {
            "cast_34": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.int32)",
                            "Call"
                        ],
                        [
                            "labels_tools",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.sigmoid(logits) > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "correct",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.subtract(labels, logits)) > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_47": {
                "variable": {
                    "value": "prob_map",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "prob_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(prob_map, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_map, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(prob_map, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "variable": {
                    "value": "prob_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(prob_map, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_map, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(prob_map, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grid[None, None] * prob_map",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_57": {
                "variable": {
                    "value": "prob_map",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "prob_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(prob_map, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_map, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(prob_map, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "aux",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prob_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(prob_map, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_map, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(prob_map, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "variable": {
                    "value": "argmax",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "aux",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(prob_map, (FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_69": {
                "variable": {
                    "value": "distsqr",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(diffsqr, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_70": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "distsqr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reduce_sum(diffsqr, axis=2), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_63": {
                "values": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "input_tensor": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(distsqr)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_86": {
                "variable": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits_maps, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits_maps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_maps, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(1e-15, logits_maps)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits_maps, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits_maps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_maps, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(1e-15, logits_maps)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits_maps, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits_maps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_maps, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(1e-15, logits_maps)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits_maps, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits_maps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_maps, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(1e-15, logits_maps)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits_maps, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits_maps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_maps, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(1e-15, logits_maps)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_96": {
                "variable": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-15",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits_maps, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits_maps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_maps, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(1e-15, logits_maps)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_108": {
                "variable": {
                    "value": "cross_entropy_objects",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_tools",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.int32)",
                            "Call"
                        ],
                        [
                            "labels_tools",
                            "Name"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_110": {
                "variable": {
                    "value": "cross_entropy_mean_objects",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy_objects",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits_tools, labels=labels, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "input_tensor": {
                    "value": "correct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.abs(tf.subtract(labels, logits)) > 0, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_61": {
                "x": {
                    "value": "FLAGS.image_width * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_62": {
                "x": {
                    "value": "FLAGS.image_width * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "diffsqr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(v1 - v2) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_102": {
                "name": {
                    "value": "losses_map",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reduce_mean(cross_entropy_mean_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_113": {
                "name": {
                    "value": "losses_objects",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reduce_mean(cross_entropy_mean_objects)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_118": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean_tot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cross_entropy_mean_map + cross_entropy_mean_objects) / FLAGS.batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_n_120": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "x": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.nn.sigmoid(logits) > 0.5, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_40": {
                "x": {
                    "value": "tf.subtract(labels, logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "tf.multiply(labels_maps, tf.log(logits_maps))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "input_tensor": {
                    "value": "cross_entropy_mean_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.multiply(labels_maps, tf.log(logits_maps)), axis=[1, 2, 3])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_mean_113": {
                "input_tensor": {
                    "value": "cross_entropy_mean_objects",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cross_entropy_objects, name='cross_entropy', axis=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "cross_entropy_mean_map + cross_entropy_mean_objects",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_120": {
                "key": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_40": {
                "x": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.int32)",
                            "Call"
                        ],
                        [
                            "labels_tools",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.nn.sigmoid(logits) > 0.5, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_88": {
                "x": {
                    "value": "FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "FLAGS.image_height * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_93": {
                "x": {
                    "value": "FLAGS.image_width * FLAGS.resize_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_100": {
                "x": {
                    "value": "labels_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(logits_maps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_101": {
                "x": {
                    "value": "logits_maps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(logits_maps, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size * FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.image_width * FLAGS.resize_factor * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits_maps)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits_maps, [FLAGS.batch_size, FLAGS.num_classes * FLAGS.num_objects, tf.cast(FLAGS.image_height * FLAGS.resize_factor, tf.int32), tf.cast(FLAGS.image_width * FLAGS.resize_factor, tf.int32)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_maps, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(1e-15, logits_maps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model.py": {
        "tensorflow": {
            "sqrt_207": {
                "variable": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "2 / (1 ** 2 * features_root)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_222": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "begin": {
                    "value": "(0, 0, 0, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, -1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.pack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.pack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack((img_w, img_h, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.pack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.pack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.pack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.pack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack((-1, img_w, img_h, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exponential_decay_253": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_batches_per_epoch * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_289": {
                "variable": {
                    "value": "loss_averages",
                    "type": "Name",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_290": {
                "variable": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_317": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sqrt_75": {
                "variable": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "2 / (filter_size ** 2 * features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "relu_bottle",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_bottle + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "reshape",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu_bottle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv_bottle + b1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "local3",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(reshape, weights) + biases",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_142": {
                "variable": {
                    "value": "local3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "local3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(reshape, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local3, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_148": {
                "variable": {
                    "value": "local4",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(local3, weights) + biases",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_150": {
                "variable": {
                    "value": "local4",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "local4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(local3, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local4, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_159": {
                "variable": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "2 / (filter_size ** 2 * features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_223": {
                "input_tensor": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.pack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.pack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_224": {
                "input_tensor": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.pack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.pack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_258": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_265": {
                "variable": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_272": {
                "variable": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zero_fraction_29": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "tmp_h_conv",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1 + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "dw_h_convs[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2 + b2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "local3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_181": {
                "variable": {
                    "value": "h_conv",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1 + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_183": {
                "variable": {
                    "value": "in_node",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2 + b2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_210": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_227": {
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_228": {
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "control_dependencies_264": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_271": {
                "control_inputs": {
                    "value": "[apply_gradient_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_298": {
                "name": {
                    "value": "l.op.name + ' (raw)'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "losses + [total_loss]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_299": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_averages.average(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_342": {
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(2 / (filter_size ** 2 * features))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(2 / (filter_size ** 2 * features))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(2 / (1 ** 2 * features_root))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "add_to_collection_345": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.mul(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_154": {
                "a": {
                    "value": "local4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(local3, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local4, dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_variable(shape=[dim, 384], stddev=0.04)",
                            "Call"
                        ],
                        [
                            "weight_variable(shape=[384, 192], stddev=0.04)",
                            "Call"
                        ],
                        [
                            "weight_variable([192, FLAGS.num_objects], stddev=1 / 192)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_344": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=tf.contrib.layers.xavier_initializer(), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_140": {
                "a": {
                    "value": "reshape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(relu_bottle, [FLAGS.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_variable(shape=[dim, 384], stddev=0.04)",
                            "Call"
                        ],
                        [
                            "weight_variable(shape=[384, 192], stddev=0.04)",
                            "Call"
                        ],
                        [
                            "weight_variable([192, FLAGS.num_objects], stddev=1 / 192)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_148": {
                "a": {
                    "value": "local3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(reshape, weights) + biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(local3, dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_variable(shape=[dim, 384], stddev=0.04)",
                            "Call"
                        ],
                        [
                            "weight_variable(shape=[384, 192], stddev=0.04)",
                            "Call"
                        ],
                        [
                            "weight_variable([192, FLAGS.num_objects], stddev=1 / 192)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/settings.py": {
        "tensorflow": {
            "DEFINE_string_4": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "model/train/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs and checkpoint.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_7": {
                "name": {
                    "value": "eval_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "model/eval/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs and checkpoint.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_11": {
                "name": {
                    "value": "experiment",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs and checkpoint.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "training_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "retinal_dataset.csv",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "CSV with training data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "training_seq",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "training.csv",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "CSV with training data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "training_half",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "first",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Split data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "eval_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "retinal_dataset.csv",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "CSV with training data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "eval_half",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "second",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Split data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "eval_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "578",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of examples to run.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "train_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "training batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "eval_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "training batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches to run.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "image_height",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "480",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "image_width",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "640",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_49": {
                "name": {
                    "value": "resize_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "num_channels",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of channels in input image.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "num_examples_per_epoch_train",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "578",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "15",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_61": {
                "name": {
                    "value": "initial_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_63": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_65": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_67": {
                "name": {
                    "value": "var",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_72": {
                "name": {
                    "value": "max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of batches to run.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_74": {
                "name": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_76": {
                "name": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_79": {
                "name": {
                    "value": "training_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "training_laparoscopy.csv",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "CSV with training data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_81": {
                "name": {
                    "value": "training_half",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "all",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Split data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_83": {
                "name": {
                    "value": "eval_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "eval_laparoscopy.csv",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "CSV with eval data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_86": {
                "name": {
                    "value": "eval_half",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "all",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Split data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_90": {
                "name": {
                    "value": "eval_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "910",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of examples to run.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_92": {
                "name": {
                    "value": "image_height",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "576",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_94": {
                "name": {
                    "value": "image_width",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "720",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_96": {
                "name": {
                    "value": "resize_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "640 / 720",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_99": {
                "name": {
                    "value": "num_channels",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of channels in input image.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_105": {
                "name": {
                    "value": "num_examples_per_epoch_train",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_107": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_109": {
                "name": {
                    "value": "initial_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_111": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_113": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_115": {
                "name": {
                    "value": "var",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to log device placement.",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "tensorflow": {
            "DEFINE_integer_28": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_35": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.batch_size, int(FLAGS.image_height * FLAGS.resize_factor), int(FLAGS.image_width * FLAGS.resize_factor), FLAGS.num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.batch_size, int(FLAGS.image_height * FLAGS.resize_factor), int(FLAGS.image_width * FLAGS.resize_factor), FLAGS.num_classes * FLAGS.num_objects)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "labels_objects_placeholder",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.batch_size, FLAGS.num_objects)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "bn_training_placeholder",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_70": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_all_72": {
                "variable": {
                    "value": "merged",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_130": {
                "filename": {
                    "value": "FLAGS.train_dir + FLAGS.experiment + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MakeDirs_132": {
                "dirname": {
                    "value": "FLAGS.train_dir + FLAGS.experiment + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_133": {
                "filename": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_135": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_80": {
                "variable": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_83": {
                "variable": {
                    "value": "threads",
                    "type": "Name",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_131": {
                "dirname": {
                    "value": "FLAGS.train_dir + FLAGS.experiment + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DeleteRecursively_134": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}