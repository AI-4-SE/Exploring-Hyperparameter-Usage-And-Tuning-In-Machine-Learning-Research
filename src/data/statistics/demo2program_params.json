{
    "evaler.py": {
        "tensorflow": {
            "get_or_create_global_step_63": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "no_op_65": {
                "variable": {
                    "value": "self.step_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "step_no_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_68": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_74": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_79": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True), device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_82": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Coordinator_104": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_105": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_72": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "latest_checkpoint_86": {
                "variable": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_76": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "karel_env/input_ops_karel.py": {
        "tensorflow": {
            "string_input_producer_45": {
                "variable": {
                    "value": "input_ops[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tf.convert_to_tensor(data_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "capacity": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_82": {
                "variable": {
                    "value": "(input_ops[id], input_ops[program], input_ops[program_tokens], input_ops[s_h], input_ops[test_s_h], input_ops[a_h], input_ops[a_h_tokens], input_ops[test_a_h], input_ops[test_a_h_tokens], input_ops[program_len], input_ops[demo_len], input_ops[test_demo_len], input_ops[per], input_ops[test_per])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "load_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[input_ops['id']]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.string, tf.float32, tf.int32, tf.float32, tf.float32, tf.float32, tf.int32, tf.float32, tf.int32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "func_hp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shuffle_batch_110": {
                "variable": {
                    "value": "batch_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * batch_size * num_threads",
                            "BinOp"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(int(capacity * 0.75), 1024)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_118": {
                "variable": {
                    "value": "batch_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * batch_size * num_threads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_44": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'inputs'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_46": {
                "value": {
                    "value": "data_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ids",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/baselines/model_induction.py": {
        "tensorflow": {
            "expand_dims_33": {
                "variable": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "build_alignments(action_state.alignment_history)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(alignments, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_mechanism.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(expanded_alignments, attention_mechanism.values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(context, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_246": {
                "variable": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_id",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_251": {
                "variable": {
                    "value": "self.program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.dim_program_token, self.max_program_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_257": {
                "variable": {
                    "value": "self.program_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_program_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_261": {
                "variable": {
                    "value": "self.s_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "s_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_demo_len, self.h, self.w, self.depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_267": {
                "variable": {
                    "value": "self.test_s_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_s_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_demo_len, self.h, self.w, self.depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_273": {
                "variable": {
                    "value": "self.a_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_action_len, self.action_space]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_279": {
                "variable": {
                    "value": "self.a_h_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a_h_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_action_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_284": {
                "variable": {
                    "value": "self.test_a_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_a_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_demo_len, self.action_space]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_290": {
                "variable": {
                    "value": "self.test_a_h_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_a_h_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_action_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_295": {
                "variable": {
                    "value": "self.per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "per",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_demo_len, self.per_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_300": {
                "variable": {
                    "value": "self.test_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_per",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_demo_len, self.per_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_328": {
                "variable": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_332": {
                "variable": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_334": {
                "variable": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "demo_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_338": {
                "variable": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_341": {
                "variable": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_demo_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_345": {
                "variable": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_348": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_353": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bool(is_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_532": {
                "variable": {
                    "value": "demo_h_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "demo_h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_533": {
                "variable": {
                    "value": "demo_c_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "demo_c_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_639": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "compute_attention",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_143": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "checked_cell_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(all_attentions, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "polynomial_decay_232": {
                "variable": {
                    "value": "self.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self.scheduled_sampling_decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "final_teacher_forcing_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "scheduled_sampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_306": {
                "variable": {
                    "value": "self.init_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_pos",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, len(self.vizdoom_pos_keys), self.vizdoom_max_init_pos_len, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_312": {
                "variable": {
                    "value": "self.init_pos_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_pos_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, len(self.vizdoom_pos_keys)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_317": {
                "variable": {
                    "value": "self.test_init_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_init_pos",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, len(self.vizdoom_pos_keys), self.vizdoom_max_init_pos_len, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_323": {
                "variable": {
                    "value": "self.test_init_pos_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_init_pos_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, len(self.vizdoom_pos_keys)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_388": {
                "variable": {
                    "value": "s_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.s_h[:, :, :max_demo_len, :, :, :], self.s_h[:, :, 1:, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_535": {
                "variable": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "demo_h_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_h_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_536": {
                "variable": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "demo_c_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_c_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_897": {
                "name": {
                    "value": "test_loss/greedy_avg_action_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_avg_action_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "greedy_avg_action_loss / self.test_k",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_899": {
                "name": {
                    "value": "test_loss/greedy_avg_action_token_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_avg_action_token_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "greedy_avg_action_token_acc / self.test_k",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_901": {
                "name": {
                    "value": "test_loss/greedy_avg_action_seq_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_avg_action_seq_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "greedy_avg_action_seq_acc / self.test_k",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_903": {
                "name": {
                    "value": "test_loss/greedy_avg_action_seq_all_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_avg_action_seq_all_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.to_float(tf.reduce_all(tf.stack(greedy_seq_match, axis=1), axis=-1))) / self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_915": {
                "name": {
                    "value": "program_id/id",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_916": {
                "name": {
                    "value": "program/ground_truth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [self.program, self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_922": {
                "name": {
                    "value": "test_program_id/id",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_924": {
                "name": {
                    "value": "test_program/ground_truth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [self.program, self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_933": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros_like(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_934": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(pred, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_935": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(gt, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_949": {
                "variable": {
                    "value": "alignments_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.concat(alignments, axis=1), [1, 1, 1, self.k])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[align_shape[0], -1, align_shape[2] * self.k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_956": {
                "name": {
                    "value": "attn",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "build_alignments(action_state.alignment_history)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_957": {
                "name": {
                    "value": "test_attn",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "build_alignments(action_state.alignment_history)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_960": {
                "name": {
                    "value": "test_greedy_attn",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_alignments(greedy_action_state.alignment_history)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_972": {
                "name": {
                    "value": "'visualized_action/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(self.pred_action_list[i], self.gt_test_actions_onehot[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_976": {
                "name": {
                    "value": "'test_visualized_action/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(self.pred_action_list[i], self.gt_test_actions_onehot[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_980": {
                "name": {
                    "value": "'test_visualized_greedy_action/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(self.greedy_pred_action_list[i], self.gt_test_actions_onehot[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "compute_attention",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_142": {
                "control_inputs": {
                    "value": "self._batch_size_checks(cell_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_413": {
                "variable": {
                    "value": "state_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_419": {
                "variable": {
                    "value": "state_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state_feature, per]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), tf.reshape(per, [-1, self.per_dim]), self.batch_size * max_demo_len, reuse=reuse)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, max_demo_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_485": {
                "variable": {
                    "value": "embedding_map",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_map",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[token_dim + 1, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.01, maxval=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_538": {
                "variable": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "demo_h_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_h_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_539": {
                "variable": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "demo_c_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_c_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_593": {
                "variable": {
                    "value": "gt_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_token, gt_tokens[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_602": {
                "variable": {
                    "value": "projection_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "token_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_613": {
                "variable": {
                    "value": "pred_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred_length, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_618": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.rnn_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_619": {
                "variable": {
                    "value": "dynamic_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sz[0], max_sequence_len - sz[1], sz[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rnn_output.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_622": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rnn_output, dynamic_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_627": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(pred_seq, [self.batch_size, max_sequence_len, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_721": {
                "variable": {
                    "value": "max_sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_723": {
                "variable": {
                    "value": "min_sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sequence_mask_725": {
                "variable": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "gt_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_728": {
                "variable": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "max_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_731": {
                "variable": {
                    "value": "min_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "min_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "min_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_734": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(gt_sequence, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len, token_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_737": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(pred_sequence, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len, token_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_741": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(gt_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(pred_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_748": {
                "variable": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(gt_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_749": {
                "variable": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(pred_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_753": {
                "variable": {
                    "value": "correct_token_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(label_argmax, logit_argmax)) * tf.reshape(min_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_758": {
                "variable": {
                    "value": "seq_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_766": {
                "variable": {
                    "value": "len_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_768": {
                "variable": {
                    "value": "is_same_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_all(seq_equal, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "len_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_sequence_lengths[:, 0], pred_sequence_lengths[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_816": {
                "input_tensor": {
                    "value": "tf.to_float(tf.reduce_all(tf.stack(seq_match, axis=1), axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_843": {
                "input_tensor": {
                    "value": "tf.to_float(tf.reduce_all(tf.stack(greedy_seq_match, axis=1), axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_882": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_883": {
                "name": {
                    "value": "'test_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_917": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self.program, self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_925": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self.program, self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_936": {
                "values": {
                    "value": "[pred, gt, dummy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_944": {
                "variable": {
                    "value": "align_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.transpose(i.stack(), [1, 2, 0]), -1) * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_963": {
                "name": {
                    "value": "state/initial_state",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.s_h[:, 0, 0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_966": {
                "name": {
                    "value": "state/demo_program_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.s_h[0, 0, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "self.max_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_988": {
                "name": {
                    "value": "'debug/demo_feature_history/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.grayscale_to_rgb(tf.expand_dims(demo_feature_history_list[i], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_49": {
                "values": {
                    "value": "[cell_output, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_169": {
                "values": {
                    "value": "all_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_400": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_427": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_435": {
                "variable": {
                    "value": "fcell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "math.ceil(self.num_lstm_cell_units)",
                    "type": "Call",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_438": {
                "variable": {
                    "value": "bcell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "math.floor(self.num_lstm_cell_units)",
                    "type": "Call",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_441": {
                "variable": {
                    "value": "(new_h, cell_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fcell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=math.ceil(self.num_lstm_cell_units), state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bcell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=math.floor(self.num_lstm_cell_units), state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), tf.reshape(per, [-1, self.per_dim]), self.batch_size * max_demo_len, reuse=reuse), [self.batch_size, max_demo_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_444": {
                "variable": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(new_h, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_445": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "tf.reduce_sum(tf.stack([cs.c for cs in cell_state], axis=1), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "h": {
                    "value": "tf.reduce_sum(tf.stack([cs.h for cs in cell_state], axis=1), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_471": {
                "variable": {
                    "value": "all_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_h, state_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_481": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "embedding_lookup_491": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='embedding_map', shape=[token_dim + 1, embedding_dim], initializer=tf.random_uniform_initializer(minval=-0.01, maxval=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_498": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unstack_508": {
                "value": {
                    "value": "tf.transpose(self.test_a_h, [0, 1, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_512": {
                "value": {
                    "value": "self.test_a_h_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_541": {
                "variable": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.max_pooling1d(demo_h_stack, demo_h_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_547": {
                "variable": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.max_pooling1d(demo_c_stack, demo_c_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_588": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_605": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "visual_c",
                    "type": "variable",
                    "possible_values": []
                },
                "h": {
                    "value": "visual_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_719": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_817": {
                "x": {
                    "value": "tf.reduce_all(tf.stack(seq_match, axis=1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_844": {
                "x": {
                    "value": "tf.reduce_all(tf.stack(greedy_seq_match, axis=1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_933": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.nn.softmax(pred, dim=1), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_934": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.nn.softmax(pred, dim=1), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_950": {
                "input": {
                    "value": "tf.concat(alignments, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, self.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_989": {
                "images": {
                    "value": "tf.expand_dims(demo_feature_history_list[i], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_92": {
                "units": {
                    "value": "attention_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_451": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_454": {
                "variable": {
                    "value": "(new_h, cell_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), tf.reshape(per, [-1, self.per_dim]), self.batch_size * max_demo_len, reuse=reuse), [self.batch_size, max_demo_len, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_508": {
                "a": {
                    "value": "self.test_a_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_628": {
                "tensor": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rnn_output, dynamic_pad], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(pred_seq, [self.batch_size, max_sequence_len, -1]), [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, max_sequence_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_645": {
                "name_or_scope": {
                    "value": "AttnMechanism",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "i > 0 or j > 0",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_676": {
                "c": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(demo_h_stack, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(demo_h_stack, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.max_pooling1d(demo_h_stack, demo_h_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last'), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(demo_c_stack, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(demo_c_stack, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.max_pooling1d(demo_c_stack, demo_c_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last'), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_694": {
                "c": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(demo_h_stack, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(demo_h_stack, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.max_pooling1d(demo_h_stack, demo_h_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last'), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(demo_c_stack, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(demo_c_stack, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.max_pooling1d(demo_c_stack, demo_c_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last'), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_734": {
                "a": {
                    "value": "gt_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_737": {
                "a": {
                    "value": "pred_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_744": {
                "input_tensor": {
                    "value": "cross_entropy * tf.reshape(gt_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_745": {
                "input_tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_756": {
                "input_tensor": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(max_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='max_mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_759": {
                "tensor": {
                    "value": "tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_762": {
                "tensor": {
                    "value": "tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_all_769": {
                "input_tensor": {
                    "value": "seq_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reshape(tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1]), tf.reshape(tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_770": {
                "input_tensor": {
                    "value": "tf.to_float(is_same_seq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_800": {
                "input": {
                    "value": "self.test_action_len[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_802": {
                "input": {
                    "value": "self.test_action_len[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_817": {
                "input_tensor": {
                    "value": "tf.stack(seq_match, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_830": {
                "input": {
                    "value": "self.test_action_len[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_844": {
                "input_tensor": {
                    "value": "tf.stack(greedy_seq_match, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_942": {
                "input": {
                    "value": "tf.transpose(i.stack(), [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_950": {
                "values": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "build_alignments(action_state.alignment_history)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_990": {
                "input": {
                    "value": "demo_feature_history_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_430": {
                "tensor": {
                    "value": "s_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([self.s_h[:, :, :max_demo_len, :, :, :], self.s_h[:, :, 1:, :, :, :]], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.s_h",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.h, self.w, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_431": {
                "tensor": {
                    "value": "per",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.per_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_444": {
                "values": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(new_h, axis=2), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_446": {
                "input_tensor": {
                    "value": "tf.stack([cs.c for cs in cell_state], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_448": {
                "input_tensor": {
                    "value": "tf.stack([cs.h for cs in cell_state], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicRNNCell_458": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_459": {
                "variable": {
                    "value": "(new_h, cell_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), tf.reshape(per, [-1, self.per_dim]), self.batch_size * max_demo_len, reuse=reuse), [self.batch_size, max_demo_len, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_487": {
                "minval": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_pooling1d_542": {
                "inputs": {
                    "value": "demo_h_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_h_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "demo_h_stack.get_shape().as_list()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling1d_548": {
                "inputs": {
                    "value": "demo_c_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_c_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "demo_c_stack.get_shape().as_list()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_591": {
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gt_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_754": {
                "x": {
                    "value": "tf.equal(label_argmax, logit_argmax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_755": {
                "tensor": {
                    "value": "min_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(min_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='min_mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_771": {
                "x": {
                    "value": "is_same_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.reduce_all(seq_equal, axis=-1), len_equal)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_817": {
                "values": {
                    "value": "seq_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_844": {
                "values": {
                    "value": "greedy_seq_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_943": {
                "a": {
                    "value": "i.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_946": {
                "shape": {
                    "value": "[align_shape[0], 1, align_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_446": {
                "values": {
                    "value": "[cs.c for cs in cell_state]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_448": {
                "values": {
                    "value": "[cs.h for cs in cell_state]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_463": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_464": {
                "variable": {
                    "value": "(new_h, cell_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), tf.reshape(per, [-1, self.per_dim]), self.batch_size * max_demo_len, reuse=reuse), [self.batch_size, max_demo_len, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_575": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_744": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_754": {
                "x": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_759": {
                "x": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_760": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_762": {
                "x": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_763": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/baselines/model_summarizer.py": {
        "tensorflow": {
            "placeholder_83": {
                "variable": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_id",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.dim_program_token, self.max_program_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "self.program_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_program_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.s_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "s_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_demo_len, self.h, self.w, self.depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.test_s_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_s_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_demo_len, self.h, self.w, self.depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "self.a_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_action_len, self.action_space]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "self.a_h_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a_h_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_action_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "self.per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "per",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_demo_len, self.per_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "self.test_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_per",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_demo_len, self.per_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_159": {
                "variable": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_163": {
                "variable": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "demo_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_169": {
                "variable": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_demo_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_175": {
                "variable": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_184": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bool(is_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_314": {
                "variable": {
                    "value": "self.gt_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ground_truth_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_324": {
                "variable": {
                    "value": "self.gt_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_506": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SummarizeFeature(tf.stack(demo_c_list, axis=1), aggregation='rn', scope='demo_c_summary')",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SummarizeFeature(tf.stack(demo_h_list, axis=1), aggregation='rn', scope='demo_h_summary')",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_66": {
                "variable": {
                    "value": "self.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self.scheduled_sampling_decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "final_teacher_forcing_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "scheduled_sampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "self.init_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_pos",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, len(self.vizdoom_pos_keys), self.vizdoom_max_init_pos_len, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self.init_pos_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_pos_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, len(self.vizdoom_pos_keys)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "self.test_init_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_init_pos",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, len(self.vizdoom_pos_keys), self.vizdoom_max_init_pos_len, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "self.test_init_pos_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_init_pos_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, len(self.vizdoom_pos_keys)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_329": {
                "variable": {
                    "value": "tile1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(feat, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.k, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_330": {
                "variable": {
                    "value": "tile2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(feat, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_502": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_805": {
                "variable": {
                    "value": "exact_program_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exact_program_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.py_func(exact_program_compare_karel, [p_token, p_len, is_correct_syntax, gt_token, gt_len], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.py_func(exact_program_compare_vizdoom, [p_token, p_len, is_correct_syntax, gt_token, gt_len], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_811": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "demo",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "execution",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_all_812": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_all_813": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_all_814": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_all_815": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_817": {
                "variable": {
                    "value": "is_same_len",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "demo_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.demo_len",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "execution_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_or_819": {
                "variable": {
                    "value": "is_correct_execution",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(is_same_execution, is_same_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.tile(tf.expand_dims(tf.cast(is_same_program, tf.bool), axis=1), [1, k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_824": {
                "variable": {
                    "value": "num_correct_execution",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(is_correct_execution)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_831": {
                "variable": {
                    "value": "execution_acc_hist",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hist_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_978": {
                "name": {
                    "value": "test_loss/greedy_program_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_980": {
                "name": {
                    "value": "test_loss/greedy_program_token_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.token_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_982": {
                "name": {
                    "value": "test_loss/greedy_program_seq_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.seq_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_984": {
                "name": {
                    "value": "test_loss/greedy_program_syntax_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.syntax_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_996": {
                "name": {
                    "value": "program_id/id",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_997": {
                "name": {
                    "value": "program/pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [tf.argmax(self.pred_program, axis=1), self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1003": {
                "name": {
                    "value": "program/ground_truth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [tf.argmax(self.ground_truth_program, axis=1), self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1009": {
                "name": {
                    "value": "test_program_id/id",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1011": {
                "name": {
                    "value": "test_program/pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [tf.argmax(self.pred_program, axis=1), self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1017": {
                "name": {
                    "value": "test_program/greedy_pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [self.greedy_pred_program_tokens, self.greedy_pred_program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1024": {
                "name": {
                    "value": "test_program/ground_truth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [tf.argmax(self.ground_truth_program, axis=1), self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1033": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros_like(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1034": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1035": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(gt, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_1039": {
                "variable": {
                    "value": "tiled_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(program_stat.mask, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.dim_program_token, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1045": {
                "name": {
                    "value": "visualized_program",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.pred_program, dim=1), self.ground_truth_program)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1049": {
                "name": {
                    "value": "test_visualized_program",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.pred_program, dim=1), self.ground_truth_program)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1053": {
                "name": {
                    "value": "test_visualized_greedy_program",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.one_hot(self.greedy_pred_program_tokens, self.dim_program_token, axis=1), self.ground_truth_program)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_234": {
                "variable": {
                    "value": "state_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "variable": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), self.batch_size * max_demo_len, reuse=reuse)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, max_demo_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_258": {
                "variable": {
                    "value": "(new_h, cell_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), self.batch_size * max_demo_len, reuse=reuse), [self.batch_size, max_demo_len, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_278": {
                "variable": {
                    "value": "(new_h, cell_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "prev_h",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.LSTMStateTuple(demo_c_summary, demo_h_summary)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_292": {
                "variable": {
                    "value": "embedding_map",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_map",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[token_dim + 1, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.01, maxval=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_334": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([tile1, tile2], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs * k * k, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_340": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_mean(tf.reshape(_, [bs, k, k, -1]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_373": {
                "values": {
                    "value": "step1_h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_376": {
                "values": {
                    "value": "step1_c_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_392": {
                "values": {
                    "value": "demo_h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_395": {
                "values": {
                    "value": "demo_c_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_449": {
                "variable": {
                    "value": "gt_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_token, gt_tokens[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_457": {
                "variable": {
                    "value": "projection_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "token_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_466": {
                "variable": {
                    "value": "pred_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred_length, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_471": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.rnn_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_472": {
                "variable": {
                    "value": "dynamic_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sz[0], max_sequence_len - sz[1], sz[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rnn_output.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_475": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rnn_output, dynamic_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_481": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.sample_id",
                            "Attribute"
                        ],
                        [
                            "tf.concat([pred_token, dynamic_pad], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_482": {
                "variable": {
                    "value": "dynamic_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sz[0], max_sequence_len - sz[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred_token.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_484": {
                "variable": {
                    "value": "pred_token",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pred_token, dynamic_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_488": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(pred_seq, [self.batch_size, max_sequence_len, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_501": {
                "name_or_scope": {
                    "value": "'dec_cell_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_554": {
                "variable": {
                    "value": "max_sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_556": {
                "variable": {
                    "value": "min_sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sequence_mask_558": {
                "variable": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "gt_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_561": {
                "variable": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "max_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_564": {
                "variable": {
                    "value": "min_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "min_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "min_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_567": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(gt_sequence, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len, token_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_570": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(pred_sequence, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len, token_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_575": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(gt_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(pred_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_583": {
                "variable": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(gt_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_593": {
                "variable": {
                    "value": "correct_token_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(label_argmax, logit_argmax)) * tf.reshape(min_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_598": {
                "variable": {
                    "value": "seq_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_604": {
                "variable": {
                    "value": "len_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_606": {
                "variable": {
                    "value": "is_same_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(tf.reduce_all(seq_equal, axis=-1), len_equal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_610": {
                "variable": {
                    "value": "pred_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(pred_sequence_tokens, label_argmax.dtype), [self.batch_size * max_sequence_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, max_sequence_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_612": {
                "variable": {
                    "value": "is_correct_syntax",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "check_correct_syntax",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[pred_tokens, pred_sequence_lengths, is_same_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_771": {
                "variable": {
                    "value": "(execution, execution_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "generate_program_output_karel",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[initial_states, max_demo_len, k, h, w, depth, p_token, p_len, is_correct_syntax, is_same_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "(tf.float32, tf.int32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "py_func_793": {
                "variable": {
                    "value": "exact_program_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "exact_program_compare_karel",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[p_token, p_len, is_correct_syntax, gt_token, gt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_829": {
                "variable": {
                    "value": "eq_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(num_correct_execution, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_964": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_965": {
                "name": {
                    "value": "'test_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_998": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.argmax(self.pred_program, axis=1), self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1004": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.argmax(self.ground_truth_program, axis=1), self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1012": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.argmax(self.pred_program, axis=1), self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1018": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self.greedy_pred_program_tokens, self.greedy_pred_program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1025": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.argmax(self.ground_truth_program, axis=1), self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_1036": {
                "t": {
                    "value": "tf.concat([pred, gt, dummy], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_1041": {
                "name": {
                    "value": "debug/mask",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.grayscale_to_rgb(tf.expand_dims(tiled_mask, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1059": {
                "name": {
                    "value": "state/initial_state",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.s_h[:, 0, 0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1062": {
                "name": {
                    "value": "state/demo_program_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.s_h[0, 0, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "self.max_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1070": {
                "name": {
                    "value": "'debug/demo_feature_history/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.grayscale_to_rgb(tf.expand_dims(demo_feature_history_list[i], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_248": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_266": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_269": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "embedding_lookup_298": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='embedding_map', shape=[token_dim + 1, embedding_dim], initializer=tf.random_uniform_initializer(minval=-0.01, maxval=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unstack_318": {
                "value": {
                    "value": "tf.transpose(self.a_h, [0, 1, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_322": {
                "value": {
                    "value": "self.a_h_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_329": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_330": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_347": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_350": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_387": {
                "c": {
                    "value": "summary_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SummarizeFeature(tf.stack(step1_c_list, axis=1), aggregation='avgpool', scope='summary_c')",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "summary_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SummarizeFeature(tf.stack(step1_h_list, axis=1), aggregation='avgpool', scope='summary_h')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_445": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_553": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_585": {
                "variable": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(pred_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_587": {
                "variable": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(pred_sequence_tokens, label_argmax.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_778": {
                "variable": {
                    "value": "(execution, execution_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "generate_program_output_vizdoom",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[init_pos, init_pos_len, self.vizdoom_pos_keys, max_demo_len, k, h, w, depth, p_token, p_len, is_correct_syntax, is_same_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "(tf.float32, tf.int32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "py_func_798": {
                "variable": {
                    "value": "exact_program_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "exact_program_compare_vizdoom",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[p_token, p_len, is_correct_syntax, gt_token, gt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_820": {
                "x": {
                    "value": "is_same_execution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "is_same_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(demo_len, execution_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_821": {
                "input": {
                    "value": "tf.expand_dims(tf.cast(is_same_program, tf.bool), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_825": {
                "x": {
                    "value": "is_correct_execution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.logical_and(is_same_execution, is_same_len), tf.tile(tf.expand_dims(tf.cast(is_same_program, tf.bool), axis=1), [1, k]))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1033": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1036": {
                "values": {
                    "value": "[pred, gt, dummy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1039": {
                "input": {
                    "value": "program_stat.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_1042": {
                "images": {
                    "value": "tf.expand_dims(tiled_mask, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1046": {
                "logits": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1050": {
                "logits": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_1054": {
                "indices": {
                    "value": "self.greedy_pred_program_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.dim_program_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_1071": {
                "images": {
                    "value": "tf.expand_dims(demo_feature_history_list[i], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BasicRNNCell_252": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicRNNCell_273": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_318": {
                "a": {
                    "value": "self.a_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_334": {
                "values": {
                    "value": "[tile1, tile2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_341": {
                "input_tensor": {
                    "value": "tf.reshape(_, [bs, k, k, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_489": {
                "tensor": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rnn_output, dynamic_pad], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(pred_seq, [self.batch_size, max_sequence_len, -1]), [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, max_sequence_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_567": {
                "a": {
                    "value": "gt_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_570": {
                "a": {
                    "value": "pred_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_579": {
                "input_tensor": {
                    "value": "cross_entropy * tf.reshape(gt_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_580": {
                "input_tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_596": {
                "input_tensor": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(max_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='max_mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_599": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_601": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_606": {
                "x": {
                    "value": "tf.reduce_all(seq_equal, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "len_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_sequence_lengths[:, 0], pred_sequence_lengths[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_608": {
                "input_tensor": {
                    "value": "is_same_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.logical_and(tf.reduce_all(seq_equal, axis=-1), len_equal))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_617": {
                "input_tensor": {
                    "value": "is_correct_syntax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(check_correct_syntax, [pred_tokens, pred_sequence_lengths, is_same_seq], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_822": {
                "input": {
                    "value": "tf.cast(is_same_program, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_829": {
                "x": {
                    "value": "num_correct_execution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.to_float(is_correct_execution), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(k + 1)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_1000": {
                "input": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1006": {
                "input": {
                    "value": "self.ground_truth_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1014": {
                "input": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1027": {
                "input": {
                    "value": "self.ground_truth_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1043": {
                "input": {
                    "value": "tiled_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(program_stat.mask, axis=1), [1, self.dim_program_token, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1072": {
                "input": {
                    "value": "demo_feature_history_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "tensor": {
                    "value": "s_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s_h",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.h, self.w, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GRUCell_254": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_275": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_294": {
                "minval": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, k, k, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gt_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_588": {
                "x": {
                    "value": "pred_sequence_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "label_argmax.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_594": {
                "x": {
                    "value": "tf.equal(label_argmax, logit_argmax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_595": {
                "tensor": {
                    "value": "min_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(min_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='min_mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_all_607": {
                "input_tensor": {
                    "value": "seq_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reshape(tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1]), tf.reshape(tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_822": {
                "x": {
                    "value": "is_same_program",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_830": {
                "input_tensor": {
                    "value": "eq_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(num_correct_execution, i))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_418": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_579": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_594": {
                "x": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(pred_sequence_tokens, label_argmax.dtype), [self.batch_size * max_sequence_len])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_599": {
                "x": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_601": {
                "x": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(pred_sequence_tokens, label_argmax.dtype), [self.batch_size * max_sequence_len])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_424": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_431": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/baselines/model_synthesis.py": {
        "tensorflow": {
            "placeholder_83": {
                "variable": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_id",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.dim_program_token, self.max_program_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "self.program_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_program_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.s_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "s_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_demo_len, self.h, self.w, self.depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.test_s_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_s_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_demo_len, self.h, self.w, self.depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "self.a_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_action_len, self.action_space]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "self.a_h_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a_h_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_action_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "self.per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "per",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_demo_len, self.per_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "self.test_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_per",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_demo_len, self.per_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_159": {
                "variable": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_163": {
                "variable": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "demo_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_169": {
                "variable": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_demo_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_175": {
                "variable": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_184": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bool(is_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_309": {
                "variable": {
                    "value": "self.gt_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ground_truth_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_319": {
                "variable": {
                    "value": "self.gt_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "demo_h_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "demo_h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_337": {
                "variable": {
                    "value": "demo_c_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "demo_c_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_467": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(demo_c_stack, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(demo_c_stack, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.max_pooling1d(demo_c_stack, demo_c_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last'), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(demo_h_stack, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(demo_h_stack, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.layers.max_pooling1d(demo_h_stack, demo_h_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last'), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_66": {
                "variable": {
                    "value": "self.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self.scheduled_sampling_decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "final_teacher_forcing_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "scheduled_sampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "self.init_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_pos",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, len(self.vizdoom_pos_keys), self.vizdoom_max_init_pos_len, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self.init_pos_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_pos_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, len(self.vizdoom_pos_keys)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "self.test_init_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_init_pos",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, len(self.vizdoom_pos_keys), self.vizdoom_max_init_pos_len, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "self.test_init_pos_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_init_pos_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, len(self.vizdoom_pos_keys)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "variable": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "demo_h_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_h_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "variable": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "demo_c_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_c_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_463": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_766": {
                "variable": {
                    "value": "exact_program_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exact_program_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.py_func(exact_program_compare_karel, [p_token, p_len, is_correct_syntax, gt_token, gt_len], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.py_func(exact_program_compare_vizdoom, [p_token, p_len, is_correct_syntax, gt_token, gt_len], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_772": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "demo",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "execution",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_all_773": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, int(embedding_dim / 4), is_train, info=not reuse, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, embedding_dim, is_train, info=not reuse, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_all_774": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, int(embedding_dim / 4), is_train, info=not reuse, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, embedding_dim, is_train, info=not reuse, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_all_775": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, int(embedding_dim / 4), is_train, info=not reuse, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, embedding_dim, is_train, info=not reuse, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_all_776": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, int(embedding_dim / 4), is_train, info=not reuse, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, embedding_dim, is_train, info=not reuse, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_778": {
                "variable": {
                    "value": "is_same_len",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "demo_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.demo_len",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "execution_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_or_780": {
                "variable": {
                    "value": "is_correct_execution",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(is_same_execution, is_same_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.tile(tf.expand_dims(tf.cast(is_same_program, tf.bool), axis=1), [1, k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_785": {
                "variable": {
                    "value": "num_correct_execution",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(is_correct_execution)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_792": {
                "variable": {
                    "value": "execution_acc_hist",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hist_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_939": {
                "name": {
                    "value": "test_loss/greedy_program_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_941": {
                "name": {
                    "value": "test_loss/greedy_program_token_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.token_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_943": {
                "name": {
                    "value": "test_loss/greedy_program_seq_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.seq_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_945": {
                "name": {
                    "value": "test_loss/greedy_program_syntax_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.syntax_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_957": {
                "name": {
                    "value": "program_id/id",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_958": {
                "name": {
                    "value": "program/pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [tf.argmax(self.pred_program, axis=1), self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_964": {
                "name": {
                    "value": "program/ground_truth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [tf.argmax(self.ground_truth_program, axis=1), self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_970": {
                "name": {
                    "value": "test_program_id/id",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_972": {
                "name": {
                    "value": "test_program/pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [tf.argmax(self.pred_program, axis=1), self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_978": {
                "name": {
                    "value": "test_program/greedy_pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [self.greedy_pred_program_tokens, self.greedy_pred_program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_985": {
                "name": {
                    "value": "test_program/ground_truth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [tf.argmax(self.ground_truth_program, axis=1), self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_994": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros_like(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_995": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_996": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(gt, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_1000": {
                "variable": {
                    "value": "tiled_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(program_stat.mask, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.dim_program_token, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1006": {
                "name": {
                    "value": "visualized_program",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.pred_program, dim=1), self.ground_truth_program)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1010": {
                "name": {
                    "value": "test_visualized_program",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.pred_program, dim=1), self.ground_truth_program)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1014": {
                "name": {
                    "value": "test_visualized_greedy_program",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.one_hot(self.greedy_pred_program_tokens, self.dim_program_token, axis=1), self.ground_truth_program)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_234": {
                "variable": {
                    "value": "state_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, int(embedding_dim / 4), is_train, info=not reuse, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, embedding_dim, is_train, info=not reuse, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "variable": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), self.batch_size * max_demo_len, reuse=reuse)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, max_demo_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_259": {
                "variable": {
                    "value": "(new_h, cell_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), self.batch_size * max_demo_len, reuse=reuse), [self.batch_size, max_demo_len, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_274": {
                "variable": {
                    "value": "embedding_map",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_map",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[token_dim + 1, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.01, maxval=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_342": {
                "variable": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "demo_h_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_h_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_343": {
                "variable": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "demo_c_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_c_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_410": {
                "variable": {
                    "value": "gt_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_token, gt_tokens[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_418": {
                "variable": {
                    "value": "projection_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "token_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_427": {
                "variable": {
                    "value": "pred_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred_length, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_432": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.rnn_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_433": {
                "variable": {
                    "value": "dynamic_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sz[0], max_sequence_len - sz[1], sz[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rnn_output.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_436": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rnn_output, dynamic_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_442": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.sample_id",
                            "Attribute"
                        ],
                        [
                            "tf.concat([pred_token, dynamic_pad], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_443": {
                "variable": {
                    "value": "dynamic_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sz[0], max_sequence_len - sz[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred_token.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_445": {
                "variable": {
                    "value": "pred_token",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pred_token, dynamic_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_449": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(pred_seq, [self.batch_size, max_sequence_len, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_462": {
                "name_or_scope": {
                    "value": "'dec_cell_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_515": {
                "variable": {
                    "value": "max_sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_517": {
                "variable": {
                    "value": "min_sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sequence_mask_519": {
                "variable": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "gt_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_522": {
                "variable": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "max_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_525": {
                "variable": {
                    "value": "min_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "min_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "min_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_528": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(gt_sequence, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len, token_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_531": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(pred_sequence, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len, token_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_536": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(gt_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(pred_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_544": {
                "variable": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(gt_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_554": {
                "variable": {
                    "value": "correct_token_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(label_argmax, logit_argmax)) * tf.reshape(min_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_559": {
                "variable": {
                    "value": "seq_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_565": {
                "variable": {
                    "value": "len_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_567": {
                "variable": {
                    "value": "is_same_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(tf.reduce_all(seq_equal, axis=-1), len_equal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_571": {
                "variable": {
                    "value": "pred_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(pred_sequence_tokens, label_argmax.dtype), [self.batch_size * max_sequence_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, max_sequence_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_573": {
                "variable": {
                    "value": "is_correct_syntax",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "check_correct_syntax",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[pred_tokens, pred_sequence_lengths, is_same_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_732": {
                "variable": {
                    "value": "(execution, execution_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "generate_program_output_karel",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[initial_states, max_demo_len, k, h, w, depth, p_token, p_len, is_correct_syntax, is_same_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "(tf.float32, tf.int32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "py_func_754": {
                "variable": {
                    "value": "exact_program_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "exact_program_compare_karel",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[p_token, p_len, is_correct_syntax, gt_token, gt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_790": {
                "variable": {
                    "value": "eq_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(num_correct_execution, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_925": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_926": {
                "name": {
                    "value": "'test_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_959": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.argmax(self.pred_program, axis=1), self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_965": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.argmax(self.ground_truth_program, axis=1), self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_973": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.argmax(self.pred_program, axis=1), self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_979": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self.greedy_pred_program_tokens, self.greedy_pred_program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_986": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[tf.argmax(self.ground_truth_program, axis=1), self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_997": {
                "t": {
                    "value": "tf.concat([pred, gt, dummy], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_1002": {
                "name": {
                    "value": "debug/mask",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.grayscale_to_rgb(tf.expand_dims(tiled_mask, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1020": {
                "name": {
                    "value": "state/initial_state",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.s_h[:, 0, 0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1023": {
                "name": {
                    "value": "state/demo_program_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.s_h[0, 0, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "self.max_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1031": {
                "name": {
                    "value": "'debug/demo_feature_history/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.grayscale_to_rgb(tf.expand_dims(demo_feature_history_list[i], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "embedding_lookup_280": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='embedding_map', shape=[token_dim + 1, embedding_dim], initializer=tf.random_uniform_initializer(minval=-0.01, maxval=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unstack_313": {
                "value": {
                    "value": "tf.transpose(self.a_h, [0, 1, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_317": {
                "value": {
                    "value": "self.a_h_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_345": {
                "variable": {
                    "value": "demo_h_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.max_pooling1d(demo_h_stack, demo_h_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_351": {
                "variable": {
                    "value": "demo_c_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.max_pooling1d(demo_c_stack, demo_c_stack.get_shape().as_list()[1], 1, padding='valid', data_format='channels_last')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_406": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_514": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_546": {
                "variable": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(pred_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_548": {
                "variable": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(pred_sequence_tokens, label_argmax.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_739": {
                "variable": {
                    "value": "(execution, execution_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "generate_program_output_vizdoom",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[init_pos, init_pos_len, self.vizdoom_pos_keys, max_demo_len, k, h, w, depth, p_token, p_len, is_correct_syntax, is_same_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "(tf.float32, tf.int32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "py_func_759": {
                "variable": {
                    "value": "exact_program_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "exact_program_compare_vizdoom",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[p_token, p_len, is_correct_syntax, gt_token, gt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_781": {
                "x": {
                    "value": "is_same_execution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "is_same_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(demo_len, execution_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_782": {
                "input": {
                    "value": "tf.expand_dims(tf.cast(is_same_program, tf.bool), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_786": {
                "x": {
                    "value": "is_correct_execution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.logical_and(is_same_execution, is_same_len), tf.tile(tf.expand_dims(tf.cast(is_same_program, tf.bool), axis=1), [1, k]))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_994": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_997": {
                "values": {
                    "value": "[pred, gt, dummy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1000": {
                "input": {
                    "value": "program_stat.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_1003": {
                "images": {
                    "value": "tf.expand_dims(tiled_mask, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1007": {
                "logits": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1011": {
                "logits": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_1015": {
                "indices": {
                    "value": "self.greedy_pred_program_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.dim_program_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_1032": {
                "images": {
                    "value": "tf.expand_dims(demo_feature_history_list[i], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "'cell_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_249": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_313": {
                "a": {
                    "value": "self.a_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_450": {
                "tensor": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rnn_output, dynamic_pad], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(pred_seq, [self.batch_size, max_sequence_len, -1]), [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, max_sequence_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_528": {
                "a": {
                    "value": "gt_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_531": {
                "a": {
                    "value": "pred_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_540": {
                "input_tensor": {
                    "value": "cross_entropy * tf.reshape(gt_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_541": {
                "input_tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_557": {
                "input_tensor": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(max_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='max_mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_560": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_562": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_567": {
                "x": {
                    "value": "tf.reduce_all(seq_equal, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "len_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_sequence_lengths[:, 0], pred_sequence_lengths[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_569": {
                "input_tensor": {
                    "value": "is_same_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.logical_and(tf.reduce_all(seq_equal, axis=-1), len_equal))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_578": {
                "input_tensor": {
                    "value": "is_correct_syntax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(check_correct_syntax, [pred_tokens, pred_sequence_lengths, is_same_seq], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_783": {
                "input": {
                    "value": "tf.cast(is_same_program, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_790": {
                "x": {
                    "value": "num_correct_execution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.to_float(is_correct_execution), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(k + 1)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_961": {
                "input": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_967": {
                "input": {
                    "value": "self.ground_truth_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_975": {
                "input": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_988": {
                "input": {
                    "value": "self.ground_truth_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1004": {
                "input": {
                    "value": "tiled_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(program_stat.mask, axis=1), [1, self.dim_program_token, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1033": {
                "input": {
                    "value": "demo_feature_history_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "tensor": {
                    "value": "s_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s_h",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.h, self.w, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicRNNCell_253": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_276": {
                "minval": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_pooling1d_346": {
                "inputs": {
                    "value": "demo_h_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_h_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "demo_h_stack.get_shape().as_list()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling1d_352": {
                "inputs": {
                    "value": "demo_c_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(demo_c_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "demo_c_stack.get_shape().as_list()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gt_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_549": {
                "x": {
                    "value": "pred_sequence_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "label_argmax.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_555": {
                "x": {
                    "value": "tf.equal(label_argmax, logit_argmax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_556": {
                "tensor": {
                    "value": "min_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(min_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='min_mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_all_568": {
                "input_tensor": {
                    "value": "seq_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reshape(tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1]), tf.reshape(tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_783": {
                "x": {
                    "value": "is_same_program",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_791": {
                "input_tensor": {
                    "value": "eq_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(num_correct_execution, i))",
                            "Call"
                        ]
                    ]
                }
            },
            "GRUCell_255": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_379": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_540": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_555": {
                "x": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(pred_sequence_tokens, label_argmax.dtype), [self.batch_size * max_sequence_len])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_560": {
                "x": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_562": {
                "x": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(pred_sequence_tokens, label_argmax.dtype), [self.batch_size * max_sequence_len])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_385": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_392": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_full.py": {
        "tensorflow": {
            "placeholder_79": {
                "variable": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_id",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.dim_program_token, self.max_program_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.program_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_program_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "self.s_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "s_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_demo_len, self.h, self.w, self.depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "self.test_s_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_s_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_demo_len, self.h, self.w, self.depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "self.a_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a_h",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_action_len, self.action_space]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "self.a_h_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a_h_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_action_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "self.per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "per",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, self.max_demo_len, self.per_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "self.test_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_per",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, self.max_demo_len, self.per_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "program_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.program_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "demo_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_165": {
                "variable": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_demo_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.test_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_175": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_180": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bool(is_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_321": {
                "variable": {
                    "value": "self.gt_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ground_truth_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_331": {
                "variable": {
                    "value": "self.gt_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_498": {
                "variable": {
                    "value": "self.program_lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_525": {
                "variable": {
                    "value": "self.action_lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_559": {
                "variable": {
                    "value": "self.pred_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(self.pred_action_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_561": {
                "variable": {
                    "value": "self.greedy_pred_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(self.greedy_pred_action_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_564": {
                "variable": {
                    "value": "self.per_lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_596": {
                "variable": {
                    "value": "self.pred_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(self.pred_per_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_598": {
                "variable": {
                    "value": "self.greedy_pred_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(self.greedy_pred_per_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "polynomial_decay_64": {
                "variable": {
                    "value": "self.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self.scheduled_sampling_decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "final_teacher_forcing_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "scheduled_sampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "self.init_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_pos",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, len(self.vizdoom_pos_keys), self.vizdoom_max_init_pos_len, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self.init_pos_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_pos_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.k, len(self.vizdoom_pos_keys)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.test_init_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_init_pos",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, len(self.vizdoom_pos_keys), self.vizdoom_max_init_pos_len, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "self.test_init_pos_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_init_pos_len",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.test_k, len(self.vizdoom_pos_keys)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_335": {
                "variable": {
                    "value": "tile1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(feat, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.k, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_336": {
                "variable": {
                    "value": "tile2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(feat, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_889": {
                "variable": {
                    "value": "exact_program_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exact_program_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.py_func(exact_program_compare_karel, [p_token, p_len, is_correct_syntax, gt_token, gt_len], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.py_func(exact_program_compare_vizdoom, [p_token, p_len, is_correct_syntax, gt_token, gt_len], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_895": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "demo",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "execution",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_all_896": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, embedding_dim, is_train, info=not reuse, activation_fn=None, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_all_897": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, embedding_dim, is_train, info=not reuse, activation_fn=None, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_all_898": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, embedding_dim, is_train, info=not reuse, activation_fn=None, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_all_899": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, embedding_dim, is_train, info=not reuse, activation_fn=None, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_901": {
                "variable": {
                    "value": "is_same_len",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "demo_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.demo_len",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "execution_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_or_903": {
                "variable": {
                    "value": "is_correct_execution",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(is_same_execution, is_same_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.tile(tf.expand_dims(tf.cast(is_same_program, tf.bool), axis=1), [1, k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_908": {
                "variable": {
                    "value": "num_correct_execution",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(is_correct_execution)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_915": {
                "variable": {
                    "value": "execution_acc_hist",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hist_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_1154": {
                "name": {
                    "value": "test_loss/greedy_program_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1156": {
                "name": {
                    "value": "test_loss/greedy_program_token_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.token_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1158": {
                "name": {
                    "value": "test_loss/greedy_program_seq_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.seq_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1160": {
                "name": {
                    "value": "test_loss/greedy_program_syntax_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_program_stat.syntax_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1168": {
                "name": {
                    "value": "test_loss/greedy_avg_action_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_avg_action_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "greedy_avg_action_loss / self.k",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1170": {
                "name": {
                    "value": "test_loss/greedy_avg_action_token_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_avg_action_token_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "greedy_avg_action_token_acc / self.k",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1172": {
                "name": {
                    "value": "test_loss/greedy_avg_action_seq_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_avg_action_seq_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "greedy_avg_action_seq_acc / self.k",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1176": {
                "name": {
                    "value": "test_loss/greedy_avg_per_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "greedy_avg_per_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "greedy_avg_per_loss / self.k",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1188": {
                "name": {
                    "value": "program_id/id",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1189": {
                "name": {
                    "value": "program/pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [self.pred_program, self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1195": {
                "name": {
                    "value": "program/ground_truth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [self.ground_truth_program, self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1201": {
                "name": {
                    "value": "test_program_id/id",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.program_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1203": {
                "name": {
                    "value": "test_program/pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [self.pred_program, self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1209": {
                "name": {
                    "value": "test_program/greedy_pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [self.greedy_pred_program, self.greedy_pred_program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "text_1216": {
                "name": {
                    "value": "test_program/ground_truth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.py_func(program2str, [self.ground_truth_program, self.program_len], tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1225": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros_like(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1226": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1227": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(gt, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_1231": {
                "variable": {
                    "value": "tiled_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(program_stat.mask, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.dim_program_token, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1237": {
                "name": {
                    "value": "visualized_program",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.pred_program, dim=1), self.ground_truth_program)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1241": {
                "name": {
                    "value": "test_visualized_program",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.pred_program, dim=1), self.ground_truth_program)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1245": {
                "name": {
                    "value": "test_visualized_greedy_program",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.greedy_pred_program, dim=1), self.ground_truth_program)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1260": {
                "variable": {
                    "value": "tiled_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(action_masks[i], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.action_space, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1266": {
                "name": {
                    "value": "'visualized_action/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.pred_action_list[i], dim=1), self.gt_actions_onehot[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1270": {
                "name": {
                    "value": "'test_visualized_action/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.pred_action_list[i], dim=1), self.gt_actions_onehot[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1274": {
                "name": {
                    "value": "'test_visualized_greedy_action/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "visualized_map(tf.nn.softmax(self.greedy_pred_action_list[i], dim=1), self.gt_actions_onehot[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1279": {
                "name": {
                    "value": "visualized_perception",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.transpose(visualized_map(tf.nn.sigmoid(self.pred_per[:, 0]), self.per[:, 0]), [0, 2, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1284": {
                "name": {
                    "value": "test_visualized_perception",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.transpose(visualized_map(tf.nn.sigmoid(self.pred_per[:, 0]), self.per[:, 0]), [0, 2, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "variable": {
                    "value": "state_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, embedding_dim, is_train, info=not reuse, activation_fn=None, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_238": {
                "variable": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), self.batch_size * max_demo_len, reuse=reuse)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, max_demo_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_254": {
                "variable": {
                    "value": "(new_h, cell_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(State_Encoder(tf.reshape(s_h, [-1, self.h, self.w, depth]), self.batch_size * max_demo_len, reuse=reuse), [self.batch_size, max_demo_len, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_274": {
                "variable": {
                    "value": "(new_h, cell_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(num_units=self.num_lstm_cell_units, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "rnn.BasicRNNCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(num_units=self.num_lstm_cell_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "prev_h",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_288": {
                "variable": {
                    "value": "embedding_map",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_map",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[token_dim + 1, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.01, maxval=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([tile1, tile2], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs * k * k, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_346": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_mean(tf.reshape(_, [bs, k, k, -1]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_380": {
                "values": {
                    "value": "step1_h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_383": {
                "values": {
                    "value": "step1_c_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_399": {
                "values": {
                    "value": "demo_h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_402": {
                "values": {
                    "value": "demo_c_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_463": {
                "variable": {
                    "value": "projection_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "token_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_472": {
                "variable": {
                    "value": "pred_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred_length, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_477": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.rnn_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_478": {
                "variable": {
                    "value": "dynamic_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sz[0], max_sequence_len - sz[1], sz[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rnn_output.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_481": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rnn_output, dynamic_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_486": {
                "variable": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(pred_seq, [self.batch_size, max_sequence_len, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_560": {
                "values": {
                    "value": "self.pred_action_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_562": {
                "values": {
                    "value": "self.greedy_pred_action_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_597": {
                "values": {
                    "value": "self.pred_per_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_599": {
                "values": {
                    "value": "self.greedy_pred_per_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_626": {
                "variable": {
                    "value": "max_sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_628": {
                "variable": {
                    "value": "min_sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sequence_mask_630": {
                "variable": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "gt_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_633": {
                "variable": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "max_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_636": {
                "variable": {
                    "value": "min_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "min_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_sequence_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "min_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_639": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(gt_sequence, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len, token_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_642": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(pred_sequence, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size * max_sequence_len, token_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_855": {
                "variable": {
                    "value": "(execution, execution_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "generate_program_output_karel",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[initial_states, max_demo_len, k, h, w, depth, p_token, p_len, is_correct_syntax, is_same_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "(tf.float32, tf.int32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "py_func_877": {
                "variable": {
                    "value": "exact_program_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "exact_program_compare_karel",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[p_token, p_len, is_correct_syntax, gt_token, gt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_913": {
                "variable": {
                    "value": "eq_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(num_correct_execution, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_1140": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1141": {
                "name": {
                    "value": "'test_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_1190": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self.pred_program, self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1196": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self.ground_truth_program, self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1204": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self.pred_program, self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1210": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self.greedy_pred_program, self.greedy_pred_program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1217": {
                "func": {
                    "value": "program2str",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[self.ground_truth_program, self.program_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_1228": {
                "t": {
                    "value": "tf.concat([pred, gt, dummy], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_1233": {
                "name": {
                    "value": "debug/mask",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.grayscale_to_rgb(tf.expand_dims(tiled_mask, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1250": {
                "name": {
                    "value": "state/initial_state",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.s_h[:, 0, 0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1253": {
                "name": {
                    "value": "state/demo_program_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.s_h[0, 0, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "self.max_demo_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1262": {
                "name": {
                    "value": "'debug/action_decoder/k_{}/mask'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.grayscale_to_rgb(tf.expand_dims(tiled_mask, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1280": {
                "a": {
                    "value": "visualized_map(tf.nn.sigmoid(self.pred_per[:, 0]), self.per[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1285": {
                "a": {
                    "value": "visualized_map(tf.nn.sigmoid(self.pred_per[:, 0]), self.per[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1293": {
                "name": {
                    "value": "'debug/demo_feature_history/k_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.grayscale_to_rgb(tf.expand_dims(demo_feature_history_list[i], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_244": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_265": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_284": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "embedding_lookup_294": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='embedding_map', shape=[token_dim + 1, embedding_dim], initializer=tf.random_uniform_initializer(minval=-0.01, maxval=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unstack_325": {
                "value": {
                    "value": "tf.transpose(self.a_h, [0, 1, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_329": {
                "value": {
                    "value": "self.a_h_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_335": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_336": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_337": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_356": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_394": {
                "c": {
                    "value": "summary_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SummarizeFeature(tf.stack(step1_c_list, axis=1), aggregation='avgpool', scope='summary_c')",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "summary_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SummarizeFeature(tf.stack(step1_h_list, axis=1), aggregation='avgpool', scope='summary_h')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_445": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'State_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Demo_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'SecondPath'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'Token_Decoder'",
                            "MethodArgument"
                        ],
                        [
                            "'Per_Encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'rn_pool'",
                            "MethodArgument"
                        ],
                        [
                            "'SummarizeFeature'",
                            "MethodArgument"
                        ],
                        [
                            "'LSTM_Decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_450": {
                "variable": {
                    "value": "gt_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_token, gt_tokens[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_625": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_648": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(gt_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(pred_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_651": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(gt_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(pred_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_653": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_661": {
                "variable": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(gt_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_662": {
                "variable": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(pred_sequence, [0, 2, 1]), [self.batch_size * max_sequence_len, token_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_666": {
                "variable": {
                    "value": "correct_token_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(label_argmax, logit_argmax)) * tf.reshape(min_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_671": {
                "variable": {
                    "value": "seq_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_679": {
                "variable": {
                    "value": "len_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_sequence_lengths[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_681": {
                "variable": {
                    "value": "is_same_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(tf.reduce_all(seq_equal, axis=-1), len_equal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_690": {
                "variable": {
                    "value": "pred_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, max_sequence_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_692": {
                "variable": {
                    "value": "is_correct_syntax",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "check_correct_syntax",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[pred_tokens, pred_sequence_lengths, is_same_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_862": {
                "variable": {
                    "value": "(execution, execution_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "generate_program_output_vizdoom",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[init_pos, init_pos_len, self.vizdoom_pos_keys, max_demo_len, k, h, w, depth, p_token, p_len, is_correct_syntax, is_same_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "(tf.float32, tf.int32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "py_func_882": {
                "variable": {
                    "value": "exact_program_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "exact_program_compare_vizdoom",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[p_token, p_len, is_correct_syntax, gt_token, gt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_904": {
                "x": {
                    "value": "is_same_execution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "is_same_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(demo_len, execution_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_905": {
                "input": {
                    "value": "tf.expand_dims(tf.cast(is_same_program, tf.bool), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_909": {
                "x": {
                    "value": "is_correct_execution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.logical_and(is_same_execution, is_same_len), tf.tile(tf.expand_dims(tf.cast(is_same_program, tf.bool), axis=1), [1, k]))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1225": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pred, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1228": {
                "values": {
                    "value": "[pred, gt, dummy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1231": {
                "input": {
                    "value": "program_stat.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_1234": {
                "images": {
                    "value": "tf.expand_dims(tiled_mask, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1238": {
                "logits": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1242": {
                "logits": {
                    "value": "self.pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1246": {
                "logits": {
                    "value": "self.greedy_pred_program",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1260": {
                "input": {
                    "value": "action_masks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_1263": {
                "images": {
                    "value": "tf.expand_dims(tiled_mask, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1267": {
                "logits": {
                    "value": "self.pred_action_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1271": {
                "logits": {
                    "value": "self.pred_action_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1275": {
                "logits": {
                    "value": "self.greedy_pred_action_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_1294": {
                "images": {
                    "value": "tf.expand_dims(demo_feature_history_list[i], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BasicRNNCell_248": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicRNNCell_269": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_325": {
                "a": {
                    "value": "self.a_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_340": {
                "values": {
                    "value": "[tile1, tile2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_347": {
                "input_tensor": {
                    "value": "tf.reshape(_, [bs, k, k, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_466": {
                "c": {
                    "value": "visual_c",
                    "type": "variable",
                    "possible_values": []
                },
                "h": {
                    "value": "visual_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_487": {
                "tensor": {
                    "value": "pred_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rnn_output, dynamic_pad], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(pred_seq, [self.batch_size, max_sequence_len, -1]), [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, max_sequence_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_639": {
                "a": {
                    "value": "gt_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_642": {
                "a": {
                    "value": "pred_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_656": {
                "input_tensor": {
                    "value": "cross_entropy * tf.reshape(gt_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_657": {
                "input_tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_906": {
                "input": {
                    "value": "tf.cast(is_same_program, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_913": {
                "x": {
                    "value": "num_correct_execution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.to_float(is_correct_execution), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "range(self.k)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(k + 1)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1022": {
                "input": {
                    "value": "self.action_len[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1024": {
                "input": {
                    "value": "self.action_len[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1048": {
                "input": {
                    "value": "self.action_len[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1067": {
                "input": {
                    "value": "self.action_len[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1069": {
                "input": {
                    "value": "self.action_len[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1087": {
                "input": {
                    "value": "self.action_len[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1235": {
                "input": {
                    "value": "tiled_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(program_stat.mask, axis=1), [1, self.dim_program_token, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(action_masks[i], axis=1), [1, self.action_space, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1264": {
                "input": {
                    "value": "tiled_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(program_stat.mask, axis=1), [1, self.dim_program_token, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(action_masks[i], axis=1), [1, self.action_space, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_1281": {
                "x": {
                    "value": "self.pred_per[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_1286": {
                "x": {
                    "value": "self.pred_per[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_1295": {
                "input": {
                    "value": "demo_feature_history_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "tensor": {
                    "value": "s_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s_h",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.h, self.w, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GRUCell_250": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_271": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.num_lstm_cell_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_290": {
                "minval": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_347": {
                "tensor": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(s, 16, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 32, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv3')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv4')",
                            "Call"
                        ],
                        [
                            "conv2d(_, 48, is_train, k_h=3, k_w=3, info=not reuse, batch_norm=True, name='conv5')",
                            "Call"
                        ],
                        [
                            "fc(f, token_dim, is_train, info=not reuse, batch_norm=False, activation_fn=None, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(t, embedding_dim, is_train, info=not reuse, activation_fn=None, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([tile1, tile2], axis=3), [bs * k * k, -1])",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc1')",
                            "Call"
                        ],
                        [
                            "fc(_, self.num_lstm_cell_units, is_train, batch_norm=True, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.equal(demo, execution)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, k, k, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_669": {
                "input_tensor": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(max_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='max_mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_672": {
                "tensor": {
                    "value": "tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_675": {
                "tensor": {
                    "value": "tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_681": {
                "x": {
                    "value": "tf.reduce_all(seq_equal, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "len_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(gt_sequence_lengths[:, 0], pred_sequence_lengths[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_683": {
                "input_tensor": {
                    "value": "is_same_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.logical_and(tf.reduce_all(seq_equal, axis=-1), len_equal))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_697": {
                "input_tensor": {
                    "value": "is_correct_syntax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(check_correct_syntax, [pred_tokens, pred_sequence_lengths, is_same_seq], tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_906": {
                "x": {
                    "value": "is_same_program",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_914": {
                "input_tensor": {
                    "value": "eq_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(num_correct_execution, i))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_358": {
                "input_tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_448": {
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gt_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_656": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_667": {
                "x": {
                    "value": "tf.equal(label_argmax, logit_argmax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_668": {
                "tensor": {
                    "value": "min_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(min_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='min_mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_all_682": {
                "input_tensor": {
                    "value": "seq_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reshape(tf.to_float(label_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1]), tf.reshape(tf.to_float(logit_argmax) * tf.reshape(gt_mask, [-1]), [self.batch_size, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_667": {
                "x": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_672": {
                "x": {
                    "value": "label_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_673": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_675": {
                "x": {
                    "value": "logit_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_676": {
                "tensor": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(gt_sequence_lengths[:, 0], max_sequence_len, dtype=tf.float32, name='mask')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/ops.py": {
        "tensorflow": {
            "conv2d_30": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "[k_h, k_w]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_info[2]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[2]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[2]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[2]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_transpose_56": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_outputs": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[k, k]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[s, s]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_76": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_92": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_transpose_106": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[k, k, k]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[s, s, s]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size, filter_size, input.get_shape()[3], num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0.0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [p, p], [p, p], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_125": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [p, p], [p, p], [0, 0]], 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(input.get_shape()[2]) * s",
                            "BinOp"
                        ],
                        [
                            "int(input.get_shape()[2]) * s",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('w', filter_shape, dtype, tf.random_normal_initializer(0.0, 0.02))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_137": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual_conv(input, num_filters, 3, 1, reuse, pad, name=name)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out, center=True, scale=True, decay=0.9, is_training=is_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "residual_conv(out, num_filters, 3, 1, reuse, pad, name=name)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out, center=True, scale=True, decay=0.9, is_training=is_train, updates_collections=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_146": {
                "features": {
                    "value": "input + out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_act'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'residual'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'nn_deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv3d'",
                            "MethodArgument"
                        ],
                        [
                            "'res_conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_122": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_59": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_109": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/seq2seq_helper.py": {
        "tensorflow": {
            "cast_119": {
                "variable": {
                    "value": "stop_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.argmax(stop_vector, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_145": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_151": {
                "variable": {
                    "value": "stop_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.argmax(stop_vector, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_158": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "stop_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._helper.sample(time=time, stop_vector=stop_vector, state=cell_state)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(stop_vector, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(stop_vector, axis=-1), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_159": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(stop_id, 1)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_160": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._start_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : outputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "convert_to_tensor_203": {
                "variable": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "start_tokens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_205": {
                "variable": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "end_token",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_token",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_209": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_219": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_226": {
                "variable": {
                    "value": "new_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "init_prev_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[finished]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_266": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[outputs, self._end_token]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_269": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.argmax(masked_outputs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_275": {
                "variable": {
                    "value": "new_sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "add_sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[sample_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_282": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(masked_outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_283": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(stop_id, 1)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_284": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._start_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._embedding_fn(sample_ids)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "py_func_357": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "mask_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[outputs, self._end_token]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_362": {
                "variable": {
                    "value": "sample_id_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "masked_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_outputs / tf.reduce_sum(masked_outputs, axis=1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_371": {
                "variable": {
                    "value": "new_sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "add_sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[sample_ids, masked_probs, masks]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "variable": {
                    "value": "self._output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "stop_predictor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_structure_79": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._rnn_output_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_94": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_120": {
                "input": {
                    "value": "stop_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_layer(cell_outputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_152": {
                "input": {
                    "value": "stop_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_layer(cell_outputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_268": {
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BasicVectorDecoderOutput(cell_outputs, stop_vector, stop_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_270": {
                "input": {
                    "value": "masked_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(outputs) * masks",
                            "BinOp"
                        ],
                        [
                            "tf.exp(outputs) * masks",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_359": {
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BasicVectorDecoderOutput(cell_outputs, stop_vector, stop_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_361": {
                "input_tensor": {
                    "value": "masked_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(outputs) * masks",
                            "BinOp"
                        ],
                        [
                            "tf.exp(outputs) * masks",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorShape_70": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_77": {
                "structure": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_201": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "tensorflow": {
            "get_or_create_global_step_73": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "no_op_95": {
                "variable": {
                    "value": "self.check_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_98": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_111": {
                "variable": {
                    "value": "self.train_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_112": {
                "variable": {
                    "value": "self.test_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_114": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_115": {
                "variable": {
                    "value": "self.pretrain_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_116": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_123": {
                "variable": {
                    "value": "self.supervisor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "saver": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "summary_op": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "summary_writer": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "self.checkpoint_secs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_134": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "exponential_decay_84": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.init_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "decaying_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GPUOptions_136": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "vizdoom_env/input_ops_vizdoom.py": {
        "tensorflow": {
            "string_input_producer_45": {
                "variable": {
                    "value": "input_ops[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tf.convert_to_tensor(data_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "capacity": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_87": {
                "variable": {
                    "value": "(input_ops[id], input_ops[program], input_ops[program_tokens], input_ops[s_h], input_ops[test_s_h], input_ops[a_h], input_ops[a_h_tokens], input_ops[test_a_h], input_ops[test_a_h_tokens], input_ops[program_len], input_ops[demo_len], input_ops[test_demo_len], input_ops[per], input_ops[test_per], input_ops[init_pos], input_ops[init_pos_len], input_ops[test_init_pos], input_ops[test_init_pos_len])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "load_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[input_ops['id']]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.string, tf.float32, tf.int32, tf.float32, tf.float32, tf.float32, tf.int32, tf.float32, tf.int32, tf.float32, tf.float32, tf.float32, tf.float32, tf.float32, tf.int32, tf.int32, tf.int32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "func_hp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shuffle_batch_120": {
                "variable": {
                    "value": "batch_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * batch_size * num_threads",
                            "BinOp"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(int(capacity * 0.75), 1024)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_128": {
                "variable": {
                    "value": "batch_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * batch_size * num_threads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_44": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'inputs'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_46": {
                "value": {
                    "value": "data_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ids",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}