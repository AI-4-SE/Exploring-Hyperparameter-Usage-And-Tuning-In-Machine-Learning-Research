{
    "data/base.py": {
        "torch": {
            "from_numpy_101": {
                "ndarray": {
                    "value": "np.array(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data/cityscapes_loader.py": {
        "torch": {
            "from_numpy_189": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.imread(img_path)",
                            "Call"
                        ],
                        [
                            "np.array(img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.augmentations(img, lbl)",
                            "Call"
                        ],
                        [
                            "self.transform(img, lbl)",
                            "Call"
                        ],
                        [
                            "m.imresize(img, (self.img_size[0], self.img_size[1]))",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img - self.mean",
                            "BinOp"
                        ],
                        [
                            "img.astype(float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.imread(lbl_path)",
                            "Call"
                        ],
                        [
                            "np.array(lbl, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.encode_segmap(lbl)",
                            "Call"
                        ],
                        [
                            "self.augmentations(img, lbl)",
                            "Call"
                        ],
                        [
                            "self.transform(img, lbl)",
                            "Call"
                        ],
                        [
                            "lbl.astype(float)",
                            "Call"
                        ],
                        [
                            "m.imresize(lbl, (self.img_size[0], self.img_size[1]), 'nearest', mode='F')",
                            "Call"
                        ],
                        [
                            "lbl.astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lbl).long()",
                            "Call"
                        ],
                        [
                            "lbl",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/gta5_dataset.py": {
        "torch": {
            "DataLoader_82": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GTA5DataSet('./data', is_transform=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/synthia_dataset.py": {
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GTA5DataSet('./data', is_transform=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluateUDA.py": {
        "torch": {
            "load_209": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader(data_path, img_size=input_size, img_mean=IMG_MEAN, is_transform=True, split='val')",
                            "Call"
                        ],
                        [
                            "data_loader(data_path, list_path='./data/gta5_list/train.txt', img_size=(1280, 720), mean=IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_142": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 1024)",
                            "Tuple"
                        ],
                        [
                            "(1280, 720)",
                            "Tuple"
                        ],
                        [
                            "(512",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader(data_path, img_size=input_size, img_mean=IMG_MEAN, is_transform=True, split='val')",
                            "Call"
                        ],
                        [
                            "data_loader(data_path, list_path='./data/gta5_list/train.txt', img_size=(1280, 720), mean=IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_151": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(720, 1280)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_213": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Res_Deeplab(num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=args.gpu)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_225": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/deeplabv2.py": {
        "torch": {
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "zip(dilation_series, padding_series)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(dilation_series, padding_series)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.conv2d_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_134": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_135": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "zip(dilation_series, padding_series)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(dilation_series, padding_series)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "trainUDA.py": {
        "torch": {
            "load_205": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resume_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_324": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader(data_path, is_transform=True, augmentations=data_aug, img_size=input_size, img_mean=IMG_MEAN)",
                            "Call"
                        ],
                        [
                            "data_loader(data_path, list_path='./data/gta5_list/train.txt', augmentations=data_aug, img_size=(1280, 720), mean=IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['num_workers']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_352": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[0], input_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_74": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "CrossEntropy2d(ignore_label=ignore_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "IMG_MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.mean.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_tensors_148": {
                "variable": {
                    "value": "(IMG_MEAN, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "IMG_MEAN.unsqueeze(1).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_151": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor + IMG_MEAN",
                            "BinOp"
                        ],
                        [
                            "(tensor / 255).float()",
                            "Call"
                        ],
                        [
                            "torch.flip(tensor, (0,))",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_253": {
                "variable": {
                    "value": "saved_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "restore_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'http://vllab1.ucmerced.edu/~whung/adv-semi-seg/resnet101COCO-41f33a49.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "DataLoader_295": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader(data_path, is_transform=True, augmentations=data_aug, img_size=input_size, img_mean=IMG_MEAN)",
                            "Call"
                        ],
                        [
                            "data_loader(data_path, list_path='./data/gta5_list/train.txt', augmentations=data_aug, img_size=(1280, 720), mean=IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['num_workers']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_298": {
                "variable": {
                    "value": "trainloader_remain",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader(data_path, is_transform=True, augmentations=data_aug, img_size=input_size, img_mean=IMG_MEAN)",
                            "Call"
                        ],
                        [
                            "data_loader(data_path, list_path='./data/gta5_list/train.txt', augmentations=data_aug, img_size=(1280, 720), mean=IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['num_workers']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_306": {
                "variable": {
                    "value": "trainloader_remain",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader(data_path, is_transform=True, augmentations=data_aug, img_size=input_size, img_mean=IMG_MEAN)",
                            "Call"
                        ],
                        [
                            "data_loader(data_path, list_path='./data/gta5_list/train.txt', augmentations=data_aug, img_size=(1280, 720), mean=IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_108": {
                "variable": {
                    "value": "ema_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ema_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Res_Deeplab(num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "convert_model(ema_model)",
                            "Call"
                        ],
                        [
                            "DataParallelWithCallback(ema_model, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(ema_model, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "create_ema_model(model)",
                            "Call"
                        ],
                        [
                            "ema_model.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "_resume_checkpoint(args.resume, model, optimizer, ema_model)",
                            "Call"
                        ],
                        [
                            "update_ema_variables(ema_model=ema_model, model=model, alpha_teacher=alpha_teacher, iteration=i_iter)",
                            "Call"
                        ],
                        [
                            "ema_model",
                            "Method Argument"
                        ],
                        [
                            "ema_model",
                            "Method Argument"
                        ],
                        [
                            "ema_model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'iteration': iteration, 'optimizer': optimizer.state_dict(), 'config': config}",
                            "Dict"
                        ],
                        [
                            "torch.load(resume_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'best_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, f'checkpoint-iter{iteration}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_196": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'iteration': iteration, 'optimizer': optimizer.state_dict(), 'config': config}",
                            "Dict"
                        ],
                        [
                            "torch.load(resume_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'best_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, f'checkpoint-iter{iteration}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_233": {
                "variable": {
                    "value": "unlabeled_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MSELoss2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataParallel_275": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['model']",
                            "Subscript"
                        ],
                        [
                            "Res_Deeplab(num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "convert_model(model)",
                            "Call"
                        ],
                        [
                            "DataParallelWithCallback(model, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "_resume_checkpoint(args.resume, model, optimizer, ema_model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_337": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.module.optim_parameters(learning_rate_object)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['momentum']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_340": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.optim_parameters(learning_rate_object)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['momentum']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_421": {
                "variable": {
                    "value": "pseudo_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_u_w.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_422": {
                "variable": {
                    "value": "(max_probs, targets_u_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits_u_w.detach(), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "inputs_u_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_u_s0, inputs_u_s1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "targets_u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_u0, targets_u1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_474": {
                "variable": {
                    "value": "onesWeights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pixelWiseWeight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_479": {
                "variable": {
                    "value": "pixelWiseWeight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pixelWiseWeight0, pixelWiseWeight1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_557": {
                "variable": {
                    "value": "(_, pred_u_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_u_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interp(model(inputs_u_s))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "IMG_MEAN.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_238": {
                "variable": {
                    "value": "unlabeled_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "CrossEntropyLoss2dPixelWiseWeighted(ignore_index=ignore_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_344": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.module.optim_parameters(learning_rate_object)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['momentum']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_347": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.optim_parameters(learning_rate_object)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SummaryWriter_523": {
                "variable": {
                    "value": "tensorboard_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_dir",
                            "variable"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_586": {
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_426": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[image_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_438": {
                "variable": {
                    "value": "MixMask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs_u_w.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_454": {
                "tensors": {
                    "value": "(images[0].unsqueeze(0), images_remain[0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_456": {
                "tensors": {
                    "value": "(images[1].unsqueeze(0), images_remain[1].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_461": {
                "tensors": {
                    "value": "(labels[0].unsqueeze(0), targets_u_w[0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_463": {
                "tensors": {
                    "value": "(labels[1].unsqueeze(0), targets_u_w[1].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_467": {
                "input": {
                    "value": "max_probs.ge(0.968).long() == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_468": {
                "*size": {
                    "value": "max_probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_472": {
                "variable": {
                    "value": "pixelWiseWeight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_476": {
                "tensors": {
                    "value": "(onesWeights[0].unsqueeze(0), pixelWiseWeight[0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_478": {
                "tensors": {
                    "value": "(onesWeights[1].unsqueeze(0), pixelWiseWeight[1].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_482": {
                "input": {
                    "value": "max_probs.ge(0.968).long() == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "torch": {
            "from_numpy_34": {
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "softmax_58": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_31": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict.transpose(1, 2).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "predict[target_mask.view(n, h, w, 1).repeat(1, 1, 1, c)].view(-1, c)",
                            "Call"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_38": {
                "variable": {
                    "value": "self.CE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_42": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * pixelWiseWeight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_48": {
                "variable": {
                    "value": "self.MSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_61": {
                "input": {
                    "value": "torch.max(soft, multihotmask * (soft * multihotmask).sum(1, keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(inp, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_141": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "class_weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_66": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "utils/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/transformmasks.py": {
        "torch": {
            "broadcast_tensors_57": {
                "variable": {
                    "value": "(pred, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "pred.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/transformsgpu.py": {
        "torch": {
            "broadcast_tensors_43": {
                "variable": {
                    "value": "(stackedMask, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "broadcast_tensors_48": {
                "variable": {
                    "value": "(stackedMask, target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(mask[i] * target[i] + (1 - mask[i]) * target[(i + 1) % target.shape[0]]).unsqueeze(0) for i in range(target.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "broadcast_tensors_69": {
                "variable": {
                    "value": "(stackedMask0, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mask[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "broadcast_tensors_72": {
                "variable": {
                    "value": "(stackedMask0, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mask[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flip_35": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(data + img_mean) / 255",
                            "BinOp"
                        ],
                        [
                            "seq(data)",
                            "Call"
                        ],
                        [
                            "(data * 255 - img_mean).float()",
                            "Call"
                        ],
                        [
                            "seq(data)",
                            "Call"
                        ],
                        [
                            "torch.flip(data, (3,))",
                            "Call"
                        ],
                        [
                            "torch.broadcast_tensors(mask, data)",
                            "Call"
                        ],
                        [
                            "(stackedMask * torch.cat((data[::2], data[::2])) + (1 - stackedMask) * torch.cat((data[1::2], data[1::2]))).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([(mask[i] * data[i] + (1 - mask[i]) * data[(i + 1) % data.shape[0]]).unsqueeze(0) for i in range(data.shape[0])])",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.cat([(mask[i] * data[2 * i] + (1 - mask[i]) * data[2 * i + 1]).unsqueeze(0) for i in range(int(data.shape[0] / 2))]), torch.cat([((1 - mask[i]) * data[2 * i] + mask[i] * data[2 * i + 1]).unsqueeze(0) for i in range(int(data.shape[0] / 2))])))",
                            "Call"
                        ],
                        [
                            "(stackedMask0 * data[0] + (1 - stackedMask0) * data[1]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.broadcast_tensors(STD, data)",
                            "Call"
                        ],
                        [
                            "torch.broadcast_tensors(MEAN, data)",
                            "Call"
                        ],
                        [
                            "((data - MEAN) / STD).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_37": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(target, (2,))",
                            "Call"
                        ],
                        [
                            "torch.broadcast_tensors(mask, target)",
                            "Call"
                        ],
                        [
                            "(stackedMask * torch.cat((target[::2], target[::2])) + (1 - stackedMask) * torch.cat((target[1::2], target[1::2]))).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([(mask[i] * target[i] + (1 - mask[i]) * target[(i + 1) % target.shape[0]]).unsqueeze(0) for i in range(target.shape[0])])",
                            "Call"
                        ],
                        [
                            "(stackedMask0 * target[0] + (1 - stackedMask0) * target[1]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(mask[i] * data[i] + (1 - mask[i]) * data[(i + 1) % data.shape[0]]).unsqueeze(0) for i in range(data.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_tensors_83": {
                "variable": {
                    "value": "(STD, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "broadcast_tensors_84": {
                "variable": {
                    "value": "(MEAN, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "broadcast_tensors_13": {
                "variable": {
                    "value": "(img_mean, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "img_mean.unsqueeze(0).unsqueeze(2).unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "kornia.augmentation.ColorJitter(brightness=s, contrast=s, saturation=s, hue=s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "kornia.filters.GaussianBlur2d(kernel_size=kernel_size, sigma=(sigma, sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[(mask[i] * data[2 * i] + (1 - mask[i]) * data[2 * i + 1]).unsqueeze(0) for i in range(int(data.shape[0] / 2))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "(data[1::2], data[1::2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "(target[1::2], target[1::2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[((1 - mask[i]) * data[2 * i] + mask[i] * data[2 * i + 1]).unsqueeze(0) for i in range(int(data.shape[0] / 2))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    }
}