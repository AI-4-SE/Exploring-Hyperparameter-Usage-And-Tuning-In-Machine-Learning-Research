{
    "dataset_tool.py": {
        "tensorflow": {
            "TFRecordOptions_66": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_76": {
                "variable": {
                    "value": "ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_69": {
                "path": {
                    "value": "tfr_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.tfr_prefix + '-r%02d.tfrecords' % (self.resolution_log2 - lod)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_76": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_77": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=quant.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_78": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[quant.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_77": {
                "value": {
                    "value": "quant.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BytesList_78": {
                "value": {
                    "value": "[quant.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/autosummary.py": {
        "tensorflow": {}
    },
    "dnnlib/tflib/custom_ops.py": {
        "tensorflow": {
            "load_op_library_149": {
                "variable": {
                    "value": "plugin",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "bin_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cuda_cache_path, cuda_file_name + '_' + md5.hexdigest() + bin_file_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_include_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/network.py": {
        "tensorflow": {}
    },
    "dnnlib/tflib/ops/fused_bias_act.py": {
        "tensorflow": {
            "convert_to_tensor_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_98": {
                "variable": {
                    "value": "empty_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_70": {
                "value": {
                    "value": "b",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_70": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "tensor": {
                    "value": "b",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1 if i == axis else 1 for i in range(x.shape.rank)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_99": {
                "value": {
                    "value": "b",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_135": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis + 1, x.shape.rank))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_15": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_16": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_17": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_18": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_19": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_20": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_21": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_22": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dnnlib/tflib/ops/upfirdn_2d.py": {
        "tensorflow": {
            "convert_to_tensor_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH, 1, inW, 1, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_80": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH * upy, inW * upx, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_90": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1, np.newaxis, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_118": {
                "variable": {
                    "value": "kc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.outer(k, k)",
                            "Call"
                        ],
                        [
                            "k / np.sum(k)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_119": {
                "variable": {
                    "value": "gkc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_256": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_281": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, inC, num_groups, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_282": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 4, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, -1, num_groups * inC]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_286": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[_shape(x, 0), outC, (_shape(x, 2) - 1) * factor + convH, (_shape(x, 3) - 1) * factor + convW]",
                            "List"
                        ],
                        [
                            "[_shape(x, 0), (_shape(x, 1) - 1) * factor + convH, (_shape(x, 2) - 1) * factor + convW, outC]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_315": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_327": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_353": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(y, 2), _shape(y, 3), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_356": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_337": {
                "input": {
                    "value": "tf_expr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/optimizer.py": {
        "tensorflow": {
            "convert_to_tensor_46": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_graph_48": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "self.id + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_84": {
                "device_name": {
                    "value": "dev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "group_174": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainingOp",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_188": {
                "variable": {
                    "value": "self._dev_ls_var[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(self.loss_scaling_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaling_var",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_91": {
                "x": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_187": {
                "control_inputs": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_111": {
                "name": {
                    "value": "'ProcessGrads%d' % dev_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_111": {
                "device_name": {
                    "value": "dev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_124": {
                "name": {
                    "value": "SumAcrossGPUs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_124": {
                "device_name": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_136": {
                "name": {
                    "value": "'ApplyGrads%d' % dev_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_136": {
                "device_name": {
                    "value": "dev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_all_146": {
                "input_tensor": {
                    "value": "tf.is_finite(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_93": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_140": {
                "variable": {
                    "value": "coef",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.float32(1.0 / total_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "coef",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "CheckOverflow",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_149": {
                "name": {
                    "value": "UpdateWeights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_116": {
                "x": {
                    "value": "g",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_117": {
                "inputs": {
                    "value": "g",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_139": {
                "name": {
                    "value": "Scale",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_146": {
                "values": {
                    "value": "[tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_163": {
                "name": {
                    "value": "Statistics",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_155": {
                "pred": {
                    "value": "grad_ok",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : opt.apply_gradients(grads)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_157": {
                "pred": {
                    "value": "grad_ok",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.group(tf.assign_add(ls_var, self.loss_scaling_inc), opt.apply_gradients(grads))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(tf.assign_sub(ls_var, self.loss_scaling_dec))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "where_165": {
                "condition": {
                    "value": "grad_ok",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_finite_146": {
                "x": {
                    "value": "g",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_158": {
                "*inputs": {
                    "value": "tf.assign_add(ls_var, self.loss_scaling_inc)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "opt.apply_gradients(grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_159": {
                "*inputs": {
                    "value": "tf.assign_sub(ls_var, self.loss_scaling_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_158": {
                "ref": {
                    "value": "ls_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_loss_scaling_var(dev)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.loss_scaling_inc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_159": {
                "ref": {
                    "value": "ls_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_loss_scaling_var(dev)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.loss_scaling_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/tfutil.py": {
        "tensorflow": {}
    },
    "metrics/frechet_inception_distance.py": {
        "tensorflow": {
            "device_46": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/inception_score.py": {
        "tensorflow": {
            "device_28": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/metric_base.py": {
        "tensorflow": {
            "Graph_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/perceptual_path_length.py": {
        "tensorflow": {
            "reduce_sum_21": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_15": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(v), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_22": {
                "x": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(a * b, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "a * tf.math.cos(p) + c * tf.math.sin(p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_15": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_24": {
                "x": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t * tf.math.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_24": {
                "x": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t * tf.math.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_15": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tmp_b_e0 * tmp_b_e1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tmp_b_e0 * tmp_b_e0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "dlat_b_e1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dlat_b_e1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tmp_b_e0 + self.epsilon * tmp_b_e1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(dlat_b_e1, [self.minibatch_per_gpu, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.tile(dlat_b_e1, [1, sh[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.minibatch_per_gpu, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_83": {
                "variable": {
                    "value": "dlat_b_e1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dlat_b_e1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tmp_b_e0 + self.epsilon * tmp_b_e1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(dlat_b_e1, [self.minibatch_per_gpu, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.tile(dlat_b_e1, [1, sh[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, sh[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "dlat_b_e02",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([dlat_b_e0, dlat_b_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dlat_b_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "dlat_c_e02",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([dlat_c_e0, dlat_c_e0], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dlat_c_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "dlat_b_e03",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([dlat_b_e0, dlat_b_e0], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dlat_b_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "dlat_c_e03",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([dlat_c_e0, dlat_c_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dlat_c_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "dlat_b_e04",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([dlat_b_e0, dlat_b_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dlat_b_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "dlat_c_e04",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([dlat_c_e0, dlat_c_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dlat_c_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "lat_b_e02",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([lat_b_e0, lat_b_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "lat_b_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "lat_c_e02",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([lat_c_e0, lat_c_e0], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "lat_c_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "lat_b_e03",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([lat_b_e0, lat_b_e0], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "lat_b_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "lat_c_e03",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([lat_c_e0, lat_c_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "lat_c_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "lat_b_e04",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([lat_b_e0, lat_b_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "lat_b_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "lat_c_e04",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([lat_c_e0, lat_c_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "lat_c_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "images_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images_2",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_b_e02, dlat_c_e02, is_validation=True, randomize_noise=False)[-1]",
                            "Subscript"
                        ],
                        [
                            "images_2[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images_2, [-1, images_2.shape[1], images_2.shape[2] // factor, factor, images_2.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images_2, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images_2 + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, images_2.shape[1], images_2.shape[2] // factor, factor, images_2.shape[3] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "images_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images_2",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_b_e02, dlat_c_e02, is_validation=True, randomize_noise=False)[-1]",
                            "Subscript"
                        ],
                        [
                            "images_2[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images_2, [-1, images_2.shape[1], images_2.shape[2] // factor, factor, images_2.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images_2, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images_2 + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "images_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images_3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_b_e03, dlat_c_e03, is_validation=True, randomize_noise=False)[-1]",
                            "Subscript"
                        ],
                        [
                            "images_3[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images_3, [-1, images_3.shape[1], images_3.shape[2] // factor, factor, images_3.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images_3, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images_3 + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, images_3.shape[1], images_3.shape[2] // factor, factor, images_3.shape[3] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "images_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images_3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_b_e03, dlat_c_e03, is_validation=True, randomize_noise=False)[-1]",
                            "Subscript"
                        ],
                        [
                            "images_3[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images_3, [-1, images_3.shape[1], images_3.shape[2] // factor, factor, images_3.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images_3, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images_3 + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "images_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images_4",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_b_e04, dlat_c_e04, is_validation=True, randomize_noise=False)[-1]",
                            "Subscript"
                        ],
                        [
                            "images_4[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images_4, [-1, images_4.shape[1], images_4.shape[2] // factor, factor, images_4.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images_4, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images_4 + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, images_4.shape[1], images_4.shape[2] // factor, factor, images_4.shape[3] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_160": {
                "variable": {
                    "value": "images_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images_4",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_b_e04, dlat_c_e04, is_validation=True, randomize_noise=False)[-1]",
                            "Subscript"
                        ],
                        [
                            "images_4[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images_4, [-1, images_4.shape[1], images_4.shape[2] // factor, factor, images_4.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images_4, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images_4 + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_129": {
                "control_inputs": {
                    "value": "[var.initializer for var in noise_vars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sqrt_78": {
                "x": {
                    "value": "tf.reduce_sum(tmp_b_e1 * tmp_b_e1, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_89": {
                "values": {
                    "value": "[dlat_b_e0, dlat_b_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_90": {
                "values": {
                    "value": "[dlat_c_e0, dlat_c_e0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_93": {
                "values": {
                    "value": "[dlat_b_e0, dlat_b_e0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_94": {
                "values": {
                    "value": "[dlat_c_e0, dlat_c_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_96": {
                "values": {
                    "value": "[dlat_b_e0, dlat_b_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_97": {
                "values": {
                    "value": "[dlat_c_e0, dlat_c_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_111": {
                "values": {
                    "value": "[lat_b_e0, lat_b_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_112": {
                "values": {
                    "value": "[lat_c_e0, lat_c_e0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_117": {
                "values": {
                    "value": "[lat_b_e0, lat_b_e0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_118": {
                "values": {
                    "value": "[lat_c_e0, lat_c_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_123": {
                "values": {
                    "value": "[lat_b_e0, lat_b_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_124": {
                "values": {
                    "value": "[lat_c_e0, lat_c_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "input_tensor": {
                    "value": "tmp_b_e1 * tmp_b_e1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "training/dataset.py": {
        "tensorflow": {
            "parse_single_example_15": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.python_io.tf_record_iterator(tfr_file, tfr_opt)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "{'shape': tf.FixedLenFeature([3], tf.int64), 'data': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_18": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_22": {
                "variable": {
                    "value": "ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_19": {
                "tensor": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "ex.features.feature['data'].bytes_list.value[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "features['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TFRecordOptions_69": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "self._tf_minibatch_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_in",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "shape": {
                    "value": "[minibatch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.label_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tf_record_iterator_70": {
                "path": {
                    "value": "tfr_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfr_files",
                            "Name"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "Dataset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_109": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordDataset_116": {
                "variable": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfr_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfr_files",
                            "Name"
                        ]
                    ]
                },
                "compression_type": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "buffer_mb << 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_16": {
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_17": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_159": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_160": {
                "params": {
                    "value": "self._tf_labels_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.random_uniform([minibatch_size], 0, self._np_labels.shape[0], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "training/loss.py": {
        "tensorflow": {
            "softplus_36": {
                "features": {
                    "value": "-fake_scores_out[m]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_38": {
                "name": {
                    "value": "orthogonal_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_66": {
                "features": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fake_score",
                            "Name"
                        ],
                        [
                            "real_score",
                            "Name"
                        ]
                    ]
                }
            },
            "softplus_68": {
                "features": {
                    "value": "-score",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_14": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_20": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_74": {
                "name": {
                    "value": "R1Penalty",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(weight, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G.trainables[item]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_79": {
                "input_tensor": {
                    "value": "tf.square(real_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "tf.square(real_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "input_tensor": {
                    "value": "tf.abs(weight_mat - tf.eye(tf.shape(weight_mat)[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "real_score[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_79": {
                "x": {
                    "value": "real_grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(real_loss, [reals[num - 3]])[0]))",
                            "Call"
                        ],
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(real_loss, [reals[num - 3]])[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_81": {
                "input_tensor": {
                    "value": "real_score[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "real_grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(real_loss, [reals[num - 3]])[0]))",
                            "Call"
                        ],
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(real_loss, [reals[num - 3]])[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_44": {
                "a": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G.trainables[item]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_45": {
                "x": {
                    "value": "weight_mat - tf.eye(tf.shape(weight_mat)[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_78": {
                "ys": {
                    "value": "real_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(real_score[0]))",
                            "Call"
                        ],
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(real_score[1]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[reals[num - 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_82": {
                "ys": {
                    "value": "real_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(real_score[0]))",
                            "Call"
                        ],
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(real_score[1]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[reals[num - 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_45": {
                "num_rows": {
                    "value": "tf.shape(weight_mat)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "weight_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(weight, [1, 0]), weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "training/networks_stylegan.py": {
        "tensorflow": {}
    },
    "training/training_loop.py": {
        "tensorflow": {
            "FileWriter_208": {
                "variable": {
                    "value": "summary_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "submit_config.run_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "lrate_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lrate_in",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "minibatch_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_in",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "ProcessReals",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_35": {
                "variable": {
                    "value": "down_sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_136": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_149": {
                "name": {
                    "value": "Inputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_149": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_174": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "DynamicRange",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "x[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "x[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_31": {
                "name": {
                    "value": "UpscaleLOD",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_48": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reals[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_159": {
                "name": {
                    "value": "'GPU%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_159": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_178": {
                "variable": {
                    "value": "peak_gpu_mem_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_graph_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_37": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "MirrorAugment",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_52": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reals[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_53": {
                "variable": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.uniform(0.0, 1.0, [s.shape[0].value, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, s[1], s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_54": {
                "variable": {
                    "value": "reals[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "_mask < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "reals[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reverse(reals[m], axis=[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_153": {
                "x": {
                    "value": "tf.cast(minibatch_in, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "G_smoothing_kimg * 1000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_164": {
                "name": {
                    "value": "G_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_166": {
                "name": {
                    "value": "D_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "input_tensor": {
                    "value": "D_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dnnlib.util.call_func_by_name(G=G_gpu, D=D_gpu, opt=D_opt, training_set=training_set, minibatch_size=minibatch_split, reals=reals, labels=labels, **D_loss_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_153": {
                "x": {
                    "value": "minibatch_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, name='minibatch_in', shape=[])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "input_tensor": {
                    "value": "G_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_41": {
                "input": {
                    "value": "down_sampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x[0])",
                            "Call"
                        ],
                        [
                            "(down_sampled[:, :, 0::2, 0::2] + down_sampled[:, :, 0::2, 1::2] + down_sampled[:, :, 1::2, 0::2] + down_sampled[:, :, 1::2, 1::2]) * 0.25",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_44": {
                "input": {
                    "value": "down_sampled - x[lod - dif]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reverse_54": {
                "tensor": {
                    "value": "reals[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}