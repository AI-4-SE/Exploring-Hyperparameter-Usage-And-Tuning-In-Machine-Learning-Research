{
    "ae.py": {
        "sklearn": {
            "SimpleImputer_223": {
                "variable": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": []
                },
                "missing_values": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strategy": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GaussianMixture_227": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_230": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.log(gmm.weights_.reshape((-1, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_231": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "gmm.means_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_232": {
                "variable": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "gmm.covariances_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_233": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=(1,), mean=1.0, stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_nan_243": {
                "variable": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prep_x(X)",
                            "Call"
                        ],
                        [
                            "tf.where(where_isnan, tf.zeros_like(y_true), y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_244": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(y_true)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(y_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_op",
                            "variable"
                        ],
                        [
                            "tf.where(where_isnan, tf.zeros_like(y_pred), y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_245": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(y_true)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prep_x(X)",
                            "Call"
                        ],
                        [
                            "tf.where(where_isnan, tf.zeros_like(y_true), y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_248": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(y_true - y_pred, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_249": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "global_variables_initializer_252": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_14": {
                "seed": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "not_equal_77": {
                "variable": {
                    "value": "non_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_78": {
                "variable": {
                    "value": "new_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "non_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(sigma, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.fill(tf.shape(sigma), 1e-20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_79": {
                "variable": {
                    "value": "sqrt_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(non_zero, sigma, tf.fill(tf.shape(sigma), 1e-20))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_81": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sqrt_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(new_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_85": {
                "variable": {
                    "value": "nr_values",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "non_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(sigma, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "nr_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sqrt_sigma * (tf.div(tf.exp(tf.div(-tf.square(w), 2.0)), np.sqrt(2 * np.pi)) + tf.multiply(tf.div(w, 2.0), 1 + tf.erf(tf.div(w, np.sqrt(2)))))",
                            "BinOp"
                        ],
                        [
                            "tf.where(non_zero, nr_values, (mu + tf.abs(mu)) / 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "(mu + tf.abs(mu)) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_90": {
                "variable": {
                    "value": "gamma_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=tf.random_normal(shape=(1,), mean=1.0, stddev=1.0), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_92": {
                "variable": {
                    "value": "covs_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=gmm.covariances_, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=np.log(gmm.weights_.reshape((-1, 1))), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_nan_95": {
                "variable": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(check_isnan, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_98": {
                "variable": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(check_isnan > 0), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(x, weights['encoder_h1']), biases['encoder_b1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_105": {
                "variable": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_finite_106": {
                "variable": {
                    "value": "where_isfinite",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_107": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_109": {
                "variable": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights['encoder_h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorArray_112": {
                "variable": {
                    "value": "distributions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "n_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "TensorArray_113": {
                "variable": {
                    "value": "q_collector",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "n_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "constant_145": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_146": {
                "variable": {
                    "value": "(_, final_distributions, final_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, c1, c2: i < n_distribution",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "calculate_component",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(i, distributions, q_collector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_153": {
                "variable": {
                    "value": "log_q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_q.stack()",
                            "Call"
                        ],
                        [
                            "tf.add(log_q, tf.log(p_))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(p_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_q.stack()",
                            "Call"
                        ],
                        [
                            "tf.add(log_q, tf.log(p_))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_156": {
                "variable": {
                    "value": "layer_1_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distrib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_distributions.stack()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "r[:, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "variable": {
                    "value": "layer_1_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "layer_1_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(distrib, r[:, :, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(layer_1_miss, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_160": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(layer_1, layer_1_miss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_1, weights['encoder_h2']), biases['encoder_b2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_2, weights['encoder_h3']), biases['encoder_b3'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(x, weights['decoder_h1']), biases['decoder_b1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_1, weights['decoder_h2']), biases['decoder_b2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_178": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_2, weights['decoder_h3']), biases['decoder_b3'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_183": {
                "variable": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_184": {
                "variable": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(check_isnan, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_186": {
                "variable": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(check_isnan > 0), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_257": {
                "variable": {
                    "value": "trn_summary[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.pow(y_true - y_pred, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_258": {
                "variable": {
                    "value": "trn_summary[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.softmax(p, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_262": {
                "variable": {
                    "value": "trn_summary[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.abs(gamma)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "image_264": {
                "variable": {
                    "value": "trn_imgs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(prep_x(X), np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(decoder_op, np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(prep_x(X), np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(decoder_op, np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_266": {
                "variable": {
                    "value": "trn_imgs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(prep_x(X), np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(decoder_op, np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(prep_x(X), np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(decoder_op, np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_270": {
                "variable": {
                    "value": "tst_summary[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.pow(y_true - y_pred, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_272": {
                "variable": {
                    "value": "tst_summary[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(prep_x(X), np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(decoder_op, np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(prep_x(X), np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(decoder_op, np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_274": {
                "variable": {
                    "value": "tst_summary[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(prep_x(X), np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(decoder_op, np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(prep_x(X), np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.gan.eval.image_grid(tf.gather(decoder_op, np.arange(25)), (5, 5), (28, 28), 1)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_280": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'./log/{}'.format(current_date)",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "initial_value": {
                    "value": "initializer([num_input, num_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "initial_value": {
                    "value": "initializer([num_hidden_1, num_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "initial_value": {
                    "value": "initializer([num_hidden_2, num_hidden_3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "initial_value": {
                    "value": "initializer([num_hidden_3, num_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "initial_value": {
                    "value": "initializer([num_hidden_2, num_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "initial_value": {
                    "value": "initializer([num_hidden_1, num_input])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "initial_value": {
                    "value": "tf.random_normal([num_input])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_117": {
                "variable": {
                    "value": "data_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(y_true)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.reshape(tf.tile(means[i, :], [size[0]]), [-1, size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_118": {
                "variable": {
                    "value": "miss_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(y_true)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.reshape(tf.tile(covs_[i, :], [size[0]]), [-1, size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros([size[0], size[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_121": {
                "variable": {
                    "value": "layer_1_m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(data_miss, weights['encoder_h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['encoder_b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "subtract_124": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isnan, tf.reshape(tf.tile(means[i, :], [size[0]]), [-1, size[1]]), x_miss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "means[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_125": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_126": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isfinite",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(x_miss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_129": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_132": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_135": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_137": {
                "x": {
                    "value": "where_isfinite",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_138": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_140": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_188": {
                "values": {
                    "value": "(x, x_miss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_244": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_op",
                            "variable"
                        ],
                        [
                            "tf.where(where_isnan, tf.zeros_like(y_pred), y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_245": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prep_x(X)",
                            "Call"
                        ],
                        [
                            "tf.where(where_isnan, tf.zeros_like(y_true), y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_248": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_256": {
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_269": {
                "name": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fill_78": {
                "dims": {
                    "value": "tf.shape(sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "tf.where(check_isnan > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "tf.where(tf.equal(check_isnan, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_102": {
                "x": {
                    "value": "tf.matmul(x, weights['encoder_h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['encoder_b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_153": {
                "x": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(p, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_169": {
                "x": {
                    "value": "tf.matmul(layer_1, weights['encoder_h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['encoder_b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_170": {
                "x": {
                    "value": "tf.matmul(layer_2, weights['encoder_h3'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['encoder_b3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_176": {
                "x": {
                    "value": "tf.matmul(x, weights['decoder_h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['decoder_b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_177": {
                "x": {
                    "value": "tf.matmul(layer_1, weights['decoder_h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['decoder_b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_178": {
                "x": {
                    "value": "tf.matmul(layer_2, weights['decoder_h3'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['decoder_b3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_184": {
                "x": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_186": {
                "tensor": {
                    "value": "tf.where(check_isnan > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "tensor": {
                    "value": "tf.where(tf.equal(check_isnan, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_258": {
                "logits": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=np.log(gmm.weights_.reshape((-1, 1))), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_263": {
                "params": {
                    "value": "prep_x(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.arange(25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_265": {
                "params": {
                    "value": "decoder_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(encoder_op)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "np.arange(25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_271": {
                "params": {
                    "value": "prep_x(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.arange(25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_273": {
                "params": {
                    "value": "decoder_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(encoder_op)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "np.arange(25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_78": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_82": {
                "x": {
                    "value": "-tf.square(w)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_83": {
                "x": {
                    "value": "tf.div(w, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1 + tf.erf(tf.div(w, np.sqrt(2)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_98": {
                "condition": {
                    "value": "check_isnan > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_99": {
                "condition": {
                    "value": "tf.equal(check_isnan, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_102": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['encoder_h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "tf.tile(means[i, :], [size[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "tensor": {
                    "value": "tf.tile(covs_[i, :], [size[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "shape": {
                    "value": "[size[0], size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "data_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isnan, tf.reshape(tf.tile(means[i, :], [size[0]]), [-1, size[1]]), x_miss)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['encoder_h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "a": {
                    "value": "miss_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isnan, tf.reshape(tf.tile(covs_[i, :], [size[0]]), [-1, size[1]]), tf.zeros([size[0], size[1]]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(weights['encoder_h1'])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_127": {
                "tensor": {
                    "value": "tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_128": {
                "input": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_137": {
                "input_tensor": {
                    "value": "tf.cast(where_isfinite, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_138": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.add(tf.matmul(x, weights['encoder_h1']), biases['encoder_b1']))",
                            "Call"
                        ],
                        [
                            "tf.concat((layer_1, layer_1_miss), axis=0)",
                            "Call"
                        ],
                        [
                            "conv_first(x, means, covs, p, gamma)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(x, weights['decoder_h1']), biases['decoder_b1']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['encoder_h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "a": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['encoder_h2']), biases['encoder_b2']))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['decoder_h2']), biases['decoder_b2']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['encoder_h3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['decoder_h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.add(tf.matmul(x, weights['encoder_h1']), biases['encoder_b1']))",
                            "Call"
                        ],
                        [
                            "tf.concat((layer_1, layer_1_miss), axis=0)",
                            "Call"
                        ],
                        [
                            "conv_first(x, means, covs, p, gamma)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(x, weights['decoder_h1']), biases['decoder_b1']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['decoder_h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['encoder_h2']), biases['encoder_b2']))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['decoder_h2']), biases['decoder_b2']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['decoder_h3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_186": {
                "condition": {
                    "value": "check_isnan > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_187": {
                "condition": {
                    "value": "tf.equal(check_isnan, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_260": {
                "name": {
                    "value": "'mean/{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "means[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_261": {
                "name": {
                    "value": "'cov/{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.abs(covs[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_262": {
                "x": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=tf.random_normal(shape=(1,), mean=1.0, stddev=1.0), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_82": {
                "x": {
                    "value": "tf.div(-tf.square(w), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_83": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(mu, sqrt_sigma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.sqrt(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_85": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_99": {
                "x": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_117": {
                "input": {
                    "value": "means[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_118": {
                "input": {
                    "value": "covs_[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_127": {
                "input": {
                    "value": "tf.add(gamma_, covs_[i, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_187": {
                "x": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_261": {
                "x": {
                    "value": "covs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "erf_83": {
                "x": {
                    "value": "tf.div(w, np.sqrt(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_127": {
                "x": {
                    "value": "gamma_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(gamma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "covs_[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_82": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(mu, sqrt_sigma)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mlp.py": {
        "sklearn": {
            "LabelBinarizer_162": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SimpleImputer_177": {
                "variable": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": []
                },
                "missing_values": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strategy": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GaussianMixture_180": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.n_distribution",
                            "Attribute"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "StratifiedKFold_193": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StratifiedKFold_198": {
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_18": {
                "seed": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "not_equal_37": {
                "variable": {
                    "value": "non_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_38": {
                "variable": {
                    "value": "new_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "non_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(sigma, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.fill(tf.shape(sigma), 1e-20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_39": {
                "variable": {
                    "value": "sqrt_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(non_zero, sigma, tf.fill(tf.shape(sigma), 1e-20))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_41": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sqrt_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(new_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_45": {
                "variable": {
                    "value": "nr_values",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "non_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(sigma, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "nr_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sqrt_sigma * (tf.div(tf.exp(tf.div(-tf.square(w), 2.0)), np.sqrt(2 * np.pi)) + tf.multiply(tf.div(w, 2.0), 1 + tf.erf(tf.div(w, np.sqrt(2)))))",
                            "BinOp"
                        ],
                        [
                            "tf.where(non_zero, nr_values, (mu + tf.abs(mu)) / 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "(mu + tf.abs(mu)) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_51": {
                "variable": {
                    "value": "gamma_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=tf.random_normal(shape=(1,), mean=2, stddev=1.0), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_53": {
                "variable": {
                    "value": "covs_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=gmm_covariances, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=gmm_weights, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_nan_56": {
                "variable": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_57": {
                "variable": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(check_isnan, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_59": {
                "variable": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(check_isnan > 0), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(x, weights['h1']), biases['b1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_66": {
                "variable": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_finite_67": {
                "variable": {
                    "value": "where_isfinite",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_68": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_70": {
                "variable": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorArray_73": {
                "variable": {
                    "value": "distributions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "n_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.n_distribution",
                            "Attribute"
                        ]
                    ]
                }
            },
            "TensorArray_74": {
                "variable": {
                    "value": "q_collector",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "n_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.n_distribution",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_106": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_107": {
                "variable": {
                    "value": "(_, final_distributions, final_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, c1, c2: i < n_distribution",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "calculate_component",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(i, distributions, q_collector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_114": {
                "variable": {
                    "value": "log_q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_q.stack()",
                            "Call"
                        ],
                        [
                            "tf.add(log_q, tf.log(p_))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(p_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_q.stack()",
                            "Call"
                        ],
                        [
                            "tf.add(log_q, tf.log(p_))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_117": {
                "variable": {
                    "value": "layer_1_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distrib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_distributions.stack()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "r[:, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "layer_1_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "layer_1_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(distrib, r[:, :, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(layer_1_miss, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(layer_1, layer_1_miss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_124": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_2, weights['h3']), biases['b3'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_126": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_3, weights['h4']), biases['b4'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_131": {
                "variable": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_132": {
                "variable": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(check_isnan, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_134": {
                "variable": {
                    "value": "y_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(y, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=[None, n_class], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(check_isnan > 0), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_135": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(y, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=[None, n_class], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_78": {
                "variable": {
                    "value": "data_miss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.reshape(tf.tile(means[i, :], [size[0]]), [-1, size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_79": {
                "variable": {
                    "value": "miss_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.reshape(tf.tile(covs_[i, :], [size[0]]), [-1, size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros([size[0], size[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_82": {
                "variable": {
                    "value": "layer_1_m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(data_miss, weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "subtract_85": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isnan, tf.reshape(tf.tile(means[i, :], [size[0]]), [-1, size[1]]), x_miss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "means[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_86": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_87": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isfinite",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(x_miss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_90": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_93": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_96": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_98": {
                "x": {
                    "value": "where_isfinite",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(x_miss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_99": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_101": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]]), [-1, size[1]]), tf.ones_like(x_miss))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "-0.5 * q",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(data_miss, means[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_127": {
                "x": {
                    "value": "tf.matmul(layer_4, weights['h5'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b5']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_136": {
                "values": {
                    "value": "(y, y_miss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_38": {
                "dims": {
                    "value": "tf.shape(sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_57": {
                "x": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "tf.where(check_isnan > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "tensor": {
                    "value": "tf.where(tf.equal(check_isnan, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_63": {
                "x": {
                    "value": "tf.matmul(x, weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_114": {
                "x": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(p, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_124": {
                "x": {
                    "value": "tf.matmul(layer_1, weights['h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_125": {
                "x": {
                    "value": "tf.matmul(layer_2, weights['h3'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_126": {
                "x": {
                    "value": "tf.matmul(layer_3, weights['h4'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b4']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "a": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_3, weights['h4']), biases['b4']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h5']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_132": {
                "x": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "tensor": {
                    "value": "tf.where(check_isnan > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "tensor": {
                    "value": "tf.where(tf.equal(check_isnan, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_232": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_233": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_class]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_235": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "gmm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(gmm.weights_.reshape((-1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_236": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "gmm_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmm.means_",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_237": {
                "variable": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "gmm_covariances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmm.covariances_",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_239": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=(1,), mean=2, stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=predict, labels=y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_251": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "l_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "variable"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_254": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_38": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_42": {
                "x": {
                    "value": "-tf.square(w)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_43": {
                "x": {
                    "value": "tf.div(w, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1 + tf.erf(tf.div(w, np.sqrt(2)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_59": {
                "condition": {
                    "value": "check_isnan > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_60": {
                "condition": {
                    "value": "tf.equal(check_isnan, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(tf.equal(check_isnan, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "tensor": {
                    "value": "tf.tile(means[i, :], [size[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "tf.tile(covs_[i, :], [size[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "shape": {
                    "value": "[size[0], size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "a": {
                    "value": "data_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isnan, tf.reshape(tf.tile(means[i, :], [size[0]]), [-1, size[1]]), x_miss)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "a": {
                    "value": "miss_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isnan, tf.reshape(tf.tile(covs_[i, :], [size[0]]), [-1, size[1]]), tf.zeros([size[0], size[1]]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(weights['h1'])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "tf.tile(tf.add(gamma_, covs_[i, :]), [size[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_89": {
                "input": {
                    "value": "x_miss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, tf.reshape(tf.where(check_isnan > 0), [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "tf.cast(where_isfinite, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_99": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.add(tf.matmul(x, weights['h1']), biases['b1']))",
                            "Call"
                        ],
                        [
                            "tf.concat((layer_1, layer_1_miss), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "a": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "a": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_2, weights['h3']), biases['b3']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h4']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_134": {
                "condition": {
                    "value": "check_isnan > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_135": {
                "condition": {
                    "value": "tf.equal(check_isnan, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_348": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predict, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_349": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_42": {
                "x": {
                    "value": "tf.div(-tf.square(w), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_43": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(mu, sqrt_sigma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.sqrt(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_45": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_60": {
                "x": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_78": {
                "input": {
                    "value": "means[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_79": {
                "input": {
                    "value": "covs_[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_88": {
                "input": {
                    "value": "tf.add(gamma_, covs_[i, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_135": {
                "x": {
                    "value": "check_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ],
                        [
                            "tf.is_nan(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(check_isnan, tf.int32), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_217": {
                "initial_value": {
                    "value": "initializer([n_features, num_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_218": {
                "initial_value": {
                    "value": "initializer([num_hidden_1, num_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_219": {
                "initial_value": {
                    "value": "initializer([num_hidden_2, num_hidden_3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_220": {
                "initial_value": {
                    "value": "initializer([num_hidden_3, num_hidden_4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_221": {
                "initial_value": {
                    "value": "initializer([num_hidden_4, num_hidden_5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_224": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_226": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_227": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_228": {
                "initial_value": {
                    "value": "tf.random_normal([num_hidden_5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_247": {
                "logits": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multilayer_perceptron(z, means, covs, p, gamma, n_distribution, weights, biases)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prep_labels(z, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_265": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "erf_43": {
                "x": {
                    "value": "tf.div(w, np.sqrt(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_88": {
                "x": {
                    "value": "gamma_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(gamma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "covs_[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_293": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "l_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "variable"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_333": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "l_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "variable"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_348": {
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multilayer_perceptron(z, means, covs, p, gamma, n_distribution, weights, biases)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_349": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y, 1), tf.argmax(predict, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_42": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(mu, sqrt_sigma)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rbfn.py": {
        "sklearn": {
            "SimpleImputer_142": {
                "variable": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": []
                },
                "missing_values": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strategy": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GaussianMixture_145": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.n_distribution",
                            "Attribute"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "StratifiedKFold_158": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StratifiedKFold_165": {
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_16": {
                "seed": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "abs_40": {
                "variable": {
                    "value": "gamma_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=tf.random_normal(shape=(1,), mean=1.0, stddev=1.0), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(val_gamma)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_41": {
                "variable": {
                    "value": "s_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=tf.random_normal(shape=(n_hidden_1, n_features), mean=0.0, stddev=1.0), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(val_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "weights_",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=gmm_weights, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(val_weights)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_43": {
                "variable": {
                    "value": "covs_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=gmm_covariances, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(val_covs)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_45": {
                "variable": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_data(os.path.join(path_dir, '_data.txt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_finite_46": {
                "variable": {
                    "value": "where_isfinite",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_data(os.path.join(path_dir, '_data.txt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_47": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_data(os.path.join(path_dir, '_data.txt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat((Q, q), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Q, shape=(n_d, -1))",
                            "Call"
                        ],
                        [
                            "tf.add(Q, tf.log(weights_))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(Q, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Q)",
                            "Call"
                        ],
                        [
                            "tf.tile(Q, [n_h, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_d, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_97": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat((Q, q), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Q, shape=(n_d, -1))",
                            "Call"
                        ],
                        [
                            "tf.add(Q, tf.log(weights_))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(Q, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Q)",
                            "Call"
                        ],
                        [
                            "tf.tile(Q, [n_h, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(weights_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat((Q, q), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Q, shape=(n_d, -1))",
                            "Call"
                        ],
                        [
                            "tf.add(Q, tf.log(weights_))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(Q, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Q)",
                            "Call"
                        ],
                        [
                            "tf.tile(Q, [n_h, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat((Q, q), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Q, shape=(n_d, -1))",
                            "Call"
                        ],
                        [
                            "tf.add(Q, tf.log(weights_))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(Q, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Q)",
                            "Call"
                        ],
                        [
                            "tf.tile(Q, [n_h, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_101": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat((Q, q), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Q, shape=(n_d, -1))",
                            "Call"
                        ],
                        [
                            "tf.add(Q, tf.log(weights_))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(Q, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Q)",
                            "Call"
                        ],
                        [
                            "tf.tile(Q, [n_h, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[n_h, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(n_d)]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(layer_1, Q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer_1, shape=(n_h, -1))",
                            "Call"
                        ],
                        [
                            "tf.div(layer_1, tf.reduce_sum(layer_1, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_104": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(n_d)]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(layer_1, Q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer_1, shape=(n_h, -1))",
                            "Call"
                        ],
                        [
                            "tf.div(layer_1, tf.reduce_sum(layer_1, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat((Q, q), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Q, shape=(n_d, -1))",
                            "Call"
                        ],
                        [
                            "tf.add(Q, tf.log(weights_))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(Q, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Q)",
                            "Call"
                        ],
                        [
                            "tf.tile(Q, [n_h, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_105": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(n_d)]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(layer_1, Q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer_1, shape=(n_h, -1))",
                            "Call"
                        ],
                        [
                            "tf.div(layer_1, tf.reduce_sum(layer_1, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(n_d)]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(layer_1, Q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer_1, shape=(n_h, -1))",
                            "Call"
                        ],
                        [
                            "tf.div(layer_1, tf.reduce_sum(layer_1, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_h, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "div_109": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(n_d)]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(layer_1, Q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer_1, shape=(n_h, -1))",
                            "Call"
                        ],
                        [
                            "tf.div(layer_1, tf.reduce_sum(layer_1, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(layer_1, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "out_layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(n_d)]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(layer_1, Q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer_1, shape=(n_h, -1))",
                            "Call"
                        ],
                        [
                            "tf.div(layer_1, tf.reduce_sum(layer_1, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "initial_value": {
                    "value": "tf.random_normal(shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_52": {
                "variable": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(data)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.reshape(tf.tile(means_[n_comp, :], [size[0]]), [-1, size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_data(os.path.join(path_dir, '_data.txt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_53": {
                "variable": {
                    "value": "new_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isnan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_nan(data)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.reshape(tf.tile(covs_[n_comp, :], [size[0]]), [-1, size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros([size[0], size[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_55": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isnan, tf.reshape(tf.tile(means_[n_comp, :], [size[0]]), [-1, size[1]]), data)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "means_[n_comp, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_56": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_57": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_isfinite",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(data)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.reshape(tf.tile(tf.add(gamma_, covs_[n_comp, :]), [size[0]]), [-1, size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_60": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[n_comp, :]), [size[0]]), [-1, size[1]]), tf.ones_like(data))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.multiply(q, -0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_64": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[n_comp, :]), [size[0]]), [-1, size[1]]), tf.ones_like(data))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.multiply(q, -0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_65": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[n_comp, :]), [size[0]]), [-1, size[1]]), tf.ones_like(data))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.multiply(q, -0.5)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_67": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[n_comp, :]), [size[0]]), [-1, size[1]]), tf.ones_like(data))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.multiply(q, -0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_69": {
                "x": {
                    "value": "where_isfinite",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_70": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_72": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[n_comp, :]), [size[0]]), [-1, size[1]]), tf.ones_like(data))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.multiply(q, -0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_73": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isfinite, tf.reshape(tf.tile(tf.add(gamma_, covs_[n_comp, :]), [size[0]]), [-1, size[1]]), tf.ones_like(data))",
                            "Call"
                        ],
                        [
                            "tf.log(q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.add(q, norm)",
                            "Call"
                        ],
                        [
                            "tf.multiply(q, -0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(Q, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_177": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_179": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "gmm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(gmm.weights_.reshape((-1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_180": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "gmm_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmm.means_",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_181": {
                "variable": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "gmm_covariances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmm.covariances_",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "mean_sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "complate_data[np.random.choice(complate_data.shape[0], size=n_hidden_1, replace=True), :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_184": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=(n_hidden_1, n_features), mean=0.0, stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_189": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=(1,), mean=1.0, stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_195": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=predict, labels=y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_199": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "l_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "variable"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_202": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_78": {
                "variable": {
                    "value": "h_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s_[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "new_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isnan, tf.reshape(tf.tile(covs_[n_comp, :], [size[0]]), [-1, size[1]]), tf.zeros([size[0], size[1]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_80": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where_isnan, tf.reshape(tf.tile(means_[n_comp, :], [size[0]]), [-1, size[1]]), data)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_81": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_82": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(s_[i, :], new_cov)",
                            "Call"
                        ],
                        [
                            "tf.log(h_sig)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_83": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_85": {
                "variable": {
                    "value": "h_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(s_[i, :], new_cov)",
                            "Call"
                        ],
                        [
                            "tf.log(h_sig)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_86": {
                "variable": {
                    "value": "det",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(s_[i, :], new_cov)",
                            "Call"
                        ],
                        [
                            "tf.log(h_sig)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_87": {
                "variable": {
                    "value": "det",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(size[1]), tf.log(2 * np.pi))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "det",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(h_sig, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(tf.to_float(size[1]), tf.log(2 * np.pi)), det)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_89": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "det",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(h_sig, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(tf.to_float(size[1]), tf.log(2 * np.pi)), det)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_90": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_92": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(new_data, means_[n_comp, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reduce_sum(tf.cast(where_isfinite, tf.int32), axis=1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, tf.log(2 * np.pi))",
                            "Call"
                        ],
                        [
                            "tf.subtract(new_data, x_[i, :])",
                            "Call"
                        ],
                        [
                            "tf.square(norm)",
                            "Call"
                        ],
                        [
                            "tf.div(norm, h_sig)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(norm, det)",
                            "Call"
                        ],
                        [
                            "tf.multiply(norm, -0.5)",
                            "Call"
                        ],
                        [
                            "tf.exp(norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_94": {
                "variable": {
                    "value": "layer_1[n_comp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "(layer_1[n_comp], norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_97": {
                "x": {
                    "value": "weights_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(weights, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(n_d)]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(layer_1, Q)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(layer_1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer_1, shape=(n_h, -1))",
                            "Call"
                        ],
                        [
                            "tf.div(layer_1, tf.reduce_sum(layer_1, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_259": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_260": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "means.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_261": {
                "variable": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val_covs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "covs.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_263": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "x.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_264": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "s.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_266": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "w.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_267": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "gamma.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_271": {
                "variable": {
                    "value": "pred_train",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neural_net(z, weights, means, covs, s, x, w, gamma, n_distribution, n_hidden_1)",
                            "Call"
                        ],
                        [
                            "neural_net(z, weights, means, covs, s, x, w, gamma, n_distribution, n_hidden_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_272": {
                "variable": {
                    "value": "pred_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neural_net(z, weights, means, covs, s, x, w, gamma, n_distribution, n_hidden_1)",
                            "Call"
                        ],
                        [
                            "neural_net(z, weights, means, covs, s, x, w, gamma, n_distribution, n_hidden_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_277": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neural_net(z, weights, means, covs, s, x, w, gamma, n_distribution, n_hidden_1)",
                            "Call"
                        ],
                        [
                            "neural_net(z, weights, means, covs, s, x, w, gamma, n_distribution, n_hidden_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_278": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_280": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "tensor": {
                    "value": "tf.tile(means_[n_comp, :], [size[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "tf.tile(covs_[n_comp, :], [size[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "shape": {
                    "value": "[size[0], size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "tensor": {
                    "value": "tf.tile(tf.add(gamma_, covs_[n_comp, :]), [size[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_data(os.path.join(path_dir, '_data.txt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "tf.cast(where_isfinite, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_70": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_195": {
                "logits": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neural_net(z, weights, means, covs, s, x, w, gamma, n_distribution, n_hidden_1)",
                            "Call"
                        ],
                        [
                            "neural_net(z, weights, means, covs, s, x, w, gamma, n_distribution, n_hidden_1)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_52": {
                "input": {
                    "value": "means_[n_comp, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_53": {
                "input": {
                    "value": "covs_[n_comp, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_58": {
                "input": {
                    "value": "tf.add(gamma_, covs_[n_comp, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_87": {
                "x": {
                    "value": "tf.to_float(size[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_235": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "l_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "variable"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_255": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "l_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "variable"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ],
                        [
                            "l_r / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_278": {
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(predict)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_280": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.round(pred), y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_58": {
                "x": {
                    "value": "gamma_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(gamma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "covs_[n_comp, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "x": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_87": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}