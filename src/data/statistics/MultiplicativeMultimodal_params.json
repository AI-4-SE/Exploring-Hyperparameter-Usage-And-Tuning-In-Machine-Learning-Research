{
    "higgs/go.py": {
        "sklearn": {
            "roc_curve_529": {
                "variable": {
                    "value": "(fpr, tpr, thresh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_train[6]",
                            "Subscript"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "auc_530": {
                "variable": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "accuracy_score_506": {
                "variable": {
                    "value": "batch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ],
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "1 - batch_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "f1_score_507": {
                "variable": {
                    "value": "batch_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ],
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "1 - batch_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "roc_curve_508": {
                "variable": {
                    "value": "(fpr, tpr, thresh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ],
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "1 - batch_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "auc_509": {
                "variable": {
                    "value": "batch_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "accuracy_score_340": {
                "variable": {
                    "value": "batch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ],
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "1 - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "f1_score_341": {
                "variable": {
                    "value": "batch_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ],
                        [
                            "[k[0] for k in y]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "1 - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "get_checkpoint_state_227": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.init_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_266": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_267": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(args.log_dir, time.strftime('%Y-%m-%d-%H-%M-%S'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_272": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_255": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_258": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_292": {
                "ref": {
                    "value": "model.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "args.learning_rate * args.decay_rate ** e",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "higgs/attention.py": {
        "tensorflow": {
            "Variable_6": {
                "variable": {
                    "value": "W_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_size, attention_size], stddev=tf.sqrt(2.0 / (hidden_size + attention_size)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_8": {
                "variable": {
                    "value": "b_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([attention_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_9": {
                "variable": {
                    "value": "u_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([attention_size], stddev=tf.sqrt(2.0 / attention_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_13": {
                "variable": {
                    "value": "W_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_size, attention_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_15": {
                "variable": {
                    "value": "b_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([attention_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "u_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([attention_size, K], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([x.shape[1].value, merge_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "b_x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([merge_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "hidden_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(tf.tanh(tf.matmul(hidden_concat, w) + b), u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_104": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.matmul(tf.tanh(tf.matmul(hidden_concat, w) + b), u))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "len(hiddens)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_236": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.softmax(tf.concat(pre_sm, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "len(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_301": {
                "variable": {
                    "value": "W_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_size, attention_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_302": {
                "variable": {
                    "value": "b_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([attention_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_303": {
                "variable": {
                    "value": "u_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([attention_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_305": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.reshape(inputs, [-1, hidden_size]), W_omega) + tf.reshape(b_omega, [1, -1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_306": {
                "variable": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.matmul(tf.reshape(inputs, [-1, hidden_size]), W_omega) + tf.reshape(b_omega, [1, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(u_omega, [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_307": {
                "variable": {
                    "value": "exps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.exp(vu)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_311": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs * tf.reshape(alphas, [-1, sequence_length, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, w_x) + b_x",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W_omegas[idx2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_174": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.softmax(tf.concat(pre_sm, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "len(hiddens)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_289": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_294": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([x.shape[1].value, merge_size], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_103": {
                "a": {
                    "value": "hidden_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(hiddens, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean([e * a[0], z * a[1]], 0) for (e, a) in zip(inputs, alphas)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "logits": {
                    "value": "tf.concat(pre_sm, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "tensor": {
                    "value": "u_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([attention_size], stddev=tf.sqrt(2.0 / attention_size)))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([attention_size, K], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([attention_size], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_307": {
                "x": {
                    "value": "vu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, tf.reshape(u_omega, [-1, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_308": {
                "tensor": {
                    "value": "tf.reduce_sum(exps, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_67": {
                "x": {
                    "value": "tf.matmul(z, W_omegas[idx2]) + tf.reshape(b_omegas[idx2], [1, -1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "tensor": {
                    "value": "u_omegas[idx2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "logits": {
                    "value": "tf.concat([presm, pre_sm2], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_75": {
                "value": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_77": {
                "input_tensor": {
                    "value": "[e * a[0], z * a[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "initial_value": {
                    "value": "tf.random_normal([x.shape[1].value, merge_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_94": {
                "initial_value": {
                    "value": "tf.random_normal([merge_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_103": {
                "x": {
                    "value": "tf.matmul(hidden_concat, w) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_136": {
                "initial_value": {
                    "value": "tf.random_normal([x.shape[1].value, merge_size], stddev=tf.sqrt(2.0 / (x.shape[1].value + x.shape[0].value)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_138": {
                "initial_value": {
                    "value": "tf.random_normal([merge_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "input_tensor": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "logits": {
                    "value": "tf.concat(pre_sm, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_232": {
                "a": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "W_omegas[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_236": {
                "values": {
                    "value": "pre_sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_305": {
                "a": {
                    "value": "tf.reshape(inputs, [-1, hidden_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_size, attention_size], stddev=tf.sqrt(2.0 / (hidden_size + attention_size))))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_size, attention_size], stddev=0.1))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_size, attention_size], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_305": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_308": {
                "input_tensor": {
                    "value": "exps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.exp(vu), [-1, sequence_length])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "tensor": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.nn.softmax(tf.concat([presm, pre_sm2], 1)) for presm in pre_sm]",
                            "ListComp"
                        ],
                        [
                            "[tf.split(a, 2, 1) for a in alphas]",
                            "ListComp"
                        ],
                        [
                            "tf.split(sm, len(hiddens), 1)",
                            "Call"
                        ],
                        [
                            "tf.split(tf.nn.softmax(tf.concat(pre_sm, 1)), len(hiddens), 1)",
                            "Call"
                        ],
                        [
                            "tf.split(tf.nn.softmax(tf.concat(pre_sm, 1)), len(inputs), 1)",
                            "Call"
                        ],
                        [
                            "exps / tf.reshape(tf.reduce_sum(exps, 1), [-1, 1])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_7": {
                "x": {
                    "value": "2.0 / (hidden_size + attention_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_9": {
                "x": {
                    "value": "2.0 / attention_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "input_tensor": {
                    "value": "[e, z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W_omegas[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_73": {
                "values": {
                    "value": "[presm, pre_sm2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_96": {
                "x": {
                    "value": "tf.matmul(x, W_projs[-1]) + B_projs[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_140": {
                "x": {
                    "value": "tf.matmul(x, W_projs[-1]) + B_projs[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "a": {
                    "value": "hiddens[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "W_omegas[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_174": {
                "values": {
                    "value": "pre_sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean([e * a[0], z * a[1]], 0) for (e, a) in zip(inputs, alphas)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean([e * a[0], z * a[1]], 0) for (e, a) in zip(inputs, alphas)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_232": {
                "x": {
                    "value": "tf.matmul(inputs[i], W_omegas[idx]) + tf.reshape(b_omegas[idx], [1, -1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_234": {
                "tensor": {
                    "value": "u_omegas[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_63": {
                "x": {
                    "value": "tf.matmul(h, W_omegas[idx]) + tf.reshape(b_omegas[idx], [1, -1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "u_omegas[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "tensor": {
                    "value": "b_omegas[idx2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "W_projs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_142": {
                "features": {
                    "value": "tf.matmul(x, W_projs[-1]) + B_projs[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_147": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_170": {
                "x": {
                    "value": "tf.matmul(hiddens[i], W_omegas[idx]) + tf.reshape(b_omegas[idx], [1, -1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "tensor": {
                    "value": "u_omegas[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "W_projs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_136": {
                "x": {
                    "value": "2.0 / (x.shape[1].value + x.shape[0].value)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "W_projs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_144": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "W_projs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "tensor": {
                    "value": "b_omegas[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "b_omegas[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "W_projs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "tensor": {
                    "value": "b_omegas[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "higgs/model.py": {
        "tensorflow": {
            "Variable_683": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_821": {
                "variable": {
                    "value": "wd_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size, args.input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.input_data2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size, args.input_dim2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.input_data3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size, args.input_dim3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_79": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_661": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_662": {
                "name": {
                    "value": "train_xent_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.xent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_686": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.cost, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_689": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tv for tv in tf.trainable_variables() if 'virtual' not in tv.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "xw_plus_b_794": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(x, h)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(name_var + 'bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(name_var + 'relu', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, merge_size)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(name + str(i) + 'bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(name + str(i) + 'bn', x)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_variable([d, out_dim], init_method='uniform_scaling', init_param={'factor': 1.0}, wd=self.args.wd, dtype=self.dtype, name='w')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_variable([out_dim], init_method='constant', init_param={'val': 0.0}, name='b', dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_797": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(x, h)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(name_var + 'bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(name_var + 'relu', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, merge_size)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(name + str(i) + 'bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(name + str(i) + 'bn', x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_841": {
                "input_tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_154": {
                "variable": {
                    "value": "one_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_155": {
                "variable": {
                    "value": "one_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_177": {
                "variable": {
                    "value": "labels_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "variable": {
                    "value": "self.violation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masks * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_184": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "ce_collaborative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(one_p2 * one_p3) * logp + tf.sqrt(one_p * one_p3) * logp2 + tf.sqrt(one_p * one_p2) * logp3",
                            "BinOp"
                        ],
                        [
                            "one_p2 * logp + one_p * logp2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(ce, 0)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean([tf.minimum(one_p2, one_p3) * me, tf.minimum(one_p, one_p3) * me2, tf.minimum(one_p, one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([0.5 * (one_p2 + one_p3) * me, 0.5 * (one_p + one_p3) * me2, 0.5 * (one_p + one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([one_p2 * me, one_p * me2], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-ce_collaborative",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([alphas_output[0] * me, alphas_output[1] * me2, alphas_output[2] * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([tf.sqrt(one_p2 * one_p3) * me, tf.sqrt(one_p * one_p3) * me2, tf.sqrt(one_p * one_p2) * me3], 0)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "argmax_185": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "ce_collaborative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(one_p2 * one_p3) * logp + tf.sqrt(one_p * one_p3) * logp2 + tf.sqrt(one_p * one_p2) * logp3",
                            "BinOp"
                        ],
                        [
                            "one_p2 * logp + one_p * logp2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(ce, 0)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean([tf.minimum(one_p2, one_p3) * me, tf.minimum(one_p, one_p3) * me2, tf.minimum(one_p, one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([0.5 * (one_p2 + one_p3) * me, 0.5 * (one_p + one_p3) * me2, 0.5 * (one_p + one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([one_p2 * me, one_p * me2], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-ce_collaborative",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([alphas_output[0] * me, alphas_output[1] * me2, alphas_output[2] * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([tf.sqrt(one_p2 * one_p3) * me, tf.sqrt(one_p * one_p3) * me2, tf.sqrt(one_p * one_p2) * me3], 0)",
                            "UnaryOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_643": {
                "name": {
                    "value": "cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_651": {
                "name": {
                    "value": "prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_691": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_693": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_714": {
                "variable": {
                    "value": "(grads_i, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(loss_v[i], tvars_v)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_724": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_n_826": {
                "inputs": {
                    "value": "wd_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "single_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_80": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.input_data, self.input_data2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_130": {
                "variable": {
                    "value": "logits_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_132": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.exp(off_logits), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_157": {
                "variable": {
                    "value": "one_p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_166": {
                "variable": {
                    "value": "logits_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_168": {
                "variable": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(m1m0, margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_169": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(-m1m0, margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "variable": {
                    "value": "ce_collaborative",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_276": {
                "variable": {
                    "value": "labels_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_289": {
                "variable": {
                    "value": "self.violation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masks * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_300": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "ce_collaborative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(one_p2 * one_p3) * logp + tf.sqrt(one_p * one_p3) * logp2 + tf.sqrt(one_p * one_p2) * logp3",
                            "BinOp"
                        ],
                        [
                            "one_p2 * logp + one_p * logp2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(ce, 0)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean([tf.minimum(one_p2, one_p3) * me, tf.minimum(one_p, one_p3) * me2, tf.minimum(one_p, one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([0.5 * (one_p2 + one_p3) * me, 0.5 * (one_p + one_p3) * me2, 0.5 * (one_p + one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([one_p2 * me, one_p * me2], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-ce_collaborative",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([alphas_output[0] * me, alphas_output[1] * me2, alphas_output[2] * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([tf.sqrt(one_p2 * one_p3) * me, tf.sqrt(one_p * one_p3) * me2, tf.sqrt(one_p * one_p2) * me3], 0)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "argmax_301": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "ce_collaborative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(one_p2 * one_p3) * logp + tf.sqrt(one_p * one_p3) * logp2 + tf.sqrt(one_p * one_p2) * logp3",
                            "BinOp"
                        ],
                        [
                            "one_p2 * logp + one_p * logp2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(ce, 0)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean([tf.minimum(one_p2, one_p3) * me, tf.minimum(one_p, one_p3) * me2, tf.minimum(one_p, one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([0.5 * (one_p2 + one_p3) * me, 0.5 * (one_p + one_p3) * me2, 0.5 * (one_p + one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([one_p2 * me, one_p * me2], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-ce_collaborative",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([alphas_output[0] * me, alphas_output[1] * me2, alphas_output[2] * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([tf.sqrt(one_p2 * one_p3) * me, tf.sqrt(one_p * one_p3) * me2, tf.sqrt(one_p * one_p2) * me3], 0)",
                            "UnaryOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_653": {
                "name": {
                    "value": "'prob{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.ps[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_666": {
                "name": {
                    "value": "'mean{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_668": {
                "name": {
                    "value": "'var{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_672": {
                "name": {
                    "value": "'mean_hidden{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_674": {
                "name": {
                    "value": "'var_hidden{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_678": {
                "name": {
                    "value": "'virtual_loss{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_684": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_686": {
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tv for tv in tf.trainable_variables() if 'virtual' not in tv.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "AdagradOptimizer_695": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_805": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(x, h)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(name_var + 'bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(name_var + 'relu', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, merge_size)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(name + str(i) + 'bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(name + str(i) + 'bn', x)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_810": {
                "name_or_scope": {
                    "value": "name_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + '_' + str(i)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_816": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(x, h)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(name_var + 'bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(name_var + 'relu', x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_prob)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(x, merge_size)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(name + str(i) + 'bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(name + str(i) + 'bn', x)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_834": {
                "name_or_scope": {
                    "value": "name + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "component1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "component2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_171": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "construct_mask(-ce_collaborative)",
                            "Call"
                        ],
                        [
                            "construct_mask(-ce_collaborative)",
                            "Call"
                        ],
                        [
                            "construct_mask(ce_collaborative)",
                            "Call"
                        ],
                        [
                            "tf.concat([m0, m1], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m0, m1], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m0, m1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_279": {
                "variable": {
                    "value": "logits_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_281": {
                "variable": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(m1m0, margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_282": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(-m1m0, margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_283": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_291": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(-ce_collaborative * labels_t * masks, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_335": {
                "variable": {
                    "value": "one_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_336": {
                "variable": {
                    "value": "one_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_337": {
                "variable": {
                    "value": "one_p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_365": {
                "variable": {
                    "value": "labels_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_367": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logp_comb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas_output[0] * logp + alphas_output[1] * logp2 + alphas_output[2] * logp3",
                            "BinOp"
                        ],
                        [
                            "tf.log(alphas_output[0] * p + alphas_output[1] * p2 + alphas_output[2] * p3)",
                            "Call"
                        ],
                        [
                            "compute_logp(ce_collaborative)",
                            "Call"
                        ],
                        [
                            "compute_logp(ce_collaborative)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_368": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "logp_comb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas_output[0] * logp + alphas_output[1] * logp2 + alphas_output[2] * logp3",
                            "BinOp"
                        ],
                        [
                            "tf.log(alphas_output[0] * p + alphas_output[1] * p2 + alphas_output[2] * p3)",
                            "Call"
                        ],
                        [
                            "compute_logp(ce_collaborative)",
                            "Call"
                        ],
                        [
                            "compute_logp(ce_collaborative)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_714": {
                "ys": {
                    "value": "loss_v[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tv for tv in tf.trainable_variables() if 'virtual{}'.format(i) in tv.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_sum_132": {
                "input_tensor": {
                    "value": "tf.exp(off_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "component3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_154": {
                "x": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "logps",
                            "Name"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "off_logits - tmp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_155": {
                "x": {
                    "value": "logp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_168": {
                "x": {
                    "value": "m1m0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "-m0m1",
                            "UnaryOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_169": {
                "x": {
                    "value": "-m1m0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_180": {
                "input_tensor": {
                    "value": "tf.reduce_sum(ce_collaborative * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_192": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp2 * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_264": {
                "variable": {
                    "value": "one_p_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean([tf.log(one_ps[i]) for i in ind0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_284": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "construct_mask(-ce_collaborative)",
                            "Call"
                        ],
                        [
                            "construct_mask(-ce_collaborative)",
                            "Call"
                        ],
                        [
                            "construct_mask(ce_collaborative)",
                            "Call"
                        ],
                        [
                            "tf.concat([m0, m1], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m0, m1], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m0, m1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_296": {
                "input_tensor": {
                    "value": "tf.reduce_sum(ce_collaborative * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_311": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output1.get_shape()[1].value, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_313": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_318": {
                "variable": {
                    "value": "softmax_w2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output2.get_shape()[1].value, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_320": {
                "variable": {
                    "value": "softmax_b2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_325": {
                "variable": {
                    "value": "softmax_w3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output3.get_shape()[1].value, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_327": {
                "variable": {
                    "value": "softmax_b3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_360": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "logps",
                            "Name"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "off_logits - tmp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_361": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_362": {
                "variable": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logp3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_363": {
                "variable": {
                    "value": "logp_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alphas_output[0] * p + alphas_output[1] * p2 + alphas_output[2] * p3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_407": {
                "variable": {
                    "value": "one_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_408": {
                "variable": {
                    "value": "one_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_532": {
                "variable": {
                    "value": "labels_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_536": {
                "variable": {
                    "value": "self.violation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masks * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_549": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logp_comb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas_output[0] * logp + alphas_output[1] * logp2 + alphas_output[2] * logp3",
                            "BinOp"
                        ],
                        [
                            "tf.log(alphas_output[0] * p + alphas_output[1] * p2 + alphas_output[2] * p3)",
                            "Call"
                        ],
                        [
                            "compute_logp(ce_collaborative)",
                            "Call"
                        ],
                        [
                            "compute_logp(ce_collaborative)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_550": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "ce_collaborative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(one_p2 * one_p3) * logp + tf.sqrt(one_p * one_p3) * logp2 + tf.sqrt(one_p * one_p2) * logp3",
                            "BinOp"
                        ],
                        [
                            "one_p2 * logp + one_p * logp2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(ce, 0)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean([tf.minimum(one_p2, one_p3) * me, tf.minimum(one_p, one_p3) * me2, tf.minimum(one_p, one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([0.5 * (one_p2 + one_p3) * me, 0.5 * (one_p + one_p3) * me2, 0.5 * (one_p + one_p2) * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([one_p2 * me, one_p * me2], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-ce_collaborative",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([alphas_output[0] * me, alphas_output[1] * me2, alphas_output[2] * me3], 0)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_mean([tf.sqrt(one_p2 * one_p3) * me, tf.sqrt(one_p * one_p3) * me2, tf.sqrt(one_p * one_p2) * me3], 0)",
                            "UnaryOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_699": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_713": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_132": {
                "x": {
                    "value": "off_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - logits_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_157": {
                "x": {
                    "value": "logp3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_161": {
                "x": {
                    "value": "one_p * one_p3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_180": {
                "input_tensor": {
                    "value": "ce_collaborative * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "input_tensor": {
                    "value": "tf.reduce_sum(ce_collaborative * labels_t * masks, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_192": {
                "input_tensor": {
                    "value": "logp * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "logp2 * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_195": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp3 * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_215": {
                "name": {
                    "value": "'collab{}'.format(j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers('single0', self.input_data, args.dnn_size, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ],
                        [
                            "self._layers('single1', self.input_data2, args.dnn_size2, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ],
                        [
                            "self._merge('additive_merge', outputs_all, merge_size=args.output_size, bn=args.batchnorm, act='relu')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "self._layers('additive_fc', output, '500,200', keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ],
                        [
                            "outputs_all[comb[0]]",
                            "Subscript"
                        ],
                        [
                            "self._merge('addmul' + str(j), outputs_all_j, merge_size=args.output_size, bn=args.batchnorm, act='relu')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "self._layers('addmul' + str(j), output, '300,200', keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ],
                        [
                            "self._layers('addmul' + str(j), output, '500,200', keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_256": {
                "variable": {
                    "value": "one_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_266": {
                "variable": {
                    "value": "one_p_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean([tf.log(one_ps[i]) for i in ind0], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_281": {
                "x": {
                    "value": "m1m0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "-m0m1",
                            "UnaryOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_282": {
                "x": {
                    "value": "-m1m0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_291": {
                "input_tensor": {
                    "value": "-ce_collaborative * labels_t * masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_293": {
                "input_tensor": {
                    "value": "tf.reduce_sum(ce_collaborative * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_296": {
                "input_tensor": {
                    "value": "ce_collaborative * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "component1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_314": {
                "a": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers('modal0', self.input_data, args.dnn_size, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w', [output1.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w', [output1.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w{}'.format(i), [output_size_v, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_317": {
                "name_or_scope": {
                    "value": "component2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_321": {
                "a": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers('modal1', self.input_data2, args.dnn_size2, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w2', [output2.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w2', [output2.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "component3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_328": {
                "a": {
                    "value": "output3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._layers('modal2', self.input_data3, args.dnn_size3, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w3', [output3.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w3', [output3.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_366": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp_comb * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_381": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output1.get_shape()[1].value, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_383": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_388": {
                "variable": {
                    "value": "softmax_w2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output2.get_shape()[1].value, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_390": {
                "variable": {
                    "value": "softmax_b2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_410": {
                "variable": {
                    "value": "one_p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_441": {
                "variable": {
                    "value": "logits_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_443": {
                "variable": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "m1m0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_444": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "-m1m0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_445": {
                "variable": {
                    "value": "margin_errors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_449": {
                "variable": {
                    "value": "logits_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_451": {
                "variable": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "m1m0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_452": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "-m1m0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_453": {
                "variable": {
                    "value": "margin_errors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_457": {
                "variable": {
                    "value": "logits_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_459": {
                "variable": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(m1m0 + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_460": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(-m1m0 + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_461": {
                "variable": {
                    "value": "margin_errors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_465": {
                "variable": {
                    "value": "logits_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_468": {
                "variable": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(m0m1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 - m0m1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * tf.square(tf.nn.relu(1 - m0m1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_469": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(m1m0, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 - m1m0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * tf.square(tf.nn.relu(1 - m1m0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_470": {
                "variable": {
                    "value": "margin_errors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_474": {
                "variable": {
                    "value": "logits_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_478": {
                "variable": {
                    "value": "margin_errors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_482": {
                "variable": {
                    "value": "logits_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_484": {
                "variable": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m1m0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "-m0m1",
                            "UnaryOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_485": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-m1m0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_486": {
                "variable": {
                    "value": "margin_errors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_490": {
                "variable": {
                    "value": "logits_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(output1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(output1, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "self._fully_connected(output, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ],
                        [
                            "self.num_classes",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_492": {
                "variable": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(m1m0, margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_493": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(-m1m0, margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_494": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_539": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(ce_collaborative * labels_t * masks, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_544": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(margin_errors * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_613": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers('single0', self.input_data, args.dnn_size, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ],
                        [
                            "self._layers('single1', self.input_data2, args.dnn_size2, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ],
                        [
                            "self._merge('additive_merge', outputs_all, merge_size=args.output_size, bn=args.batchnorm, act='relu')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "self._layers('additive_fc', output, '500,200', keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ],
                        [
                            "outputs_all[comb[0]]",
                            "Subscript"
                        ],
                        [
                            "self._merge('addmul' + str(j), outputs_all_j, merge_size=args.output_size, bn=args.batchnorm, act='relu')",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, output_size])",
                            "Call"
                        ],
                        [
                            "self._layers('addmul' + str(j), output, '300,200', keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ],
                        [
                            "self._layers('addmul' + str(j), output, '500,200', keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_634": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_635": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_639": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_182": {
                "input_tensor": {
                    "value": "ce_collaborative * labels_t * masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_195": {
                "input_tensor": {
                    "value": "logp3 * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "'varcollab{}'.format(j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_264": {
                "input_tensor": {
                    "value": "[tf.log(one_ps[i]) for i in ind0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_min_268": {
                "variable": {
                    "value": "one_p_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[one_ps[i] for i in ind0]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_293": {
                "input_tensor": {
                    "value": "ce_collaborative * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_306": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_335": {
                "x": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "logps",
                            "Name"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "off_logits - tmp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_336": {
                "x": {
                    "value": "logp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_337": {
                "x": {
                    "value": "logp3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_366": {
                "input_tensor": {
                    "value": "logp_comb * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_372": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_373": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp2 * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_374": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp3 * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "component1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_384": {
                "a": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers('modal0', self.input_data, args.dnn_size, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w', [output1.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w', [output1.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w{}'.format(i), [output_size_v, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_387": {
                "name_or_scope": {
                    "value": "component2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_391": {
                "a": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers('modal1', self.input_data2, args.dnn_size2, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w2', [output2.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w2', [output2.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_396": {
                "variable": {
                    "value": "softmax_w3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output3.get_shape()[1].value, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_398": {
                "variable": {
                    "value": "softmax_b3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_495": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "construct_mask(-ce_collaborative)",
                            "Call"
                        ],
                        [
                            "construct_mask(-ce_collaborative)",
                            "Call"
                        ],
                        [
                            "construct_mask(ce_collaborative)",
                            "Call"
                        ],
                        [
                            "tf.concat([m0, m1], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m0, m1], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m0, m1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "'addmuloutput' + str(j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_266": {
                "input_tensor": {
                    "value": "[tf.log(one_ps[i]) for i in ind0]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_306": {
                "input_tensor": {
                    "value": "logp * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_372": {
                "input_tensor": {
                    "value": "logp * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_373": {
                "input_tensor": {
                    "value": "logp2 * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_374": {
                "input_tensor": {
                    "value": "logp3 * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "component3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_399": {
                "a": {
                    "value": "output3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._layers('modal2', self.input_data3, args.dnn_size3, keep_prob=self.keep_prob, bn=args.batchnorm, is_training=self.training, act=args.act)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w3', [output3.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w3', [output3.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_407": {
                "x": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "logps",
                            "Name"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "off_logits - tmp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_408": {
                "x": {
                    "value": "logp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_413": {
                "x": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "logps",
                            "Name"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "off_logits - tmp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_414": {
                "x": {
                    "value": "logp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_459": {
                "features": {
                    "value": "m1m0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_460": {
                "features": {
                    "value": "-m1m0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_468": {
                "x": {
                    "value": "m0m1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_per_class[0] - logits_per_class[1]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_469": {
                "x": {
                    "value": "m1m0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "-m0m1",
                            "UnaryOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_476": {
                "x": {
                    "value": "tf.nn.relu(m1m0 + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_477": {
                "x": {
                    "value": "tf.nn.relu(-m1m0 + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_492": {
                "x": {
                    "value": "m1m0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "-m0m1",
                            "UnaryOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ],
                        [
                            "logits_per_class[1] - logits_per_class[0]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_493": {
                "x": {
                    "value": "-m1m0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "args.margin",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_539": {
                "input_tensor": {
                    "value": "ce_collaborative * labels_t * masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_544": {
                "input_tensor": {
                    "value": "margin_errors * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_557": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_558": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp2 * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_584": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'softmax_w{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size_v, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_585": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'softmax_b{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_587": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=logits_v, labels=self.labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_627": {
                "name_or_scope": {
                    "value": "additive_finaloutput",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_639": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_256": {
                "x": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "logps",
                            "Name"
                        ],
                        [
                            "compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "off_logits - tmp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_264": {
                "x": {
                    "value": "one_ps[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_410": {
                "x": {
                    "value": "logp3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_416": {
                "x": {
                    "value": "logp3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ],
                        [
                            "compute_logp(logits3)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_468": {
                "x": {
                    "value": "tf.nn.relu(1 - m0m1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_469": {
                "x": {
                    "value": "tf.nn.relu(1 - m1m0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_476": {
                "features": {
                    "value": "m1m0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_477": {
                "features": {
                    "value": "-m1m0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_515": {
                "input_tensor": {
                    "value": "[tf.minimum(one_p2, one_p3) * me, tf.minimum(one_p, one_p3) * me2, tf.minimum(one_p, one_p2) * me3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_557": {
                "input_tensor": {
                    "value": "logp * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_558": {
                "input_tensor": {
                    "value": "logp2 * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_560": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logp3 * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_266": {
                "x": {
                    "value": "one_ps[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_468": {
                "features": {
                    "value": "1 - m0m1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_469": {
                "features": {
                    "value": "1 - m1m0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_517": {
                "input_tensor": {
                    "value": "[0.5 * (one_p2 + one_p3) * me, 0.5 * (one_p + one_p3) * me2, 0.5 * (one_p + one_p2) * me3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_524": {
                "input_tensor": {
                    "value": "[one_p2 * me, one_p * me2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_560": {
                "input_tensor": {
                    "value": "logp3 * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_582": {
                "name": {
                    "value": "'virtual{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_582": {
                "name_or_scope": {
                    "value": "'virtual{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_586": {
                "a": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w', [output1.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w', [output1.get_shape()[1].value, self.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('softmax_w{}'.format(i), [output_size_v, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_587": {
                "logits": {
                    "value": "logits_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(o, softmax_w) + softmax_b",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_519": {
                "input_tensor": {
                    "value": "[alphas_output[0] * me, alphas_output[1] * me2, alphas_output[2] * me3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_521": {
                "input_tensor": {
                    "value": "[tf.sqrt(one_p2 * one_p3) * me, tf.sqrt(one_p * one_p3) * me2, tf.sqrt(one_p * one_p2) * me3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_515": {
                "x": {
                    "value": "one_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(1 - tf.exp(logp))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(1 - tf.exp(logp))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(1 - tf.exp(logp))",
                            "Call"
                        ],
                        [
                            "1 - tf.exp(logp)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(1 - tf.exp(logp))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "one_p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(1 - tf.exp(logp2))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(1 - tf.exp(logp2))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(1 - tf.exp(logp2))",
                            "Call"
                        ],
                        [
                            "1 - tf.exp(logp2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_521": {
                "x": {
                    "value": "one_p * one_p2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "higgs/network_var.py": {
        "tensorflow": {
            "get_variable_85": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'bn_out'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_out]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer(shape, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.uniform_unit_scaling_initializer(factor=factor, seed=seed, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer(uniform=False, seed=seed, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(mean=mean, stddev=stddev, seed=seed, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(value=value, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "lambda x: tf.multiply(tf.nn.l2_loss(x), wd)",
                            "Lambda"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "emean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ema_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_out]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "evar",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ema_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_out]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_38": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_165": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_sub_166": {
                "variable": {
                    "value": "ema_mean_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "emean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ema_mean', shape=shape, trainable=False, dtype=dtype, initializer=tf.constant_initializer(0.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(emean - mean) * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_sub_167": {
                "variable": {
                    "value": "ema_var_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "evar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ema_var', shape=shape, trainable=False, dtype=dtype, initializer=tf.constant_initializer(1.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(evar - var) * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_168": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "init_param['mean']",
                            "Subscript"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, regularizer=reg, dtype=dtype, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'bn_out'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_172": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "emean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ema_mean', shape=shape, trainable=False, dtype=dtype, initializer=tf.constant_initializer(0.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "evar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ema_var', shape=shape, trainable=False, dtype=dtype, initializer=tf.constant_initializer(1.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'bn_out'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_49": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "init_param['mean']",
                            "Subscript"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "init_param['stddev']",
                            "Subscript"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_105": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "uniform_unit_scaling_initializer_57": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "factor": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "init_param['factor']",
                            "Subscript"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_155": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_162": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_64": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "init_param['val']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_77": {
                "x": {
                    "value": "tf.nn.l2_loss(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "l2_loss_77": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/data/cifar.py": {
        "tensorflow": {
            "Session_37": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_34": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/data/cifar10.py": {
        "tensorflow": {
            "Session_39": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_36": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/data/cifar100.py": {
        "tensorflow": {
            "Session_39": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_36": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/data/cifar_input.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_132": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_whitening(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_135": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(inp, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_whitening(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imagerecognition/resnet/data_tfrecord/build_imagenet_data.py": {
        "tensorflow": {
            "DEFINE_string_83": {
                "name": {
                    "value": "train_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_85": {
                "name": {
                    "value": "validation_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_87": {
                "name": {
                    "value": "output_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_90": {
                "name": {
                    "value": "train_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in training TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_92": {
                "name": {
                    "value": "validation_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in validation TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_95": {
                "name": {
                    "value": "num_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to preprocess the images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_106": {
                "name": {
                    "value": "labels_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_lsvrc_2015_synsets.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Labels file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_119": {
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_metadata.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "ImageNet metadata file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_135": {
                "name": {
                    "value": "bounding_box_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./imagenet_2012_bounding_boxes.csv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Bounding box file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Example_192": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_421": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_583": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_610": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bounding_box_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Feature_146": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_153": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_158": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_216": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_219": {
                "variable": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_220": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_221": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_224": {
                "variable": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_225": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_226": {
                "variable": {
                    "value": "self._cmyk_to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_229": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_230": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordWriter_355": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_directory, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_481": {
                "variable": {
                    "value": "matching_files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "jpeg_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/%s/*.JPEG' % (data_dir, synset)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "run_656": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_294": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames[i]",
                            "Subscript"
                        ],
                        [
                            "parts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Int64List_146": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_153": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_158": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_192": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FastGFile_469": {
                "name": {
                    "value": "labels_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/data_tfrecord/dataset.py": {
        "tensorflow": {
            "DEFINE_string_36": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "data/imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the processed data, i.e. TFRecord of Example protos.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_84": {
                "variable": {
                    "value": "data_files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf_record_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.data_dir, '%s-*' % self.subset)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordReader_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/data_tfrecord/image_processing.py": {
        "tensorflow": {
            "DEFINE_integer_47": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images to process in a batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Provide square images of this size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "num_preprocess_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of preprocessing threads per tower. Please make this a multiple of 4.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "num_readers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of parallel readers during train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "input_queue_memory_factor",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of the queue of preprocessed images. Default is ideal but try smaller values, e.g. 4, 2 or 1, if host memory is constrained. See comments in code for more details.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_331": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_332": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "VarLenFeature_380": {
                "variable": {
                    "value": "sparse_float32",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_390": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_serialized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples_queue.dequeue()",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature([], dtype=tf.string, default_value=''), 'image/class/label': tf.FixedLenFeature([1], dtype=tf.int64, default_value=-1), 'image/class/text': tf.FixedLenFeature([], dtype=tf.string, default_value='')}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_391": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['image/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_393": {
                "variable": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_394": {
                "variable": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_395": {
                "variable": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_396": {
                "variable": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_399": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_403": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_404": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_164": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_image_dtype_169": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_203": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_239": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[ymin, xmin, ymax, xmax])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "aspect_ratio_range": {
                    "value": "[0.75, 1.33]",
                    "type": "List",
                    "possible_values": []
                },
                "area_range": {
                    "value": "[0.05, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "max_attempts": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_255": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "bbox_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "bbox_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_269": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, bbox_begin, bbox_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(distorted_image, [height, width], method=resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "distort_color(distorted_image, thread_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "central_crop_291": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "0.875",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_294": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_295": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_297": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_join_508": {
                "variable": {
                    "value": "(images, label_index_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors_list": {
                    "value": "images_and_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ],
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "2 * num_preprocess_threads * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_518": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, shape=[batch_size, height, width, depth])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_519": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, shape=[batch_size, height, width, depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_98": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_138": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_158": {
                "values": {
                    "value": "[image_buffer]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "decode_jpeg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_188": {
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "distort_color",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_brightness_192": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_193": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_194": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_195": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_226": {
                "values": {
                    "value": "[image, height, width, bbox]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "distort_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_249": {
                "variable": {
                    "value": "image_with_distorted_box",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "distort_bbox",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_287": {
                "values": {
                    "value": "[image, height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "eval_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_373": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_375": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_377": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_433": {
                "name": {
                    "value": "batch_processing",
                    "type": "str",
                    "possible_values": []
                }
            },
            "string_input_producer_445": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.data_files()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "string_input_producer_452": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.data_files()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "RandomShuffleQueue_476": {
                "variable": {
                    "value": "examples_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples_per_shard * FLAGS.input_queue_memory_factor",
                            "BinOp"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "FIFOQueue_482": {
                "variable": {
                    "value": "examples_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "examples_per_shard + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_522": {
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, shape=[batch_size, height, width, depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_197": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_198": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_199": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_200": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_240": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_251": {
                "name": {
                    "value": "images_with_distorted_bounding_box",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_distorted_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), distort_bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_queue_runner_493": {
                "qr": {
                    "value": "tf.train.queue_runner.QueueRunner(examples_queue, enqueue_ops)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_525": {
                "tensor": {
                    "value": "label_index_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_index_batch - 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_250": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=0.875)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "decode_jpeg(image_buffer)",
                            "Call"
                        ],
                        [
                            "distort_image(image, height, width, bbox, thread_id)",
                            "Call"
                        ],
                        [
                            "eval_image(image, height, width)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image_preprocessing(image_buffer, bbox, train, thread_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "QueueRunner_494": {
                "queue": {
                    "value": "examples_queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.string], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.FIFOQueue(capacity=examples_per_shard + 3 * batch_size, dtypes=[tf.string])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "enqueue_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "imagerecognition/resnet/models/model_factory.py": {
        "tensorflow": {}
    },
    "imagerecognition/resnet/models/multi_pass_model.py": {
        "tensorflow": {
            "placeholder_47": {
                "variable": {
                    "value": "self._pass_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pass_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(inp)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "num_per_pass",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_size / self._num_passes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_98": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_105": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_106": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, config.height, config.width, config.num_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_89": {
                "input_": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[start, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_per_pass, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_90": {
                "input_": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[start]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_per_pass]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_100": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_117": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/models/multi_pass_model_tests.py": {
        "tensorflow": {
            "main_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [BSIZE, config.height, config.width, config.num_channel]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-1.0, 1.0, [BSIZE, config.height, config.width, config.num_channel]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_37": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "yval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(np.random.uniform(0, 9.9, [BSIZE])).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.uniform(0, 9.9, [BSIZE])).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_43": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_46": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_66": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_67": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [BSIZE, config.height, config.width, config.num_channel]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-1.0, 1.0, [BSIZE, config.height, config.width, config.num_channel]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_106": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "yval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(np.random.uniform(0, 9.9, [BSIZE])).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.uniform(0, 9.9, [BSIZE])).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_112": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_115": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_135": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_136": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "global_variables_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/models/multi_pass_optimizer.py": {
        "tensorflow": {
            "group_132": {
                "variable": {
                    "value": "grad_add_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*grad_add_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_162": {
                "variable": {
                    "value": "zero_out_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*zero_out_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "[grad_add_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "self._grad_cache[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "var.name.split(':')[0] + '/grad_cache'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(value=0.0, dtype=var.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "self._grad_cache[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "var.name.split(':')[0] + '/grad_cache'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "augment_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.num_passes] + var_shape",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(value=0.0, dtype=var.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_119": {
                "variable": {
                    "value": "_div",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.num_passes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_120": {
                "variable": {
                    "value": "_add_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "_grad_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.grad_cache[var]",
                            "Subscript"
                        ],
                        [
                            "self._grad_cache[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(grad, self.num_passes)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_123": {
                "variable": {
                    "value": "_add",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_update_124": {
                "variable": {
                    "value": "_assign_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "_grad_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.grad_cache[var]",
                            "Subscript"
                        ],
                        [
                            "self._grad_cache[var]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "[self._count]",
                    "type": "List",
                    "possible_values": []
                },
                "updates": {
                    "value": "_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_146": {
                "control_inputs": {
                    "value": "[grad_add_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_151": {
                "control_inputs": {
                    "value": "[weight_update]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "_grad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_grad_cache.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "_grad_cache.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_139": {
                "input": {
                    "value": "gg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "gg",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_100": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_111": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/models/multi_pass_optimizer_tests.py": {
        "tensorflow": {
            "main_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_23": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, 12]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[11, 13]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_30": {
                "shape": {
                    "value": "[10, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_31": {
                "shape": {
                    "value": "[10, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_33": {
                "shape": {
                    "value": "[11, 13]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_34": {
                "shape": {
                    "value": "[11, 13]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_26": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_28": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/models/multi_tower_model.py": {
        "tensorflow": {
            "placeholder_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, config.height, config.width, config.num_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_175": {
                "variable": {
                    "value": "self._output_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self._output, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_176": {
                "variable": {
                    "value": "self._correct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self._output_idx, self.label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_177": {
                "variable": {
                    "value": "self._cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "stack(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_178": {
                "variable": {
                    "value": "self._cross_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "stack(cross_ents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_199": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_210": {
                "variable": {
                    "value": "self._bn_update_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "concat(grads, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_121": {
                "device_name": {
                    "value": "self._get_device('cpu', 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_130": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_188": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_194": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_175": {
                "input": {
                    "value": "self._output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_176": {
                "x": {
                    "value": "self._output_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_143": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_device('cpu', 0)",
                            "Call"
                        ],
                        [
                            "self._get_device('gpu', ii % num_gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_132": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_144": {
                "name": {
                    "value": "'%s_%d' % ('replica', ii)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_160": {
                "variable": {
                    "value": "wd_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_190": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/models/multi_tower_model_tests.py": {
        "tensorflow": {
            "main_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [10, 8, 8, 4]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-1.0, 1.0, [10, 8, 8, 4]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [10, 8, 8, 4]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(-1.0, 1.0, [10, 8, 8, 4]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_57": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "yval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(np.random.uniform(0, 9.9, [10])).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_71": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/models/nnlib.py": {
        "tensorflow": {
            "get_variable_83": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'bn_out'",
                            "MethodArgument"
                        ],
                        [
                            "'ln_out'",
                            "MethodArgument"
                        ],
                        [
                            "'dn_out'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_out]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer(shape, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.uniform_unit_scaling_initializer(factor=factor, seed=seed, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer(uniform=False, seed=seed, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(mean=mean, stddev=stddev, seed=seed, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(value=value, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "lambda x: tf.multiply(tf.nn.l2_loss(x), wd)",
                            "Lambda"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_332": {
                "variable": {
                    "value": "emean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ema_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_out]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_339": {
                "variable": {
                    "value": "evar",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ema_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_out]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_36": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_347": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_sub_348": {
                "variable": {
                    "value": "ema_mean_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "emean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ema_mean', shape=shape, trainable=False, dtype=dtype, initializer=tf.constant_initializer(0.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(emean - mean) * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_sub_349": {
                "variable": {
                    "value": "ema_var_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "evar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ema_var', shape=shape, trainable=False, dtype=dtype, initializer=tf.constant_initializer(1.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(evar - var) * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_350": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "init_param['mean']",
                            "Subscript"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, regularizer=reg, dtype=dtype, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'bn_out'",
                            "MethodArgument"
                        ],
                        [
                            "'ln_out'",
                            "MethodArgument"
                        ],
                        [
                            "'dn_out'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_354": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "emean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ema_mean', shape=shape, trainable=False, dtype=dtype, initializer=tf.constant_initializer(0.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "evar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ema_var', shape=shape, trainable=False, dtype=dtype, initializer=tf.constant_initializer(1.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'bn_out'",
                            "MethodArgument"
                        ],
                        [
                            "'ln_out'",
                            "MethodArgument"
                        ],
                        [
                            "'dn_out'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_386": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "identity_392": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, eps, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, emean, evar, beta, gamma, eps, name=name)",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(eps + var)",
                            "BinOp"
                        ],
                        [
                            "normed + beta",
                            "BinOp"
                        ],
                        [
                            "tf.identity(normed, name=name)",
                            "Call"
                        ],
                        [
                            "x - x_mean",
                            "BinOp"
                        ],
                        [
                            "normed / denom",
                            "BinOp"
                        ],
                        [
                            "tf.identity(normed, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'bn_out'",
                            "MethodArgument"
                        ],
                        [
                            "'ln_out'",
                            "MethodArgument"
                        ],
                        [
                            "'dn_out'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_429": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_430": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, [3], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x_mean, w_sum, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(sum_window + [1, 1]) / np.prod(np.array(sum_window))",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_432": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, eps, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, emean, evar, beta, gamma, eps, name=name)",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(eps + var)",
                            "BinOp"
                        ],
                        [
                            "normed + beta",
                            "BinOp"
                        ],
                        [
                            "tf.identity(normed, name=name)",
                            "Call"
                        ],
                        [
                            "x - x_mean",
                            "BinOp"
                        ],
                        [
                            "normed / denom",
                            "BinOp"
                        ],
                        [
                            "tf.identity(normed, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_433": {
                "variable": {
                    "value": "x2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(normed)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_434": {
                "variable": {
                    "value": "x2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x2, [3], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x2_mean, w_sup, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_sup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(sup_window + [1, 1]) / np.prod(np.array(sum_window))",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_435": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x2_mean + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_441": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, eps, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, emean, evar, beta, gamma, eps, name=name)",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(eps + var)",
                            "BinOp"
                        ],
                        [
                            "normed + beta",
                            "BinOp"
                        ],
                        [
                            "tf.identity(normed, name=name)",
                            "Call"
                        ],
                        [
                            "x - x_mean",
                            "BinOp"
                        ],
                        [
                            "normed / denom",
                            "BinOp"
                        ],
                        [
                            "tf.identity(normed, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'bn_out'",
                            "MethodArgument"
                        ],
                        [
                            "'ln_out'",
                            "MethodArgument"
                        ],
                        [
                            "'dn_out'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_47": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "init_param['mean']",
                            "Subscript"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "init_param['stddev']",
                            "Subscript"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_103": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_117": {
                "values": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_119": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_124": {
                "value": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_126": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_133": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cnn'",
                            "MethodArgument"
                        ],
                        [
                            "'mlp'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "'dn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cnn'",
                            "MethodArgument"
                        ],
                        [
                            "'mlp'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "'dn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cnn'",
                            "MethodArgument"
                        ],
                        [
                            "'mlp'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "'dn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_426": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cnn'",
                            "MethodArgument"
                        ],
                        [
                            "'mlp'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ],
                        [
                            "'dn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_unit_scaling_initializer_55": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "factor": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "init_param['factor']",
                            "Subscript"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_204": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.conv2d(h, w, strides=strides[ii], padding='SAME', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='conv_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h, name='act')",
                            "Call"
                        ],
                        [
                            "pool_fn[ii](h, pool_size[ii], strides=pool_strides[ii], padding='SAME', name='pool')",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.matmul(h, w, name='linear')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='linear_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable_cpu(filter_size[ii], init_method=init_method[ii], dtype=dtype, init_param={'mean': 0.0, 'stddev': init_std[ii]}, wd=wd, name='w', trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weight_variable_cpu(filter_size[ii], init_method='truncated_normal', dtype=dtype, init_param={'mean': 0.0, 'stddev': init_std[ii]}, wd=wd, name='w', trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weight_variable_cpu([dim_in, dim_out], init_method=init_method[ii], dtype=dtype, init_param={'mean': 0.0, 'stddev': init_std[ii]}, wd=wd, name='w', trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weight_variable_cpu([dim_in, dim_out], init_method='truncated_normal', dtype=dtype, init_param={'mean': 0.0, 'stddev': init_std[ii]}, wd=wd, name='w', trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.conv2d(h, w, strides=strides[ii], padding='SAME', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='conv_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h, name='act')",
                            "Call"
                        ],
                        [
                            "pool_fn[ii](h, pool_size[ii], strides=pool_strides[ii], padding='SAME', name='pool')",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.matmul(h, w, name='linear')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='linear_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable_cpu(filter_size[ii], init_method=init_method[ii], dtype=dtype, init_param={'mean': 0.0, 'stddev': init_std[ii]}, wd=wd, name='w', trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weight_variable_cpu(filter_size[ii], init_method='truncated_normal', dtype=dtype, init_param={'mean': 0.0, 'stddev': init_std[ii]}, wd=wd, name='w', trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weight_variable_cpu([dim_in, dim_out], init_method=init_method[ii], dtype=dtype, init_param={'mean': 0.0, 'stddev': init_std[ii]}, wd=wd, name='w', trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weight_variable_cpu([dim_in, dim_out], init_method='truncated_normal', dtype=dtype, init_param={'mean': 0.0, 'stddev': init_std[ii]}, wd=wd, name='w', trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_337": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_344": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_387": {
                "x": {
                    "value": "eps + var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_427": {
                "shape": {
                    "value": "sum_window + [1, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_428": {
                "shape": {
                    "value": "sup_window + [1, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_62": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "init_param['val']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_75": {
                "x": {
                    "value": "tf.nn.l2_loss(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(ii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_206": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.conv2d(h, w, strides=strides[ii], padding='SAME', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='conv_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h, name='act')",
                            "Call"
                        ],
                        [
                            "pool_fn[ii](h, pool_size[ii], strides=pool_strides[ii], padding='SAME', name='pool')",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.matmul(h, w, name='linear')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='linear_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable_cpu([filter_size[ii][3]], init_method='constant', dtype=dtype, init_param={'val': 0}, name='b', trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weight_variable_cpu([dim_out], init_method='constant', dtype=dtype, init_param={'val': 0.0}, name='b', trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(ii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_287": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.conv2d(h, w, strides=strides[ii], padding='SAME', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='conv_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h, name='act')",
                            "Call"
                        ],
                        [
                            "pool_fn[ii](h, pool_size[ii], strides=pool_strides[ii], padding='SAME', name='pool')",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.matmul(h, w, name='linear')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='linear_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable_cpu([filter_size[ii][3]], init_method='constant', dtype=dtype, init_param={'val': 0}, name='b', trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weight_variable_cpu([dim_out], init_method='constant', dtype=dtype, init_param={'val': 0.0}, name='b', trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_296": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.conv2d(h, w, strides=strides[ii], padding='SAME', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='conv_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h, name='act')",
                            "Call"
                        ],
                        [
                            "pool_fn[ii](h, pool_size[ii], strides=pool_strides[ii], padding='SAME', name='pool')",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.matmul(h, w, name='linear')",
                            "Call"
                        ],
                        [
                            "tf.add(h, b, name='linear_bias')",
                            "Call"
                        ],
                        [
                            "act_fn[ii](h)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "l2_loss_75": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/models/resnet_model.py": {
        "tensorflow": {
            "zeros_91": {
                "variable": {
                    "value": "self.violation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_288": {
                "variable": {
                    "value": "self._output_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(predictions, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_289": {
                "variable": {
                    "value": "self._correct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self._output_idx, self.label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_294": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_299": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_315": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_316": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_423": {
                "variable": {
                    "value": "logits_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_inference_network(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(hidden, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(output, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(h, config.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_425": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.exp(off_logits), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_432": {
                "variable": {
                    "value": "argmax_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_inference_network(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(hidden, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(output, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(h, config.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_435": {
                "variable": {
                    "value": "unmask1",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "argmax_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "argmax_439": {
                "variable": {
                    "value": "argmax_logits_margin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - unmask1 * margin",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_440": {
                "variable": {
                    "value": "unmask2",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "argmax_logits_margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_margin, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gradients_468": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xent",
                            "Name"
                        ],
                        [
                            "cost + self._decay()",
                            "BinOp"
                        ],
                        [
                            "xent",
                            "Name"
                        ],
                        [
                            "-1 * tf.reduce_mean(tf.reduce_sum(ce_collaborative * labels_t * masks, 1))",
                            "BinOp"
                        ],
                        [
                            "-1 * tf.reduce_mean(tf.reduce_sum(ce_collaborative * labels_t, 1))",
                            "BinOp"
                        ],
                        [
                            "-1 * tf.reduce_mean(tf.reduce_sum(ce_collaborative * labels_t, 1))",
                            "BinOp"
                        ],
                        [
                            "-1 * tf.reduce_mean(tf.reduce_sum(ce_collaborative * labels_t * masks, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "gate_gradients": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_731": {
                "variable": {
                    "value": "wd_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, config.height, config.width, config.num_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_inference_network(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(hidden, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(output, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(h, config.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_444": {
                "input": {
                    "value": "1 - unmask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_457": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_467": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_761": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, [batch_size, config.height, config.width, config.num_channel], 'x')",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "x + self._possible_bottleneck_downsample(orig_x, in_filter, out_filter, stride)",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter // 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter // 4, out_filter // 4, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu3', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter // 4, out_filter, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._conv('project', x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._bottleneck_residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'train_step'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "xw_plus_b_780": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, [batch_size, config.height, config.width, config.num_channel], 'x')",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "x + self._possible_bottleneck_downsample(orig_x, in_filter, out_filter, stride)",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter // 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter // 4, out_filter // 4, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu3', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter // 4, out_filter, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._conv('project', x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._bottleneck_residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_variable([d, out_dim], init_method='uniform_scaling', init_param={'factor': 1.0}, wd=self.config.wd, dtype=self.dtype, name='w')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_variable([out_dim], init_method='constant', init_param={'val': 0.0}, name='b', dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_784": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, [batch_size, config.height, config.width, config.num_channel], 'x')",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "x + self._possible_bottleneck_downsample(orig_x, in_filter, out_filter, stride)",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter // 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter // 4, out_filter // 4, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu3', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter // 4, out_filter, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._conv('project', x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._bottleneck_residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_96": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_inference_network(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(hidden, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(output, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(h, config.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size], 'y')",
                            "Call"
                        ],
                        [
                            "label",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(xent, name='xent')",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(xent, name='xent')",
                            "Call"
                        ],
                        [
                            "cost",
                            "Name"
                        ],
                        [
                            "cost",
                            "Name"
                        ]
                    ]
                },
                "name": {
                    "value": "xent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_inference_network(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(hidden, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(output, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(h, config.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_288": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "ce_collaborative",
                            "Name"
                        ],
                        [
                            "ce_collaborative",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_289": {
                "x": {
                    "value": "self._output_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "additive",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_387": {
                "name_or_scope": {
                    "value": "additional1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "logit_more1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "additional2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_416": {
                "name_or_scope": {
                    "value": "logit_more2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_425": {
                "input_tensor": {
                    "value": "tf.exp(off_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_459": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_480": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_489": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv('init_conv', x, init_filter, self.config.num_channel, filters[0], self._stride_arr(config.init_stride))",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', h)",
                            "Call"
                        ],
                        [
                            "self._relu('init_relu', h)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "concat(h, axis=3)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', h)",
                            "Call"
                        ],
                        [
                            "self._relu('final_relu', h)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(h)",
                            "Call"
                        ],
                        [
                            "res_func(h, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=True)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_551": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_560": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_592": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'train_step'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_629": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, [batch_size, config.height, config.width, config.num_channel], 'x')",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "x + self._possible_bottleneck_downsample(orig_x, in_filter, out_filter, stride)",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter // 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter // 4, out_filter // 4, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu3', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter // 4, out_filter, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._conv('project', x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._bottleneck_residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._stride_arr(1)",
                            "Call"
                        ],
                        [
                            "self._stride_arr(strides[ss])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._stride_arr(1)",
                            "Call"
                        ],
                        [
                            "self._stride_arr(strides[ss])",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_633": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, [batch_size, config.height, config.width, config.num_channel], 'x')",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "x + self._possible_bottleneck_downsample(orig_x, in_filter, out_filter, stride)",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter // 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter // 4, out_filter // 4, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu3', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter // 4, out_filter, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._conv('project', x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._bottleneck_residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_646": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_651": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_686": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_691": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_696": {
                "name_or_scope": {
                    "value": "sub3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_736": {
                "inputs": {
                    "value": "wd_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_743": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'train_step'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_758": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, [batch_size, config.height, config.width, config.num_channel], 'x')",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "x + self._possible_bottleneck_downsample(orig_x, in_filter, out_filter, stride)",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('bn1', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu1', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter // 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu2', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter // 4, out_filter // 4, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x, add_ops=add_bn_ops)",
                            "Call"
                        ],
                        [
                            "self._relu('relu3', x)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter // 4, out_filter, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "self._conv('project', x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._bottleneck_residual_inner(x, in_filter, out_filter, stride, no_activation=no_activation, add_bn_ops=add_bn_ops)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_variable([filter_size, filter_size, in_filters, out_filters], init_method=init_method, init_param=init_param, wd=self.config.wd, dtype=self.dtype, name='w')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.strides",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "costs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._intermediate_hiddens()",
                            "Call"
                        ],
                        [
                            "self._intermediate_hiddens()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._intermediate_hiddens()",
                            "Call"
                        ],
                        [
                            "self._intermediate_hiddens()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_132": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_inference_network(x)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(hidden, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(output, config.num_classes)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(h, config.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size], 'y')",
                            "Call"
                        ],
                        [
                            "label",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(xent, name='xent')",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(xent, name='xent')",
                            "Call"
                        ],
                        [
                            "cost",
                            "Name"
                        ],
                        [
                            "cost",
                            "Name"
                        ]
                    ]
                },
                "name": {
                    "value": "xent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_209": {
                "variable": {
                    "value": "ce_collaborative",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_213": {
                "variable": {
                    "value": "labels_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(y, config.num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_214": {
                "variable": {
                    "value": "self.violation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masks * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_296": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_301": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_329": {
                "name_or_scope": {
                    "value": "additional1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_347": {
                "name_or_scope": {
                    "value": "additional2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_360": {
                "name_or_scope": {
                    "value": "additional3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_425": {
                "x": {
                    "value": "off_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - logits_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_526": {
                "name_or_scope": {
                    "value": "'unit_{}_{}'.format(ss + 1, ii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_628": {
                "name_or_scope": {
                    "value": "downsample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_632": {
                "name_or_scope": {
                    "value": "pad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "additiveSM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "additive_costs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_201": {
                "variable": {
                    "value": "one_p_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta * tf.reduce_mean([tf.log(one_ps[i]) for i in ind0], 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_262": {
                "variable": {
                    "value": "ce_collaborative",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_267": {
                "variable": {
                    "value": "labels_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(y, config.num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "variable": {
                    "value": "self.violation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masks * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "additiveOneLayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "additiveOneLayer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_188": {
                "variable": {
                    "value": "one_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - tf.exp(logp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_213": {
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size], 'y')",
                            "Call"
                        ],
                        [
                            "label",
                            "Name"
                        ]
                    ]
                },
                "depth": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_256": {
                "variable": {
                    "value": "one_p_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta * tf.reduce_mean([tf.log(one_ps[i]) for i in ind0], 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "'varAddMul{}'.format(j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_217": {
                "input_tensor": {
                    "value": "tf.reduce_sum(ce_collaborative * labels_t * masks, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_219": {
                "input_tensor": {
                    "value": "tf.reduce_sum(ce_collaborative * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_267": {
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size], 'y')",
                            "Call"
                        ],
                        [
                            "label",
                            "Name"
                        ]
                    ]
                },
                "depth": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_171": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[hiddens[ind] * module_weights[ind] for ind in comb]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "'addmulfc{}'.format(j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_201": {
                "input_tensor": {
                    "value": "[tf.log(one_ps[i]) for i in ind0]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_205": {
                "x": {
                    "value": "alpha * tf.log(one_ps[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_217": {
                "input_tensor": {
                    "value": "ce_collaborative * labels_t * masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_219": {
                "input_tensor": {
                    "value": "ce_collaborative * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_239": {
                "input": {
                    "value": "1 - tf.exp(logp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_271": {
                "input_tensor": {
                    "value": "tf.reduce_sum(ce_collaborative * labels_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hiddens[ind] for ind in comb]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_175": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[hiddens[ind] for ind in comb]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "'addmulOneMore{}'.format(j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_188": {
                "x": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logps",
                            "Name"
                        ],
                        [
                            "self._compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "off_logits - tmp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_256": {
                "input_tensor": {
                    "value": "[tf.log(one_ps[i]) for i in ind0]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_260": {
                "x": {
                    "value": "alpha * tf.log(one_ps[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "input_tensor": {
                    "value": "ce_collaborative * labels_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_273": {
                "input_tensor": {
                    "value": "tf.reduce_sum(ce_collaborative * labels_t * masks, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_201": {
                "x": {
                    "value": "one_ps[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_205": {
                "x": {
                    "value": "one_ps[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_239": {
                "x": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logps",
                            "Name"
                        ],
                        [
                            "self._compute_logp(logits)",
                            "Call"
                        ],
                        [
                            "off_logits - tmp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_273": {
                "input_tensor": {
                    "value": "ce_collaborative * labels_t * masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_256": {
                "x": {
                    "value": "one_ps[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_260": {
                "x": {
                    "value": "one_ps[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/resnet/models/revnet_model.py": {
        "tensorflow": {
            "gradients_298": {
                "variable": {
                    "value": "dd1",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "y2_",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "[y1_] + gw_list",
                    "type": "BinOp",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "dy2",
                    "type": "variable",
                    "possible_values": []
                },
                "gate_gradients": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_302": {
                "variable": {
                    "value": "dd2",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "y1_",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "[x1, x2] + fw_list",
                    "type": "BinOp",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "dy1_plus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dy2_y1 + dy1",
                            "BinOp"
                        ]
                    ]
                },
                "gate_gradients": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_default_graph_338": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_341": {
                "variable": {
                    "value": "beta_final",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "unit_last/final_bn/beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_342": {
                "variable": {
                    "value": "gamma_final",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "unit_last/final_bn/gamma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_343": {
                "variable": {
                    "value": "w_final",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logit/w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_344": {
                "variable": {
                    "value": "b_final",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logit/b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_373": {
                "variable": {
                    "value": "_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(xent, name='xent')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[h1, h2] + var_final",
                    "type": "BinOp",
                    "possible_values": []
                },
                "gate_gradients": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_431": {
                "variable": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "init/init_conv/w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_432": {
                "variable": {
                    "value": "beta_init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "init/init_bn/beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_433": {
                "variable": {
                    "value": "gamma_init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "init/init_bn/gamma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_435": {
                "variable": {
                    "value": "_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_concat([h1, h2], axis=3)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', h, add_ops=False)",
                            "Call"
                        ],
                        [
                            "self._relu('final_relu', h)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(h)",
                            "Call"
                        ],
                        [
                            "(h1, h2)",
                            "Tuple"
                        ],
                        [
                            "self._saved_hidden[ss]",
                            "Subscript"
                        ],
                        [
                            "res_func(h, out_filter)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[beta_init, gamma_init, w_init]",
                            "List"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "h_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.identity(dh1), tf.identity(dh2))",
                            "Tuple"
                        ],
                        [
                            "_concat(h_grad, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_369": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fully_connected(h, config.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_371": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=self.label)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "x1_bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "x2_bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_231": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, :, n_filter // 2:]",
                            "Subscript"
                        ],
                        [
                            "y2 - f_y1",
                            "BinOp"
                        ],
                        [
                            "y2 - f_y1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradients_306": {
                "ys": {
                    "value": "x2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._possible_downsample(x2, in_filter // 2, out_filter // 2, stride)",
                            "Call"
                        ],
                        [
                            "self._possible_bottleneck_downsample(x2, in_filter // 2, out_filter // 2, stride)",
                            "Call"
                        ],
                        [
                            "self._possible_downsample(x2, in_filter // 2, out_filter // 2, stride)",
                            "Call"
                        ],
                        [
                            "self._possible_bottleneck_downsample(x2, in_filter // 2, out_filter // 2, stride)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, :, n_filter // 2:]",
                            "Subscript"
                        ],
                        [
                            "y2 - f_y1",
                            "BinOp"
                        ],
                        [
                            "y2 - f_y1",
                            "BinOp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "dy2",
                    "type": "variable",
                    "possible_values": []
                },
                "gate_gradients": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_314": {
                "variable": {
                    "value": "db1w",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "y1_",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "b1w_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda x: x is not None, map(try_get_variable, b1w_names))",
                            "Call"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "dy1_plus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dy2_y1 + dy1",
                            "BinOp"
                        ]
                    ]
                },
                "gate_gradients": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_318": {
                "variable": {
                    "value": "db2w",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "y2_",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "b2w_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda x: x is not None, map(try_get_variable, b2w_names))",
                            "Call"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "dy2",
                    "type": "variable",
                    "possible_values": []
                },
                "gate_gradients": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_323": {
                "control_inputs": {
                    "value": "dw_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(dfw) + list(dgw)",
                            "BinOp"
                        ],
                        [
                            "dw_list + list(db2w)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_360": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_362": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_366": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_368": {
                "name_or_scope": {
                    "value": "costs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_377": {
                "control_inputs": {
                    "value": "_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cost, [h1, h2] + var_final, gate_gradients=True)",
                            "Call"
                        ],
                        [
                            "_grads[2:]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(h, var_init, h_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_384": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "x2_bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_269": {
                "name": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_277": {
                "name": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_288": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_324": {
                "input": {
                    "value": "dx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dd2[1]",
                            "Subscript"
                        ],
                        [
                            "dx2 + tf.gradients(x2_, x2, dy2, gate_gradients=True)[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_378": {
                "input": {
                    "value": "dh2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_403": {
                "name_or_scope": {
                    "value": "'unit_{}_{}'.format(ss + 1, ii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tuple_451": {
                "tensors": {
                    "value": "grads_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "imagerecognition/resnet/models/revnet_model_tests.py": {
        "tensorflow": {
            "main_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imagerecognition/tools/build_imagenet_data.py": {
        "tensorflow": {
            "DEFINE_string_84": {
                "name": {
                    "value": "train_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_86": {
                "name": {
                    "value": "validation_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_88": {
                "name": {
                    "value": "output_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_91": {
                "name": {
                    "value": "train_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in training TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_93": {
                "name": {
                    "value": "validation_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in validation TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_96": {
                "name": {
                    "value": "num_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to preprocess the images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_107": {
                "name": {
                    "value": "labels_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_lsvrc_2015_synsets.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Labels file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_120": {
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_metadata.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "ImageNet metadata file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_136": {
                "name": {
                    "value": "bounding_box_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./imagenet_2012_bounding_boxes.csv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Bounding box file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Example_193": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_422": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_584": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_611": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bounding_box_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Feature_147": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_154": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_159": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_217": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_220": {
                "variable": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_221": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_222": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_225": {
                "variable": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_226": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_227": {
                "variable": {
                    "value": "self._cmyk_to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_230": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_231": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordWriter_356": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_directory, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_482": {
                "variable": {
                    "value": "matching_files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "jpeg_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/%s/*.JPEG' % (data_dir, synset)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "run_657": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_295": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames[i]",
                            "Subscript"
                        ],
                        [
                            "parts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Int64List_147": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_154": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_159": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_193": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FastGFile_470": {
                "name": {
                    "value": "labels_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}