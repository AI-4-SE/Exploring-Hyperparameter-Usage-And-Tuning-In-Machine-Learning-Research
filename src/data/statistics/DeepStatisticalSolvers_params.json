{
    "main.py": {
        "tensorflow": {
            "set_verbosity_11": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_79": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_83": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_71": {
                "seed": {
                    "value": "args.rdm_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers.py": {
        "tensorflow": {
            "linspace_25": {
                "variable": {
                    "value": "indices_batch_float",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(n_samples, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(params)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(params)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(h)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_27": {
                "variable": {
                    "value": "indices_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices_batch_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, tf.cast(n_samples, tf.float32) - 1.0, n_samples)",
                            "Call"
                        ],
                        [
                            "tf.linspace(0.0, tf.cast(n_samples, tf.float32) - 1.0, n_samples)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "indices_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_nodes * indices_batch + indices_edges",
                            "BinOp"
                        ],
                        [
                            "n_nodes * indices_batch + indices_edges",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "params_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, d_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_39": {
                "variable": {
                    "value": "gathered_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(params, [-1, d_out])",
                            "Call"
                        ],
                        [
                            "tf.reshape(params, [n_samples * n_edges, d_F])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gathered_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(params_flat, indices_flat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_samples, n_edges, d_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_66": {
                "variable": {
                    "value": "indices_batch_float",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(n_samples, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(params)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(params)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(h)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_68": {
                "variable": {
                    "value": "indices_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices_batch_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, tf.cast(n_samples, tf.float32) - 1.0, n_samples)",
                            "Call"
                        ],
                        [
                            "tf.linspace(0.0, tf.cast(n_samples, tf.float32) - 1.0, n_samples)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "indices_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_nodes * indices_batch + indices_edges",
                            "BinOp"
                        ],
                        [
                            "n_nodes * indices_batch + indices_edges",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "params_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_samples * n_edges, d_F]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_80": {
                "variable": {
                    "value": "scattered_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "params_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(params, [-1, d_out])",
                            "Call"
                        ],
                        [
                            "tf.reshape(params, [n_samples * n_edges, d_F])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_samples * n_nodes, d_F]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "scattered",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scattered_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices_flat, params_flat, shape=[n_samples * n_nodes, d_F])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_samples, n_nodes, d_F]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)]",
                            "BinOp"
                        ],
                        [
                            "self.non_lin(tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_19": {
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_21": {
                "input": {
                    "value": "indices_edges",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_22": {
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_28": {
                "input": {
                    "value": "indices_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices_batch_float, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices_batch, 1) * tf.ones([1, n_edges], dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(indices_batch_float, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices_batch, 1) * tf.ones([1, n_edges], dtype=tf.int32)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_28": {
                "shape": {
                    "value": "[1, n_edges]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_63": {
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "input": {
                    "value": "indices_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices_batch_float, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices_batch, 1) * tf.ones([1, n_edges], dtype=tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(indices_batch_float, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices_batch, 1) * tf.ones([1, n_edges], dtype=tf.int32)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_69": {
                "shape": {
                    "value": "[1, n_edges]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_149": {
                "variable": {
                    "value": "self.W[str(layer)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_' + self.name + '_{}'.format(layer)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[left_dim, right_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(dtype=tf.float32, uniform=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "self.b[str(layer)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_' + self.name + '_{}'.format(layer)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, right_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(dtype=tf.float32, uniform=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)]",
                            "BinOp"
                        ],
                        [
                            "self.non_lin(tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_samples, n_elem, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_25": {
                "x": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(params)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(params)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(h)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(params)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(params)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(h)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_169": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)]",
                            "BinOp"
                        ],
                        [
                            "self.non_lin(tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_170": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)]",
                            "BinOp"
                        ],
                        [
                            "self.non_lin(tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_171": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)]",
                            "BinOp"
                        ],
                        [
                            "self.non_lin(tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_180": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)]",
                            "BinOp"
                        ],
                        [
                            "self.non_lin(tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W[str(layer)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)]",
                            "BinOp"
                        ],
                        [
                            "self.non_lin(tf.matmul(h, self.W[str(layer)]) + self.b[str(layer)])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W[str(layer)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/models.py": {
        "tensorflow": {
            "TFRecordDataset_191": {
                "variable": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[os.path.join(default_data_directory, 'train.tfrecords')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_194": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[os.path.join(default_data_directory, 'val.tfrecords')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.A_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.minibatch_size_, -1, self.d_in_A + 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.B_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.minibatch_size_, -1, self.d_in_B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "self.U_gt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.U_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.minibatch_size_, -1, self.d_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_237": {
                "variable": {
                    "value": "self.indices_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.A[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_238": {
                "variable": {
                    "value": "self.indices_to",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.A[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_241": {
                "variable": {
                    "value": "self.mask_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(self.indices_from, self.indices_to)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_242": {
                "variable": {
                    "value": "self.mask_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_248": {
                "variable": {
                    "value": "self.discount",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_266": {
                "variable": {
                    "value": "self.H[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.minibatch_size_tf, self.num_nodes, self.latent_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_346": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_348": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_355": {
                "variable": {
                    "value": "(self.gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "self.gradients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_365": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_472": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.trainable_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_502": {
                "variable": {
                    "value": "self.training_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(self.directory, 'train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_506": {
                "variable": {
                    "value": "self.validation_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(self.directory, 'val')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_93": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.trainable_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_187": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "tfrecord",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'A': tf.io.FixedLenSequenceFeature([], tf.float32, allow_missing=True), 'B': tf.io.FixedLenSequenceFeature([], tf.float32, allow_missing=True), 'U': tf.io.FixedLenSequenceFeature([], tf.float32, allow_missing=True)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "concat_279": {
                "variable": {
                    "value": "self.Phi_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.H_from, self.H_to, self.a_ij]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_301": {
                "variable": {
                    "value": "self.correction_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.H[str(update)], self.Phi_from_sum, self.Phi_to_sum, self.Phi_loop_sum, self.b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_326": {
                "variable": {
                    "value": "self.loss[str(update + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.cost_per_sample[str(update + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_364": {
                "name": {
                    "value": "loss_final",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_final",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunOptions_518": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_519": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_output_types_199": {
                "dataset_or_iterator": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_211": {
                "input": {
                    "value": "self.A_flat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_217": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_218": {
                "input": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_219": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_220": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_223": {
                "shape": {
                    "value": "[self.minibatch_size_tf, self.num_edges, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "tensor": {
                    "value": "tf.constant(self.A_mean, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 2 + self.d_in_A]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_225": {
                "shape": {
                    "value": "[self.minibatch_size_tf, self.num_edges, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "tensor": {
                    "value": "tf.constant(self.A_std, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 2 + self.d_in_A]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_227": {
                "shape": {
                    "value": "[self.minibatch_size_tf, self.num_nodes, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "tensor": {
                    "value": "tf.constant(self.B_mean, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, self.d_in_B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_229": {
                "shape": {
                    "value": "[self.minibatch_size_tf, self.num_nodes, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "tensor": {
                    "value": "tf.constant(self.B_std, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, self.d_in_B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_241": {
                "x": {
                    "value": "self.indices_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.indices_to",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_249": {
                "var_list": {
                    "value": "[self.discount]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_262": {
                "shape": {
                    "value": "[self.minibatch_size_tf, self.num_nodes, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "tensor": {
                    "value": "tf.constant(self.initial_U, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, self.d_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_320": {
                "variable": {
                    "value": "self.loss_proxy[str(update + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(self.U[str(update + 1)] - self.U_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_327": {
                "name": {
                    "value": "'loss_{}'.format(update + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss[str(update + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variables_initializer_347": {
                "var_list": {
                    "value": "[self.learning_rate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variables_initializer_361": {
                "var_list": {
                    "value": "self.optimizer.variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_99": {
                "var_list": {
                    "value": "self.trainable_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_181": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_182": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_183": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_224": {
                "value": {
                    "value": "self.A_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_226": {
                "value": {
                    "value": "self.A_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_228": {
                "value": {
                    "value": "self.B_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_230": {
                "value": {
                    "value": "self.B_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_263": {
                "value": {
                    "value": "self.initial_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}