{
    "src/losses.py": {
        "sklearn": {},
        "torch": {
            "MSELoss_18": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_20": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_25": {
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/test.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_138": {
                "variable": {
                    "value": "test_loader_sketch",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test_sketch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorSketch(args.dataset, root_path, sketch_dir, sketch_sd, splits['te_fls_sk'], splits['te_clss_sk'], transforms=transform_sketch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "test_loader_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorImage(args.dataset, root_path, photo_dir, photo_sd, splits['te_fls_im'], splits['te_clss_im'], transforms=transform_image)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path_cp, 'model_best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "sklearn": {},
        "torch": {
            "save_53": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'checkpoint.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data.py": {
        "torch": {}
    },
    "src/logger.py": {
        "torch": {}
    },
    "src/models.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.classifier.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.classifier_sk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_clss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.classifier_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_clss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.classifier_se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_clss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_196": {
                "variable": {
                    "value": "self.optimizer_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.gen_sk2se.parameters()) + list(self.gen_im2se.parameters()) + list(self.gen_se2sk.parameters()) + list(self.gen_se2im.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_199": {
                "variable": {
                    "value": "self.optimizer_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.disc_se.parameters()) + list(self.disc_sk.parameters()) + list(self.disc_im.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_201": {
                "variable": {
                    "value": "self.optimizer_ae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.aut_enc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "100 * self.lr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_202": {
                "variable": {
                    "value": "self.scheduler_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_204": {
                "variable": {
                    "value": "self.scheduler_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_206": {
                "variable": {
                    "value": "self.scheduler_ae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_ae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_224": {
                "variable": {
                    "value": "self.criterion_cyc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_225": {
                "variable": {
                    "value": "self.criterion_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_226": {
                "variable": {
                    "value": "self.criterion_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "self.sk_fe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "self.sk_em",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "self.im_fe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "self.im_em",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "self.se_em_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "self.se_em_rec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "self.im2se_em",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "self.sk2se_em",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "self.se2im_em",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "self.se2sk_em",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "variable": {
                    "value": "self.im_em_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "self.sk_em_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "self.se_em_hat1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "self.se_em_hat2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_248": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'model_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_354": {
                "variable": {
                    "value": "num_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "utils.numeric_classes(cl, self.dict_clss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_363": {
                "variable": {
                    "value": "se",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "se",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(cl), self.sem_dim), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(se)",
                            "Call"
                        ],
                        [
                            "se.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_46": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_54": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_93": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_99": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_45": {
                "num_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_50": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_53": {
                "num_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_58": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_92": {
                "num_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_95": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_98": {
                "num_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((in_dim + out_dim) / 2)",
                            "Call"
                        ],
                        [
                            "int(in_dim / 2)",
                            "Call"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "steps_down[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "steps_down[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "steps_up[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "steps_up[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_276": {
                "input": {
                    "value": "self.aut_enc.enc[l].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "WeightedRandomSampler_148": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "data_train.get_weights()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "args.epoch_size * args.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorPaired(args.dataset, root_path, photo_dir, sketch_dir, photo_sd, sketch_sd, splits['tr_fls_sk'], splits['tr_fls_im'], splits['tr_clss_im'], transforms_sketch=transform_sketch, transforms_image=transform_image)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(data_train.get_weights(), num_samples=args.epoch_size * args.batch_size, replacement=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "valid_loader_sketch",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_valid_sketch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorSketch(args.dataset, root_path, sketch_dir, sketch_sd, splits['va_fls_sk'], splits['va_clss_sk'], transforms=transform_sketch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "valid_loader_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_valid_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorImage(args.dataset, root_path, photo_dir, photo_sd, splits['va_fls_im'], splits['va_clss_im'], transforms=transform_image)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "test_loader_sketch",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test_sketch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorSketch(args.dataset, root_path, sketch_dir, sketch_sd, splits['te_fls_sk'], splits['te_clss_sk'], transforms=transform_sketch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "test_loader_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorImage(args.dataset, root_path, photo_dir, photo_sd, splits['te_fls_im'], splits['te_clss_im'], transforms=transform_image)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_270": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path_cp, 'model_best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/train_image.py": {
        "torch": {
            "WeightedRandomSampler_117": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.DoubleTensor(utils.class_weights(tr_clss))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(data_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorImage(args.dataset, root_path, photo_dir, photo_sd, splits['tr_fls_im'], tr_clss, transforms=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(weights, num_samples=len(data_train))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorImage(args.dataset, root_path, photo_dir, photo_sd, splits['va_fls_im'], va_clss, transforms=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorImage(args.dataset, root_path, photo_dir, photo_sd, splits['te_fls_im'], te_clss, transforms=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_145": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path_cp, 'model_best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_66": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/train_sketch.py": {
        "torch": {
            "WeightedRandomSampler_114": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.DoubleTensor(utils.class_weights(tr_clss))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(data_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorSketch(args.dataset, root_path, sketch_dir, sketch_sd, splits['tr_fls_sk'], tr_clss, transforms=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(weights, num_samples=len(data_train))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorSketch(args.dataset, root_path, sketch_dir, sketch_sd, splits['va_fls_sk'], va_clss, transforms=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataGeneratorSketch(args.dataset, root_path, sketch_dir, sketch_sd, splits['te_fls_sk'], te_clss, transforms=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_142": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path_cp, 'model_best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_66": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}