{
    "model.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "x + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "x + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.W_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.W_K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.W_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.W_O",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_V(input).view(batch_size, num_agents, self.num_heads, -1).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRUCell_77": {
                "variable": {
                    "value": "self.update_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.obs_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.input_shape[0], cnn_channel, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRUCell_144": {
                "variable": {
                    "value": "self.recurrent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "configs.hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "configs.hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "dist_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_agents, num_agents)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bitwise_and_185": {
                "variable": {
                    "value": "comm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_obs_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pos_mat <= configs.obs_radius).all(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dist_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((num_agents, num_agents), dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_195": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_val + adv_val - adv_val.mean(1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "state_val + adv_val - adv_val.mean(1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "hidden_buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hidden_buffer).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_229": {
                "variable": {
                    "value": "hidden_buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q_s.float(), k_s.float().transpose(-1, -2)) / self.output_dim ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "autocast_58": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(comm_idx[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_111": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "update_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm_mask.sum(dim=-1) > 1",
                            "Compare"
                        ],
                        [
                            "update_mask.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "update_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.update_cell(info.view(-1, self.output_dim), latent.view(-1, self.input_dim)).view(configs.batch_size, num_agents, self.input_dim)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(update_mask, update_info, latent)",
                            "Call"
                        ],
                        [
                            "self.obs_encoder(obs)",
                            "Call"
                        ],
                        [
                            "self.obs_encoder(obs)",
                            "Call"
                        ],
                        [
                            "latent.view(configs.batch_size * num_agents, max_steps, self.latent_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "self.input_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "configs.cnn_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "cnn_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "configs.cnn_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_59": {
                "input": {
                    "value": "q_s.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_s.float().transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_232": {
                "start": {
                    "value": "configs.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "configs.test_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_20": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_207": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/{}.pth'.format(model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_116": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'./models/{}.pth'.format(model_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_143": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'./models/{}.pth'.format(model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_184": {
                "data": {
                    "value": "pos.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "ndarray": {
                    "value": "pos.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "worker.py": {
        "torch": {
            "device_268": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_272": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_273": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[200000, 400000]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradScaler_296": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "ndarray": {
                    "value": "np.stack(b_obs).astype(np.float16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_173": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_174": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_176": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "np.concatenate(b_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "np.stack(b_comm_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(priorities / min_p, -self.beta)",
                            "Call"
                        ],
                        [
                            "weights.to(self.device)",
                            "Call"
                        ],
                        [
                            "ray.get(weights_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_182": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__330": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_390": {
                "ndarray": {
                    "value": "pos.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(configs.save_path, '{}.pth'.format(self.counter))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_407": {
                "ndarray": {
                    "value": "next_pos.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}