{
    "metric/kid_score.py": {
        "sklearn": {
            "polynomial_kernel_194": {
                "variable": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codes_g",
                            "variable"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "coef0": {
                    "value": "coef0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "polynomial_kernel_195": {
                "variable": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codes_r",
                            "variable"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "coef0": {
                    "value": "coef0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "polynomial_kernel_196": {
                "variable": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codes_g",
                            "variable"
                        ]
                    ]
                },
                "Y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codes_r",
                            "variable"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "coef0": {
                    "value": "coef0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_83": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(files[start:end]) + 1",
                            "BinOp"
                        ],
                        [
                            "images / 2.0",
                            "BinOp"
                        ],
                        [
                            "[np.array(Image.open(str(f))) for f in files[start:end]]",
                            "ListComp"
                        ],
                        [
                            "np.stack(images).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_90": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "common.py": {
        "torch": {}
    },
    "data/__init__.py": {
        "torch": {}
    },
    "data/base_dataset.py": {
        "torch": {}
    },
    "distillers/base_inception_distiller.py": {
        "torch": {
            "Adam_205": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.netG_student.parameters()}, {'params': itertools.chain(*G_params)}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_212": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "L1Loss_172": {
                "variable": {
                    "value": "self.criterionRecon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.Sfake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_174": {
                "variable": {
                    "value": "self.criterionRecon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "netA",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fs * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ft * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_231": {
                "variable": {
                    "value": "self.drn_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.drn_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_396": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_176": {
                "variable": {
                    "value": "self.criterionRecon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_376": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_371": {
                "obj": {
                    "value": "net.module.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_373": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "distillers/base_spade_distiller.py": {
        "torch": {
            "save_221": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distillers/inception_distiller.py": {
        "torch": {
            "cat_163": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.Sfake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_129": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.mse_loss(Sact, Tact) for (Sact, Tact) in zip(Sacts, Tacts)]",
                            "ListComp"
                        ],
                        [
                            "gather(loss, self.gpu_ids[0]).sum()",
                            "Call"
                        ],
                        [
                            "F.mse_loss(Sact, Tact)",
                            "Call"
                        ],
                        [
                            "[-KA(Sact, Tact) for (Sact, Tact) in zip(Sacts, Tacts)]",
                            "ListComp"
                        ],
                        [
                            "gather(loss, self.gpu_ids[0]).sum()",
                            "Call"
                        ],
                        [
                            "-KA(Sact, Tact)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_134": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Sacts[n + str(netA.weight.device)]",
                            "Subscript"
                        ],
                        [
                            "netA(Sact)",
                            "Call"
                        ],
                        [
                            "self.Sacts[n + str(netA.weight.device)]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "Tact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Tacts[n + str(netA.weight.device)]",
                            "Subscript"
                        ],
                        [
                            "self.Tacts[n + str(netA.weight.device)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_148": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.mse_loss(Sact, Tact) for (Sact, Tact) in zip(Sacts, Tacts)]",
                            "ListComp"
                        ],
                        [
                            "gather(loss, self.gpu_ids[0]).sum()",
                            "Call"
                        ],
                        [
                            "F.mse_loss(Sact, Tact)",
                            "Call"
                        ],
                        [
                            "[-KA(Sact, Tact) for (Sact, Tact) in zip(Sacts, Tacts)]",
                            "ListComp"
                        ],
                        [
                            "gather(loss, self.gpu_ids[0]).sum()",
                            "Call"
                        ],
                        [
                            "-KA(Sact, Tact)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_148": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_126": {
                "input": {
                    "value": "Sact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Sacts[n + str(netA.weight.device)]",
                            "Subscript"
                        ],
                        [
                            "netA(Sact)",
                            "Call"
                        ],
                        [
                            "self.Sacts[n + str(netA.weight.device)]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "Tact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Tacts[n + str(netA.weight.device)]",
                            "Subscript"
                        ],
                        [
                            "self.Tacts[n + str(netA.weight.device)]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "distillers/spade_distiller.py": {
        "torch": {
            "empty_cache_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "get_real_stat.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tensors, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(tensors).astype(float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_26": {
                "type": {
                    "value": "'cuda:{}'.format(opt.gpu_ids[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_27": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_133": {
                "device": {
                    "value": "gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "metric/__init__.py": {
        "torch": {
            "cat_13": {
                "variable": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(reals, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(reals).astype(float)",
                            "Call"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fakes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.cat(fakes, dim=0)",
                            "Call"
                        ],
                        [
                            "util.tensor2im(fakes)",
                            "Call"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ],
                        [
                            "fakes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "metric/cityscapes_mIoU.py": {
        "torch": {
            "DataLoader_220": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SegList(fakes, names, table_path, data_dir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_138": {
                "variable": {
                    "value": "pmodel",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drn.__dict__.get(model_name)(pretrained=pretrained, num_classes=1000)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "model.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_144": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_150": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_152": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "np.array(label, dtype=np.int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "metric/deeplabv2.py": {
        "torch": {
            "relu_28": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reduce(x)",
                            "Call"
                        ],
                        [
                            "self.conv3x3(h)",
                            "Call"
                        ],
                        [
                            "self.increase(h)",
                            "Call"
                        ],
                        [
                            "h + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=p, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_156": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scales",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_39": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_149": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_163": {
                "input": {
                    "value": "torch.stack(logits_all)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate in enumerate(rates)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate in enumerate(rates)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_163": {
                "tensors": {
                    "value": "logits_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[logits] + [interp(logit) for logit in logits_pyramid]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "metric/drn.py": {
        "torch": {
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_330": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_336": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_337": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_338": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_351": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_352": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_205": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_365": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_381": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, channels[0], kernel_size=7, stride=1, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_366": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_371": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_271": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "metric/fid_score.py": {
        "torch": {
            "from_numpy_135": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "imread(str(files[start]))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(images, cv2.COLOR_BGR2GRAY)",
                            "Call"
                        ],
                        [
                            "np.array([images.astype(np.float32)])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ],
                        [
                            "ims[start:end]",
                            "Subscript"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "imread(str(files[start]))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(images, cv2.COLOR_BGR2GRAY)",
                            "Call"
                        ],
                        [
                            "np.array([images.astype(np.float32)])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ],
                        [
                            "ims[start:end]",
                            "Subscript"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_142": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ],
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_207": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ],
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metric/inception.py": {
        "torch": {
            "ModuleList_69": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_192": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_221": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_255": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_289": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_200": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_86": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_106": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "metric/mIoU_score.py": {
        "torch": {
            "DataLoader_221": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SegList(fakes, names, table_path, data_dir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_138": {
                "variable": {
                    "value": "pmodel",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drn.__dict__.get(model_name)(pretrained=pretrained, num_classes=1000)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "model.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_144": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_150": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_152": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "np.array(label, dtype=np.int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_model.py": {
        "torch": {
            "device_38": {
                "type": {
                    "value": "'cuda:{}'.format(self.gpu_ids[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_208": {
                "obj": {
                    "value": "net.module.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_210": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/cycle_gan_model.py": {
        "torch": {
            "L1Loss_181": {
                "variable": {
                    "value": "self.criterionCycle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_182": {
                "variable": {
                    "value": "self.criterionIdt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_184": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self.netG_A.parameters(), self.netG_B.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_188": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self.netD_A.parameters(), self.netD_B.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/discriminators.py": {
        "torch": {
            "Sequential_75": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_213": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_D_input_nc(opt)",
                            "Call"
                        ],
                        [
                            "opt.semantic_nc + opt.output_nc",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_D_input_nc(opt)",
                            "Call"
                        ],
                        [
                            "opt.semantic_nc + opt.output_nc",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_D_input_nc(opt)",
                            "Call"
                        ],
                        [
                            "opt.semantic_nc + opt.output_nc",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_146": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "*sequence[n]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_160": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if n == opt.n_layers_D - 1 else 2",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/modules/inception_architecture/inception_generator.py": {
        "torch": {
            "Sequential_133": {
                "variable": {
                    "value": "self.down_sampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*down_sampling",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.up_sampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*up_sampling",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_38": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_130": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_120": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/inception_architecture/inception_spade_generator.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_45": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc_norm(x)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.head_0.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.G_middle_0.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.G_middle_1.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_0.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_1.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_2.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_3.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_4.remove_spectral_norm()",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc_norm(x)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.head_0.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.G_middle_0.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.G_middle_1.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_0.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_1.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_2.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_3.remove_spectral_norm()",
                            "Call"
                        ],
                        [
                            "self.up_4.remove_spectral_norm()",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/inception_modules.py": {
        "torch": {
            "ModuleList_128": {
                "variable": {
                    "value": "res_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "dw_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_294": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "remove_spectral_norm_315": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_329": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "remove_spectral_norm_342": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_429": {
                "variable": {
                    "value": "res_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_452": {
                "variable": {
                    "value": "dw_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_652": {
                "variable": {
                    "value": "res_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_674": {
                "variable": {
                    "value": "dw_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_750": {
                "variable": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "segmap",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_306": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_336": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_485": {
                "variable": {
                    "value": "shortcut",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.norm_layer(self.input_dim, affine=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_144": {
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "midp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_450": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_482": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_668": {
                "in_channels": {
                    "value": "midp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(k - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_672": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_697": {
                "in_channels": {
                    "value": "midp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_698": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "midp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/loss.py": {
        "torch": {
            "grad_136": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(interpolatesv)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolatesv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_data",
                            "variable"
                        ],
                        [
                            "fake_data",
                            "variable"
                        ],
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_191": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_32": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_28": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_34": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_128": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_139": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "new_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_86": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_90": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-prediction - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_95": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction",
                            "Method Argument"
                        ],
                        [
                            "prediction",
                            "Method Argument"
                        ],
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_88": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(prediction - 1, self.get_zero_tensor(prediction))",
                            "Call"
                        ],
                        [
                            "torch.min(-prediction - 1, self.get_zero_tensor(prediction))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_92": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(prediction - 1, self.get_zero_tensor(prediction))",
                            "Call"
                        ],
                        [
                            "torch.min(-prediction - 1, self.get_zero_tensor(prediction))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/modules/spade_architecture/normalization.py": {
        "torch": {
            "spectral_norm_26": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spectral_norm(layer)",
                            "Call"
                        ],
                        [
                            "layer",
                            "Method Argument"
                        ],
                        [
                            "layer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_42": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/spade_modules/base_spade_distiller_modules.py": {
        "torch": {
            "ModuleList_73": {
                "variable": {
                    "value": "self.netAs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_86": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netG_student.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(netA.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.lr",
                            "Attribute"
                        ],
                        [
                            "self.opt.lr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.netD.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.lr",
                            "Attribute"
                        ],
                        [
                            "self.opt.lr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "netA",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.student_ngf * 16",
                            "BinOp"
                        ],
                        [
                            "opt.student_ngf * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.teacher_ngf * 16",
                            "BinOp"
                        ],
                        [
                            "opt.teacher_ngf * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/modules/spade_modules/spade_distiller_modules.py": {
        "torch": {
            "mse_loss_25": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sacts[layer]",
                            "Subscript"
                        ],
                        [
                            "netA(Sact)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Tact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Tacts[layer]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/modules/spade_modules/spade_model_modules.py": {
        "torch": {
            "Adam_59": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.netG.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.lr",
                            "Attribute"
                        ],
                        [
                            "self.opt.lr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.netD.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.lr",
                            "Attribute"
                        ],
                        [
                            "self.opt.lr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_45": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_174": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/modules/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_70": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean if self.track_running_stats else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var if self.track_running_stats else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training if self.track_running_stats else True",
                    "type": "IfExp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/modules/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "models/modules/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "LambdaLR_87": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_89": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_161": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ],
                        [
                            "InceptionGenerator(input_nc, output_nc, ngf=ngf, channels=opt.channels, channels_reduction_factor=opt.channels_reduction_factor, kernel_sizes=opt.kernel_sizes, norm_layer=norm_layer, norm_momentum=opt.norm_momentum, norm_epsilon=opt.norm_epsilon, dropout_rate=dropout_rate, active_fn=opt.active_fn, n_blocks=9)",
                            "Call"
                        ],
                        [
                            "InceptionSPADEGenerator(opt)",
                            "Call"
                        ],
                        [
                            "MultiscaleDiscriminator(opt)",
                            "Call"
                        ],
                        [
                            "NLayerDiscriminator(input_nc, ndf, n_layers_D, norm_layer=norm_layer, active_fn=opt.active_fn_D)",
                            "Call"
                        ],
                        [
                            "PixelDiscriminator(input_nc, ndf, norm_layer=norm_layer, active_fn=opt.active_fn_D)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_93": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_99": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "opt.niter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/pix2pix_model.py": {
        "torch": {
            "Adam_111": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "fake_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "real_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "fake_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_103": {
                "variable": {
                    "value": "self.criterionRecon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_105": {
                "variable": {
                    "value": "self.criterionRecon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_133": {
                "variable": {
                    "value": "self.drn_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.drn_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_107": {
                "variable": {
                    "value": "self.criterionRecon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/spade_model.py": {
        "torch": {
            "zeros_152": {
                "variable": {
                    "value": "input_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, nc, h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "input_semantics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_342": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "onnx_exporter.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_35": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_109": {
                "variable": {
                    "value": "data_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, opt.data_channel, opt.data_height, opt.data_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_143": {
                "variable": {
                    "value": "rand_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "opt.data_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "opt.data_height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "opt.data_width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_227": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "profiler.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_35": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_106": {
                "variable": {
                    "value": "data_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, opt.data_channel, opt.data_height, opt.data_width]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_35": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/common.py": {
        "torch": {
            "load_50": {
                "variable": {
                    "value": "pretrained_studentG_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pretrained_student_G_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "netG_tmp.up_sampling[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "model.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.netG_student.parameters()}, {'params': itertools.chain(*G_params)}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_184": {
                "variable": {
                    "value": "pretrained_studentG_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pretrained_student_G_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "variable": {
                    "value": "netG_tmp.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_263": {
                "variable": {
                    "value": "netG_tmp.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "ModuleList_282": {
                "variable": {
                    "value": "netAs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_301": {
                "variable": {
                    "value": "modules_on_one_gpu.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(modules_on_one_gpu.netG_student.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(netA.parameters())",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(modules_on_one_gpu.netG_student.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ],
                        [
                            "opt.lr / 2",
                            "BinOp"
                        ],
                        [
                            "opt.lr",
                            "Attribute"
                        ],
                        [
                            "opt.lr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ds_weight_list + ft_weight_list + us_weight_list",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_652": {
                "variable": {
                    "value": "netG_to_prune.up_sampling[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "Adam_689": {
                "variable": {
                    "value": "model.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.netG_student.parameters()}, {'params': itertools.chain(*G_params)}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_729": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fc_norm_weight_list + ft_weight_list",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_835": {
                "variable": {
                    "value": "netAs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_854": {
                "variable": {
                    "value": "modules_on_one_gpu.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(modules_on_one_gpu.netG_student.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(netA.parameters())",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(modules_on_one_gpu.netG_student.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ],
                        [
                            "opt.lr / 2",
                            "BinOp"
                        ],
                        [
                            "opt.lr",
                            "Attribute"
                        ],
                        [
                            "opt.lr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "netG_tmp.down_sampling[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_119": {
                "variable": {
                    "value": "netG_tmp.up_sampling[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.up_sampling[idx - 1].output_padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].output_padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].output_padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "DataParallel_144": {
                "variable": {
                    "value": "model.netG_student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.netG_student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "netA_new",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf_netA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "netA.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "netA.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_288": {
                "variable": {
                    "value": "netA_new",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf_stu * 16",
                            "BinOp"
                        ],
                        [
                            "ngf_stu * 4",
                            "BinOp"
                        ],
                        [
                            "ngf_stu * 16",
                            "BinOp"
                        ],
                        [
                            "ngf_stu * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.teacher_ngf * 16",
                            "BinOp"
                        ],
                        [
                            "opt.teacher_ngf * 4",
                            "BinOp"
                        ],
                        [
                            "opt.teacher_ngf * 16",
                            "BinOp"
                        ],
                        [
                            "opt.teacher_ngf * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_418": {
                "variable": {
                    "value": "netG_to_prune.up_sampling[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_502": {
                "variable": {
                    "value": "netG_to_prune.down_sampling[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_632": {
                "variable": {
                    "value": "netG_to_prune.up_sampling[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.up_sampling[idx - 1].output_padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].output_padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].output_padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "synchronize_665": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_669": {
                "variable": {
                    "value": "model.netG_student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.netG_student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_681": {
                "variable": {
                    "value": "netA_new",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf_netA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "netA.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "netA.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_711": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_754": {
                "variable": {
                    "value": "netG_to_prune.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_801": {
                "variable": {
                    "value": "netG_to_prune.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "synchronize_826": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_841": {
                "variable": {
                    "value": "netA_new",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf_stu * 16",
                            "BinOp"
                        ],
                        [
                            "ngf_stu * 4",
                            "BinOp"
                        ],
                        [
                            "ngf_stu * 16",
                            "BinOp"
                        ],
                        [
                            "ngf_stu * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.teacher_ngf * 16",
                            "BinOp"
                        ],
                        [
                            "opt.teacher_ngf * 4",
                            "BinOp"
                        ],
                        [
                            "opt.teacher_ngf * 16",
                            "BinOp"
                        ],
                        [
                            "opt.teacher_ngf * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "variable": {
                    "value": "netG_to_prune.down_sampling[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_404": {
                "variable": {
                    "value": "netG_to_prune.up_sampling[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "netG_tmp.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_tmp.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "netG_to_prune.fc.in_channels",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_studentG_state[f'down_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state[f'up_sampling.{idx}.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "pretrained_studentG_state['fc.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_studentG_state['fc_norm.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "netG_tmp.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "min(out_channels, getattr(opt, 'prune_cin_ub', float('inf')))",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_ft_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels, getattr(opt, 'prune_cin_lb', 1))",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].out_channels",
                            "Attribute"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "out_mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "mask.detach().sum().item()",
                            "Call"
                        ],
                        [
                            "max(out_channels // ch_div, getattr(opt, 'prune_cin_lb', 1)) * ch_div",
                            "BinOp"
                        ],
                        [
                            "min(out_channels // ch_div, getattr(opt, 'prune_cin_ub', float('inf'))) * ch_div",
                            "BinOp"
                        ],
                        [
                            "netG_to_prune.conv_img.out_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.kernel_size",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.stride",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_tmp.conv_img.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.fc.padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.conv_img.padding",
                            "Attribute"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.up_sampling[idx - 1].output_padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].output_padding",
                            "Attribute"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].output_padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netG_tmp.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_tmp.conv_img.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[-2].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.down_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.up_sampling[idx - 1].bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.fc.bias is not None",
                            "Compare"
                        ],
                        [
                            "netG_to_prune.conv_img.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "DataParallel_425": {
                "variable": {
                    "value": "netG_to_prune",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG_to_prune",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(netG_tmp)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(netG_tmp)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netG_to_prune, opt.gpu_ids).to(model.device)",
                            "Call"
                        ],
                        [
                            "netG_to_prune.to(model.device)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(netG_tmp)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_455": {
                "input": {
                    "value": "netG_to_prune.down_sampling[idx].weight.detach().abs().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_605": {
                "input": {
                    "value": "netG_to_prune.up_sampling[idx].weight.detach().abs().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_464": {
                "input": {
                    "value": "netG_to_prune.down_sampling[idx].weight.detach().abs().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_473": {
                "input": {
                    "value": "netG_to_prune.down_sampling[idx].weight.detach().abs().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/image_pool.py": {
        "torch": {
            "cat_52": {
                "variable": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(return_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_profiling.py": {
        "torch": {
            "rand_300": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_302": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/util.py": {
        "torch": {
            "load_136": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_path",
                            "Method Argument"
                        ],
                        [
                            "load_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_146": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_path",
                            "Method Argument"
                        ],
                        [
                            "load_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/weight_transfer.py": {
        "torch": {}
    }
}