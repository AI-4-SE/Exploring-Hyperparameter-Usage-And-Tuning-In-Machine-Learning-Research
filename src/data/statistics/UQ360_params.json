{
    "tests/test_AuxiliaryIntervalPredictor.py": {
        "sklearn": {
            "make_regression_14": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_7": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_ClassificationCalibration.py": {
        "sklearn": {
            "MLPClassifier_73": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_classification_64": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "class_sep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "brier_score_loss_42": {
                "y_true": {
                    "value": "self.y_prod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_prob": {
                    "value": "res_probs.y_prob[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "brier_score_loss_57": {
                "y_true": {
                    "value": "self.y_prod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_prob": {
                    "value": "res_feat.y_prob[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_EnsembleHeteroscedasticRegression.py": {
        "sklearn": {
            "make_regression_14": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_7": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_HeteroscedasticRegression.py": {
        "sklearn": {
            "make_regression_14": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_7": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_HomoscedasticGPRegression.py": {
        "sklearn": {
            "make_regression_14": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_7": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_Hshoe.py": {
        "sklearn": {
            "make_classification_41": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "n_informative": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_43": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "tests/test_MetamodelClassification.py": {
        "sklearn": {
            "GradientBoostingClassifier_44": {
                "variable": {
                    "value": "gbm_base",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "300",
                    "type": "",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "t",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "",
                    "possible_values": []
                }
            },
            "LogisticRegression_52": {
                "variable": {
                    "value": "lr_meta",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "",
                    "possible_values": []
                },
                "C": {
                    "value": "1",
                    "type": "",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_68": {
                "variable": {
                    "value": "gbm_base",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "300",
                    "type": "",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "t",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "",
                    "possible_values": []
                }
            },
            "LogisticRegression_69": {
                "variable": {
                    "value": "lr_meta",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "",
                    "possible_values": []
                },
                "C": {
                    "value": "1",
                    "type": "",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "",
                    "possible_values": []
                }
            },
            "make_classification_10": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_MetamodelRegression.py": {
        "sklearn": {
            "GradientBoostingRegressor_39": {
                "variable": {
                    "value": "gbr_meta",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "quantile",
                    "type": "",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.95",
                    "type": "t",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "300",
                    "type": "",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "t",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "",
                    "possible_values": []
                }
            },
            "GradientBoostingRegressor_46": {
                "variable": {
                    "value": "gbr_base",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "ls",
                    "type": "",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "300",
                    "type": "",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "t",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "",
                    "possible_values": []
                }
            },
            "LinearRegression_60": {
                "variable": {
                    "value": "lr_meta",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "quantile",
                    "type": "",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.95",
                    "type": "t",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "300",
                    "type": "",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "t",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "10",
                    "type": "",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "",
                    "possible_values": []
                }
            },
            "make_regression_10": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_QuantileRegression.py": {
        "sklearn": {
            "make_regression_12": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_ShortTextClassification.py": {
        "sklearn": {
            "MLPClassifier_78": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "make_classification_21": {
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "class_sep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "get_logger_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_StructuredDataClassification.py": {
        "sklearn": {
            "RandomForestClassifier_25": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_87": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_95": {
                "variable": {
                    "value": "ohe",
                    "type": "variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils.py": {
        "sklearn": {
            "train_test_split_8": {
                "variable": {
                    "value": "(x_train, x_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_12": {
                "variable": {
                    "value": "(x_test, x_prod, y_test, y_prod)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_49": {
                "variable": {
                    "value": "(x_train_new, x_test_new, y_train_new, y_test_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "training_test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "training_test_label",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "0.25",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/blackbox_metamodel/metamodel_classification.py": {
        "sklearn": {
            "LogisticRegression_31": {
                "variable": {
                    "value": "mdl",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "train_test_split_136": {
                "variable": {
                    "value": "(X_base, X_meta, y_base, y_meta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "randomize_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "test_size": {
                    "value": "meta_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_33": {
                "variable": {
                    "value": "mdl",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/blackbox_metamodel/metamodel_regression.py": {
        "sklearn": {
            "GradientBoostingRegressor_30": {
                "variable": {
                    "value": "mdl",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "train_test_split_115": {
                "variable": {
                    "value": "(X_base, X_meta, y_base, y_meta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "randomize_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "test_size": {
                    "value": "meta_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/blackbox_metamodel/predictors/core/short_text.py": {
        "sklearn": {
            "GradientBoostingClassifier_148": {
                "variable": {
                    "value": "classifier1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MLPClassifier_160": {
                "variable": {
                    "value": "classifier2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVC_173": {
                "variable": {
                    "value": "classifier3",
                    "type": "variable",
                    "possible_values": []
                },
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_77": {
                "variable": {
                    "value": "(x_dev, x_test, y_dev, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StratifiedKFold_143": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_85": {
                "variable": {
                    "value": "(x_dev, x_test, y_dev, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/blackbox_metamodel/predictors/core/structured_data.py": {
        "sklearn": {
            "GradientBoostingClassifier_82": {
                "variable": {
                    "value": "classifier1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_87": {
                "variable": {
                    "value": "classifier2",
                    "type": "variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_36": {
                "variable": {
                    "value": "(x_dev, x_test, y_dev, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StratifiedKFold_75": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/classification_calibration/classification_calibration.py": {
        "sklearn": {
            "LabelEncoder_58": {
                "variable": {
                    "value": "self.base_model.label_encoder_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CalibratedClassifierCV_59": {
                "variable": {
                    "value": "self.calib_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "prefit",
                    "type": "str",
                    "possible_values": []
                },
                "method": {
                    "value": "self.method",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/homoscedastic_gaussian_process_regression/homoscedastic_gaussian_process_regression.py": {
        "sklearn": {
            "StandardScaler_43": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "self.X_bounds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X.min() * torch.ones(X.shape[1]), X.max() * torch.ones(X.shape[1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X, X_bounds)",
                            "Call"
                        ],
                        [
                            "torch.tensor(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_67": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scaler.fit_transform(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "X.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "X.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/quantile_regression/quantile_regression.py": {
        "sklearn": {
            "GradientBoostingRegressor_30": {
                "variable": {
                    "value": "self.model_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loss": {
                    "value": "ls",
                    "type": "str",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.config['n_estimators']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "self.config['max_depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "self.config['min_samples_leaf']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "self.config['min_samples_split']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GradientBoostingRegressor_38": {
                "variable": {
                    "value": "self.model_upper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loss": {
                    "value": "quantile",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.config['alpha']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.config['n_estimators']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "self.config['max_depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "self.config['min_samples_leaf']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "self.config['min_samples_split']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GradientBoostingRegressor_47": {
                "variable": {
                    "value": "self.model_lower",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loss": {
                    "value": "quantile",
                    "type": "str",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1.0 - self.config['alpha']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.config['n_estimators']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "self.config['max_depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "self.config['min_samples_leaf']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "self.config['min_samples_split']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/variational_bayesian_neural_networks/bnn.py": {
        "sklearn": {},
        "torch": {
            "Adam_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['step_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "neg_elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.config['num_epochs'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_218": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['step_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "neg_elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.config['num_epochs'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_214": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.Tensor(X), torch.Tensor(y).long())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_217": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "input": {
                    "value": "self.net(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_214": {}
        }
    },
    "uq360/datasets/banking_dataset.py": {
        "sklearn": {
            "LabelEncoder_31": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_38": {
                "variable": {
                    "value": "ohe",
                    "type": "variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/metrics/classification_metrics.py": {
        "sklearn": {
            "roc_auc_score_230": {
                "variable": {
                    "value": "results[auroc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "ovr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_loss_232": {
                "variable": {
                    "value": "results[nll]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "accuracy_score_236": {
                "variable": {
                    "value": "results[accuracy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(y_prob, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/metrics/regression_metrics.py": {
        "sklearn": {
            "mean_squared_error_112": {
                "variable": {
                    "value": "results[rmse]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "squared": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "r2_score_127": {
                "variable": {
                    "value": "results[r2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/metrics/uncertainty_characteristics_curve/uncertainty_characteristics_curve.py": {
        "sklearn": {}
    },
    "uq360/utils/batch_features/drift_classifier.py": {
        "sklearn": {
            "shuffle_38": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_41": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_val_predict_43": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([test, prod], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([y1, y2], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "method": {
                    "value": "predict_proba",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_50": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([y1, y2], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(prod_proba < 0.5, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_27": {
                "variable": {
                    "value": "(test, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(len(test), len(prod))",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_29": {
                "variable": {
                    "value": "(prod, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(len(test), len(prod))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uq360/utils/calibrators/isotonic_regression.py": {
        "sklearn": {
            "IsotonicRegression_14": {
                "variable": {
                    "value": "self.isotonic_regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "out_of_bounds": {
                    "value": "clip",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/hidden_markov_model.py": {
        "sklearn": {
            "KMeans_37": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                },
                "n_init": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/hpo_search.py": {
        "sklearn": {
            "ParameterSampler_32": {
                "param_distributions": {
                    "value": "self.param_distributions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "self.n_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/class_accuracy.py": {
        "sklearn": {
            "confusion_matrix_22": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.predict(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uq360/utils/transformers/cluster_feature.py": {
        "sklearn": {
            "KMeans_59": {
                "variable": {
                    "value": "self.clusterer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(data.shape[1], 256)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StandardScaler_51": {
                "variable": {
                    "value": "self.preprocess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/distribution_clustering.py": {
        "sklearn": {
            "StandardScaler_43": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_60": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "30000",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/gbm.py": {
        "sklearn": {
            "GradientBoostingClassifier_60": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "train_test_split_53": {
                "variable": {
                    "value": "(x_train, _, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "40000",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StratifiedKFold_41": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/logistic_regression.py": {
        "sklearn": {
            "LogisticRegression_22": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/mlp.py": {
        "sklearn": {
            "MLPClassifier_58": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "train_test_split_50": {
                "variable": {
                    "value": "(x_train, _, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "40000",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StratifiedKFold_38": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/one_class_svm.py": {
        "sklearn": {
            "OneClassSVM_12": {
                "variable": {
                    "value": "self.one_class_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nu": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                },
                "gamma": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/pca.py": {
        "sklearn": {
            "PCA_14": {
                "variable": {
                    "value": "self.pca",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_15": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/random_forest.py": {
        "sklearn": {
            "RandomForestClassifier_56": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_49": {
                "variable": {
                    "value": "(x_train, _, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "40000",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StratifiedKFold_37": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/svc.py": {
        "sklearn": {
            "SVC_55": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "train_test_split_48": {
                "variable": {
                    "value": "(x_train, _, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "40000",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StratifiedKFold_36": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/transformers/umap_kde.py": {
        "sklearn": {
            "StandardScaler_40": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_56": {
                "variable": {
                    "value": "(X_scale, x_test, Y, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KernelDensity_95": {
                "variable": {
                    "value": "kde",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PCA_75": {
                "variable": {
                    "value": "self.pca",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.ndim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/utils/utils.py": {
        "sklearn": {}
    },
    "tests/test_ActivelyLearnedModel.py": {
        "torch": {
            "manual_seed_7": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/auxiliary_interval_predictor/auxiliary_interval_predictor.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_93": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true - y_pred_mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_104": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true - y_pred_mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "emce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid((y_true - lower) * (upper - y_true) * 100000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_108": {
                "variable": {
                    "value": "loss_emce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.config['calibration_alpha'] - emce",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_109": {
                "variable": {
                    "value": "loss_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(0.5 * width - r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(X, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "optimizer_main_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.main_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "optimizer_aux_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.aux_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_206": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_95": {
                "input": {
                    "value": "0.5 * torch.exp(-y_pred_log_var) * r ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_100": {
                "input": {
                    "value": "0.5 * y_pred_log_var_aux",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "input": {
                    "value": "(y_true - lower) * (upper - y_true) * 100000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_109": {
                "input": {
                    "value": "0.5 * width - r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_110": {
                "input": {
                    "value": "torch.abs(lower - y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_133": {
                "*tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_96": {
                "input": {
                    "value": "torch.abs(torch.exp(0.5 * y_pred_log_var) - torch.exp(0.5 * y_pred_log_var_aux))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_110": {
                "input": {
                    "value": "lower - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_96": {
                "input": {
                    "value": "torch.exp(0.5 * y_pred_log_var) - torch.exp(0.5 * y_pred_log_var_aux)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_95": {
                "input": {
                    "value": "-y_pred_log_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "0.5 * y_pred_log_var_aux",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/ensemble_heteroscedastic_regression/ensemble_heteroscedastic_regression.py": {
        "torch": {
            "stack_32": {
                "variable": {
                    "value": "mu_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mu_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_33": {
                "variable": {
                    "value": "var_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config['model_kwargs']['config']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_40": {
                "input": {
                    "value": "var_ensemble",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(var_stack + mu_stack ** 2) / num_models - mu_ensemble ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(self.model.models_))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(self.model.models_))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_30": {
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/algorithms/heteroscedastic_regression/heteroscedastic_regression.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(X, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).float().to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_56": {
                "input": {
                    "value": "0.5 * torch.exp(-y_pred_log_var) * torch.abs(y_true - y_pred_mu) ** 2 + 0.5 * y_pred_log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorDataset_76": {
                "*tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_56": {
                "input": {
                    "value": "-y_pred_log_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_56": {
                "input": {
                    "value": "y_true - y_pred_mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/models/bayesian_neural_networks/bnn_models/bayesian_mlp.py": {
        "torch": {
            "CrossEntropyLoss_120": {
                "variable": {
                    "value": "self.noise_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_22": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_48": {
                "start": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "Parameter_66": {
                "data": {
                    "value": "torch.Tensor(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "[self.fc1.weights, self.fc1.bias.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "[self.fc1.weights_logvar, self.fc1.bias_logvar.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[self.fc_out.weights, self.fc_out.bias.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[self.fc_out.weights_logvar, self.fc_out.bias_logvar.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/models/bayesian_neural_networks/bnn_models/horseshoe_mlp.py": {
        "torch": {
            "CrossEntropyLoss_139": {
                "variable": {
                    "value": "self.noise_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_29": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_64": {
                "start": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "Parameter_82": {
                "data": {
                    "value": "torch.Tensor(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "[self.fc1.weights, self.fc1.bias.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "[self.fc1.weights_logvar, self.fc1.bias_logvar.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "[self.fc_out.weights, self.fc_out.bias.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[self.fc_out.weights_logvar, self.fc_out.bias_logvar.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/models/bayesian_neural_networks/layer_utils.py": {
        "torch": {
            "sum_17": {
                "input": {
                    "value": "a + torch.log(b) + torch.lgamma(a) - (1 + a) * torch.digamma(a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_112": {
                "variable": {
                    "value": "self.mu.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b / (self.a + 1) * torch.ones(self.out_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_13": {
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "log_std + mu + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_67": {
                "input": {
                    "value": "expected_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-gammaln(self.const) - 2 * 0.5 * np.log(self.b) + (-self.const - 1.0) * (torch.log(self.bhat) - torch.digamma(self.ahat)) - 1.0 / self.b ** 2 * (self.ahat / self.bhat)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_89": {
                "input": {
                    "value": "-self.mu + 0.5 * self.log_sigma.exp() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_13": {
                "input": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_17": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "digamma_17": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_64": {
                "input": {
                    "value": "-self.mu + 0.5 * self.log_sigma.exp() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_112": {
                "*size": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_122": {
                "input": {
                    "value": "-self.mu + 0.5 * self.log_sigma.exp() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_17": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "self.bhat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "digamma_66": {
                "input": {
                    "value": "self.ahat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_121": {
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "self.bhat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "digamma_63": {
                "input": {
                    "value": "self.ahat",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/models/bayesian_neural_networks/layers.py": {
        "torch": {
            "exp_16": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.weights_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.bias_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_79": {
                "variable": {
                    "value": "mu_activations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_80": {
                "variable": {
                    "value": "var_activations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weights_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_126": {
                "variable": {
                    "value": "mu_activations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_127": {
                "variable": {
                    "value": "var_activations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weights_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_160": {
                "variable": {
                    "value": "mu_activations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_161": {
                "variable": {
                    "value": "var_activations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weights_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_39": {},
            "Tensor_40": {},
            "Tensor_42": {},
            "Tensor_43": {},
            "sqrt_163": {
                "input": {
                    "value": "regularized_scale_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_sample * scale_sample / (c_sample + scale_sample)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "uq360/models/bayesian_neural_networks/misc.py": {
        "torch": {
            "mean_17": {
                "input": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise.loss(y_pred=y_pred_samples, y_true=y_test.unsqueeze(dim=0), reduce_sum=False)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(ll, dim=0) - np.log(S)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsumexp_16": {
                "input": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise.loss(y_pred=y_pred_samples, y_true=y_test.unsqueeze(dim=0), reduce_sum=False)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(ll, dim=0) - np.log(S)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/models/heteroscedastic_mlp.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "uq360/models/noise_models/heteroscedastic_noise_models.py": {
        "torch": {
            "log_13": {
                "input": {
                    "value": "1 + torch.exp(a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_24": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([2 * math.pi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_13": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_36": {
                "input": {
                    "value": "var_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(log_var_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uq360/models/noise_models/homoscedastic_noise_models.py": {
        "torch": {
            "log_13": {
                "input": {
                    "value": "1 + torch.exp(a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_27": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([2 * math.pi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.ahat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([10.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.bhat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([3.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_65": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([2 * math.pi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_13": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "lgamma_48": {
                "input": {
                    "value": "ahat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(self.ahat)",
                            "Call"
                        ],
                        [
                            "transform(self.ahat)",
                            "Call"
                        ],
                        [
                            "transform(self.ahat)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_49": {
                "input": {
                    "value": "bhat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(self.bhat)",
                            "Call"
                        ],
                        [
                            "transform(self.bhat)",
                            "Call"
                        ],
                        [
                            "transform(self.bhat)",
                            "Call"
                        ]
                    ]
                }
            },
            "digamma_42": {
                "input": {
                    "value": "ahat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(self.ahat)",
                            "Call"
                        ],
                        [
                            "transform(self.ahat)",
                            "Call"
                        ],
                        [
                            "transform(self.ahat)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_42": {
                "input": {
                    "value": "bhat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(self.bhat)",
                            "Call"
                        ],
                        [
                            "transform(self.bhat)",
                            "Call"
                        ],
                        [
                            "transform(self.bhat)",
                            "Call"
                        ]
                    ]
                }
            },
            "digamma_48": {
                "input": {
                    "value": "ahat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(self.ahat)",
                            "Call"
                        ],
                        [
                            "transform(self.ahat)",
                            "Call"
                        ],
                        [
                            "transform(self.ahat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uq360/utils/generate_1D_regression_data.py": {
        "torch": {}
    }
}