{
    "layers.py": {
        "tensorflow": {
            "expand_dims_17": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "K.cast(K.arange(start=0, stop=K.shape(x)[1] + 1), 'float32')",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "expand_dims_18": {
                "variable": {
                    "value": "bins",
                    "possible_values": []
                },
                "input": {
                    "value": "K.cast(K.arange(self.embedding_size // 2) * 2, 'float32')",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "dot_20": {
                "variable": {
                    "value": "evens",
                    "possible_values": []
                },
                "a": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "K.expand_dims(K.cast(K.arange(start=0, stop=K.shape(x)[1] + 1), 'float32'), axis=-1)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "1.0 / K.pow(10000.0, bins / self.embedding_size)",
                    "possible_values": []
                }
            },
            "identity_21": {
                "variable": {
                    "value": "odds",
                    "possible_values": []
                },
                "input": {
                    "value": "evens",
                    "possible_values": [
                        [
                            "K.dot(mask, 1.0 / K.pow(10000.0, bins / self.embedding_size))",
                            "Call"
                        ],
                        [
                            "K.sin(evens)[1:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "pos",
                    "possible_values": []
                },
                "tensor": {
                    "value": "K.stack([evens, odds], axis=2)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, K.shape(x)[1], self.embedding_size)",
                    "possible_values": []
                }
            },
            "expand_dims_27": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_45": {
                "variable": {
                    "value": "rank",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, length)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dot_48": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "possible_values": [
                        [
                            "K.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(left, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(x, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rank",
                    "possible_values": [
                        [
                            "tf.ones(shape=(1, length), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.ones(shape=(1, length), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.ones(shape=(1, K.shape(x)[1]), dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_68": {
                "variable": {
                    "value": "rank",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, length)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "left",
                    "possible_values": [
                        [
                            "x[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dot_71": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "possible_values": [
                        [
                            "K.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(left, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(x, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rank",
                    "possible_values": [
                        [
                            "tf.ones(shape=(1, length), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.ones(shape=(1, length), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.ones(shape=(1, K.shape(x)[1]), dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_87": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "shape": {
                    "value": "(K.shape(x)[0], K.shape(x)[1], K.shape(x)[1])",
                    "possible_values": []
                }
            },
            "ones_90": {
                "variable": {
                    "value": "rank",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, K.shape(x)[1])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dot_93": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "possible_values": [
                        [
                            "K.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(left, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(x, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rank",
                    "possible_values": [
                        [
                            "tf.ones(shape=(1, length), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.ones(shape=(1, length), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.ones(shape=(1, K.shape(x)[1]), dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_110": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "std_111": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensordot_139": {
                "variable": {
                    "value": "Q",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs[0]",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Q",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "possible_values": []
                }
            },
            "tensordot_140": {
                "variable": {
                    "value": "K",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs[1]",
                    "possible_values": []
                },
                "b": {
                    "value": "self.K",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "possible_values": []
                }
            },
            "tensordot_141": {
                "variable": {
                    "value": "V",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs[2]",
                    "possible_values": []
                },
                "b": {
                    "value": "self.V",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "possible_values": []
                }
            },
            "transpose_49": {
                "a": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "K.expand_dims(K.cast(K.arange(start=0, stop=K.shape(x)[1] + 1), 'float32'), axis=-1)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "possible_values": []
                }
            },
            "transpose_72": {
                "a": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "K.expand_dims(K.cast(K.arange(start=0, stop=K.shape(x)[1] + 1), 'float32'), axis=-1)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "possible_values": []
                }
            },
            "cast_17": {
                "x": {
                    "value": "K.arange(start=0, stop=K.shape(x)[1] + 1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "cast_18": {
                "x": {
                    "value": "K.arange(self.embedding_size // 2) * 2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "sin_23": {
                "x": {
                    "value": "evens",
                    "possible_values": [
                        [
                            "K.dot(mask, 1.0 / K.pow(10000.0, bins / self.embedding_size))",
                            "Call"
                        ],
                        [
                            "K.sin(evens)[1:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_24": {
                "x": {
                    "value": "odds",
                    "possible_values": [
                        [
                            "tf.identity(evens)",
                            "Call"
                        ],
                        [
                            "K.cos(odds)[1:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_26": {
                "values": {
                    "value": "[evens, odds]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "shape_44": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "right",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_94": {
                "a": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "K.expand_dims(K.cast(K.arange(start=0, stop=K.shape(x)[1] + 1), 'float32'), axis=-1)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ],
                        [
                            "K.dot(y, rank)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "a": {
                    "value": "K",
                    "possible_values": [
                        [
                            "tf.tensordot(inputs[1], self.K, axes=[[2], [0]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "possible_values": []
                }
            },
            "exp_146": {
                "x": {
                    "value": "A",
                    "possible_values": [
                        [
                            "tf.keras.backend.batch_dot(Q, tf.transpose(K, (0, 2, 1)))",
                            "Call"
                        ],
                        [
                            "A / self.denom",
                            "BinOp"
                        ],
                        [
                            "tf.exp(A) * inputs[3]",
                            "BinOp"
                        ],
                        [
                            "A / tf.reshape(tf.reduce_sum(A, axis=2), (-1, tf.shape(inputs[0])[1], 1))",
                            "BinOp"
                        ],
                        [
                            "layers.Dropout(rate=0.1)(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_147": {
                "tensor": {
                    "value": "tf.reduce_sum(A, axis=2)",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, tf.shape(inputs[0])[1], 1)",
                    "possible_values": []
                }
            },
            "Dropout_149": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "arange_17": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "stop": {
                    "value": "K.shape(x)[1] + 1",
                    "possible_values": []
                }
            },
            "pow_20": {
                "x": {
                    "value": "10000.0",
                    "possible_values": []
                },
                "y": {
                    "value": "bins / self.embedding_size",
                    "possible_values": []
                }
            },
            "Ones_105": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Zeros_107": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "input_tensor": {
                    "value": "A",
                    "possible_values": [
                        [
                            "tf.keras.backend.batch_dot(Q, tf.transpose(K, (0, 2, 1)))",
                            "Call"
                        ],
                        [
                            "A / self.denom",
                            "BinOp"
                        ],
                        [
                            "tf.exp(A) * inputs[3]",
                            "BinOp"
                        ],
                        [
                            "A / tf.reshape(tf.reduce_sum(A, axis=2), (-1, tf.shape(inputs[0])[1], 1))",
                            "BinOp"
                        ],
                        [
                            "layers.Dropout(rate=0.1)(A)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "arange_18": {
                "start": {
                    "value": "self.embedding_size // 2",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "shape_87": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "shape_90": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "shape_147": {
                "input": {
                    "value": "inputs[0]",
                    "possible_values": []
                }
            },
            "shape_17": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            }
        }
    },
    "transformer-cnn-ob.py": {
        "tensorflow": {
            "ConfigProto_92": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "set_verbosity_94": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "possible_values": []
                }
            },
            "set_session_95": {
                "session": {
                    "value": "tf.Session(config=config)",
                    "possible_values": []
                }
            },
            "Input_286": {
                "variable": {
                    "value": "l_in",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Input_287": {
                "variable": {
                    "value": "l_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Embedding_299": {
                "variable": {
                    "value": "l_voc",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "possible_values": [
                        [
                            "len(chars)",
                            "Call"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "input_length": {
                    "value": "None",
                    "possible_values": []
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Input_326": {
                "variable": {
                    "value": "l_in2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, EMBEDDING_SIZE)",
                    "possible_values": []
                }
            },
            "Model_384": {
                "variable": {
                    "value": "mdl",
                    "possible_values": []
                },
                "*args": {
                    "value": "l_input",
                    "possible_values": [
                        [
                            "[l_in2]",
                            "List"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "l_out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "layers.TimeDistributed(layers.Dense(vocab_size, use_bias=False))(l_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_392": {
                "variable": {
                    "value": "encoder",
                    "possible_values": []
                },
                "*args": {
                    "value": "[l_in, l_mask]",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "l_encoder",
                    "possible_values": [
                        [
                            "l_embed",
                            "Name"
                        ],
                        [
                            "l_embed",
                            "Name"
                        ]
                    ]
                }
            },
            "Input_405": {
                "variable": {
                    "value": "l_in",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Input_406": {
                "variable": {
                    "value": "l_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Input_409": {
                "variable": {
                    "value": "l_dec",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Input_410": {
                "variable": {
                    "value": "l_dmask",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Embedding_421": {
                "variable": {
                    "value": "l_voc",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "possible_values": [
                        [
                            "len(chars)",
                            "Call"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "input_length": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "Model_479": {
                "variable": {
                    "value": "mdl",
                    "possible_values": []
                },
                "*args": {
                    "value": "[l_in, l_mask, l_dec, l_dmask]",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "l_out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "layers.TimeDistributed(layers.Dense(vocab_size, use_bias=False))(l_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_497": {
                "variable": {
                    "value": "mdl_enc",
                    "possible_values": []
                },
                "*args": {
                    "value": "[l_in, l_mask]",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "l_encoder",
                    "possible_values": [
                        [
                            "l_embed",
                            "Name"
                        ],
                        [
                            "l_embed",
                            "Name"
                        ]
                    ]
                }
            },
            "Session_95": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "configparser.ConfigParser()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_98": {
                "seed": {
                    "value": "SEED",
                    "possible_values": [
                        [
                            "int(getConfig('Details', 'seed', '657488'))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_482": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "y_true",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y_pred, K.epsilon(), 1.0 - K.epsilon())",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_483": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(tf.reduce_sum(y_true, -1), 0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "mean_485": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "a": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_true, logits=y_pred)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss * mask, -1) / tf.reduce_sum(mask, -1)",
                            "BinOp"
                        ],
                        [
                            "K.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_489": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(tf.reduce_sum(y_true, -1), 0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "cast_490": {
                "variable": {
                    "value": "eq",
                    "possible_values": []
                },
                "x": {
                    "value": "K.equal(K.argmax(y_true, axis=-1), K.argmax(y_pred, axis=-1))",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "mean_492": {
                "variable": {
                    "value": "eq",
                    "possible_values": []
                },
                "a": {
                    "value": "eq",
                    "possible_values": [
                        [
                            "K.cast(K.equal(K.argmax(y_true, axis=-1), K.argmax(y_pred, axis=-1)), 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(eq * mask, -1) / tf.reduce_sum(mask, -1)",
                            "BinOp"
                        ],
                        [
                            "K.mean(eq)",
                            "Call"
                        ]
                    ]
                }
            },
            "Add_300": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Concatenate_338": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_339": {
                "rate": {
                    "value": "0.25",
                    "possible_values": []
                }
            },
            "Dense_342": {
                "units": {
                    "value": "N_HIDDEN_CNN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Dense_345": {
                "units": {
                    "value": "N_HIDDEN_CNN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.Constant(-1)",
                    "possible_values": []
                }
            },
            "Lambda_348": {
                "function": {
                    "value": "lambda x: 1.0 - x",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(N_HIDDEN_CNN,)",
                    "possible_values": []
                }
            },
            "Dense_349": {
                "units": {
                    "value": "N_HIDDEN_CNN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Multiply_350": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Multiply_351": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Add_353": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_by_value_365": {
                "variable": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "t": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y_pred, K.epsilon(), 1.0 - K.epsilon())",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "K.epsilon()",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - K.epsilon()",
                    "possible_values": []
                }
            },
            "Add_423": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_424": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_447": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_448": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "TimeDistributed_476": {
                "layer": {
                    "value": "layers.Dense(vocab_size, use_bias=False)",
                    "possible_values": []
                }
            },
            "Input_291": {
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "Concatenate_307": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TimeDistributed_308": {
                "layer": {
                    "value": "layers.Dense(EMBEDDING_SIZE, trainable=unfreeze)",
                    "possible_values": []
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Add_310": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1D_314": {
                "filters": {
                    "value": "N_HIDDEN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv1D_315": {
                "filters": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Add_317": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1D_333": {
                "filters": {
                    "value": "num_filters[i]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_sizes[i]",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "normal",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Lambda_335": {
                "function": {
                    "value": "lambda x: tf.reduce_max(x, axis=1)",
                    "possible_values": []
                }
            },
            "Concatenate_431": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TimeDistributed_432": {
                "layer": {
                    "value": "layers.Dense(EMBEDDING_SIZE)",
                    "possible_values": []
                }
            },
            "Dropout_433": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_434": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1D_438": {
                "filters": {
                    "value": "N_HIDDEN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv1D_439": {
                "filters": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_440": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_441": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Concatenate_455": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TimeDistributed_456": {
                "layer": {
                    "value": "layers.Dense(EMBEDDING_SIZE)",
                    "possible_values": []
                }
            },
            "Dropout_457": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_458": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Concatenate_463": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TimeDistributed_464": {
                "layer": {
                    "value": "layers.Dense(EMBEDDING_SIZE)",
                    "possible_values": []
                }
            },
            "Dropout_465": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_466": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1D_470": {
                "filters": {
                    "value": "N_HIDDEN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv1D_471": {
                "filters": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_472": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_473": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dense_476": {
                "units": {
                    "value": "vocab_size",
                    "possible_values": [
                        [
                            "len(chars)",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "not_equal_483": {
                "x": {
                    "value": "tf.reduce_sum(y_true, -1)",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reduce_sum_484": {
                "input_tensor": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "np.zeros(len(props), dtype=np.int8)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(tf.reduce_sum(y_true, -1), 0), 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(tf.reduce_sum(y_true, -1), 0), 'float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "not_equal_489": {
                "x": {
                    "value": "tf.reduce_sum(y_true, -1)",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "equal_490": {
                "x": {
                    "value": "K.argmax(y_true, axis=-1)",
                    "possible_values": []
                },
                "y": {
                    "value": "K.argmax(y_pred, axis=-1)",
                    "possible_values": []
                }
            },
            "reduce_sum_491": {
                "input_tensor": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "np.zeros(len(props), dtype=np.int8)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(tf.reduce_sum(y_true, -1), 0), 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(tf.reduce_sum(y_true, -1), 0), 'float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Dense_308": {
                "units": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dropout_309": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Dropout_316": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Constant_346": {
                "value": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "epsilon_365": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_mean_367": {
                "input_tensor": {
                    "value": "r * l_ymask[prop]",
                    "possible_values": []
                }
            },
            "Dense_432": {
                "units": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dense_456": {
                "units": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dense_464": {
                "units": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_483": {
                "input_tensor": {
                    "value": "y_true",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_sum_489": {
                "input_tensor": {
                    "value": "y_true",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "argmax_490": {
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y_pred, K.epsilon(), 1.0 - K.epsilon())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_max_335": {
                "input_tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros((batch_size, nl), np.int8)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, nl), np.int8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_366": {
                "x": {
                    "value": "1.0 - y_pred",
                    "possible_values": []
                }
            },
            "Dense_375": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "possible_values": []
                },
                "name": {
                    "value": "'Regression-' + props[prop][1]",
                    "possible_values": []
                }
            },
            "Dense_378": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                },
                "name": {
                    "value": "'Classification-' + props[prop][1]",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_770": {
                "filepath": {
                    "value": "model/",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "possible_values": []
                },
                "mode": {
                    "value": "auto",
                    "possible_values": []
                },
                "period": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "transformer-cnn.py": {
        "tensorflow": {
            "ConfigProto_88": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "set_verbosity_90": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "possible_values": []
                }
            },
            "set_session_91": {
                "session": {
                    "value": "tf.Session(config=config)",
                    "possible_values": []
                }
            },
            "Input_305": {
                "variable": {
                    "value": "l_in",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Input_306": {
                "variable": {
                    "value": "l_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Embedding_318": {
                "variable": {
                    "value": "l_voc",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "possible_values": [
                        [
                            "len(chars)",
                            "Call"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "input_length": {
                    "value": "None",
                    "possible_values": []
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Input_345": {
                "variable": {
                    "value": "l_in2",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, EMBEDDING_SIZE)",
                    "possible_values": []
                }
            },
            "Model_403": {
                "variable": {
                    "value": "mdl",
                    "possible_values": []
                },
                "*args": {
                    "value": "l_input",
                    "possible_values": [
                        [
                            "[l_in2]",
                            "List"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "l_out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "layers.TimeDistributed(layers.Dense(vocab_size, use_bias=False))(l_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_411": {
                "variable": {
                    "value": "encoder",
                    "possible_values": []
                },
                "*args": {
                    "value": "[l_in, l_mask]",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "l_encoder",
                    "possible_values": [
                        [
                            "l_embed",
                            "Name"
                        ],
                        [
                            "l_embed",
                            "Name"
                        ]
                    ]
                }
            },
            "Input_424": {
                "variable": {
                    "value": "l_in",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Input_425": {
                "variable": {
                    "value": "l_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Input_428": {
                "variable": {
                    "value": "l_dec",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Input_429": {
                "variable": {
                    "value": "l_dmask",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "possible_values": []
                }
            },
            "Embedding_440": {
                "variable": {
                    "value": "l_voc",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "possible_values": [
                        [
                            "len(chars)",
                            "Call"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "input_length": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "Model_498": {
                "variable": {
                    "value": "mdl",
                    "possible_values": []
                },
                "*args": {
                    "value": "[l_in, l_mask, l_dec, l_dmask]",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "l_out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "layers.TimeDistributed(layers.Dense(vocab_size, use_bias=False))(l_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_516": {
                "variable": {
                    "value": "mdl_enc",
                    "possible_values": []
                },
                "*args": {
                    "value": "[l_in, l_mask]",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "l_encoder",
                    "possible_values": [
                        [
                            "l_embed",
                            "Name"
                        ],
                        [
                            "l_embed",
                            "Name"
                        ]
                    ]
                }
            },
            "Session_91": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "configparser.ConfigParser()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_94": {
                "seed": {
                    "value": "SEED",
                    "possible_values": [
                        [
                            "int(getConfig('Details', 'seed', '657488'))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_501": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "y_true",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y_pred, K.epsilon(), 1.0 - K.epsilon())",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_502": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(tf.reduce_sum(y_true, -1), 0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "mean_504": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "a": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_true, logits=y_pred)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss * mask, -1) / tf.reduce_sum(mask, -1)",
                            "BinOp"
                        ],
                        [
                            "K.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_508": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(tf.reduce_sum(y_true, -1), 0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "cast_509": {
                "variable": {
                    "value": "eq",
                    "possible_values": []
                },
                "x": {
                    "value": "K.equal(K.argmax(y_true, axis=-1), K.argmax(y_pred, axis=-1))",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "possible_values": []
                }
            },
            "mean_511": {
                "variable": {
                    "value": "eq",
                    "possible_values": []
                },
                "a": {
                    "value": "eq",
                    "possible_values": [
                        [
                            "K.cast(K.equal(K.argmax(y_true, axis=-1), K.argmax(y_pred, axis=-1)), 'float32')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(eq * mask, -1) / tf.reduce_sum(mask, -1)",
                            "BinOp"
                        ],
                        [
                            "K.mean(eq)",
                            "Call"
                        ]
                    ]
                }
            },
            "Add_319": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Concatenate_357": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_358": {
                "rate": {
                    "value": "0.25",
                    "possible_values": []
                }
            },
            "Dense_361": {
                "units": {
                    "value": "N_HIDDEN_CNN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Dense_364": {
                "units": {
                    "value": "N_HIDDEN_CNN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.keras.initializers.Constant(-1)",
                    "possible_values": []
                }
            },
            "Lambda_367": {
                "function": {
                    "value": "lambda x: 1.0 - x",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(N_HIDDEN_CNN,)",
                    "possible_values": []
                }
            },
            "Dense_368": {
                "units": {
                    "value": "N_HIDDEN_CNN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Multiply_369": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Multiply_370": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Add_372": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_by_value_384": {
                "variable": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "t": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y_pred, K.epsilon(), 1.0 - K.epsilon())",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "K.epsilon()",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - K.epsilon()",
                    "possible_values": []
                }
            },
            "Add_442": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_443": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_466": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_467": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "TimeDistributed_495": {
                "layer": {
                    "value": "layers.Dense(vocab_size, use_bias=False)",
                    "possible_values": []
                }
            },
            "Input_310": {
                "shape": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "Concatenate_326": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TimeDistributed_327": {
                "layer": {
                    "value": "layers.Dense(EMBEDDING_SIZE, trainable=unfreeze)",
                    "possible_values": []
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Add_329": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1D_333": {
                "filters": {
                    "value": "N_HIDDEN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv1D_334": {
                "filters": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Add_336": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1D_352": {
                "filters": {
                    "value": "num_filters[i]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_sizes[i]",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "normal",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Lambda_354": {
                "function": {
                    "value": "lambda x: tf.reduce_max(x, axis=1)",
                    "possible_values": []
                }
            },
            "Concatenate_450": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TimeDistributed_451": {
                "layer": {
                    "value": "layers.Dense(EMBEDDING_SIZE)",
                    "possible_values": []
                }
            },
            "Dropout_452": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_453": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1D_457": {
                "filters": {
                    "value": "N_HIDDEN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv1D_458": {
                "filters": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_459": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_460": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Concatenate_474": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TimeDistributed_475": {
                "layer": {
                    "value": "layers.Dense(EMBEDDING_SIZE)",
                    "possible_values": []
                }
            },
            "Dropout_476": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_477": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Concatenate_482": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TimeDistributed_483": {
                "layer": {
                    "value": "layers.Dense(EMBEDDING_SIZE)",
                    "possible_values": []
                }
            },
            "Dropout_484": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_485": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1D_489": {
                "filters": {
                    "value": "N_HIDDEN",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv1D_490": {
                "filters": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_491": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Add_492": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dense_495": {
                "units": {
                    "value": "vocab_size",
                    "possible_values": [
                        [
                            "len(chars)",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "not_equal_502": {
                "x": {
                    "value": "tf.reduce_sum(y_true, -1)",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reduce_sum_503": {
                "input_tensor": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "np.zeros(len(props), dtype=np.int8)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(tf.reduce_sum(y_true, -1), 0), 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(tf.reduce_sum(y_true, -1), 0), 'float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "not_equal_508": {
                "x": {
                    "value": "tf.reduce_sum(y_true, -1)",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "equal_509": {
                "x": {
                    "value": "K.argmax(y_true, axis=-1)",
                    "possible_values": []
                },
                "y": {
                    "value": "K.argmax(y_pred, axis=-1)",
                    "possible_values": []
                }
            },
            "reduce_sum_510": {
                "input_tensor": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "np.zeros(len(props), dtype=np.int8)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(tf.reduce_sum(y_true, -1), 0), 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(tf.reduce_sum(y_true, -1), 0), 'float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Dense_327": {
                "units": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "trainable": {
                    "value": "unfreeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dropout_328": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Dropout_335": {
                "rate": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Constant_365": {
                "value": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "epsilon_384": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_mean_386": {
                "input_tensor": {
                    "value": "r * l_ymask[prop]",
                    "possible_values": []
                }
            },
            "Dense_451": {
                "units": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dense_475": {
                "units": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dense_483": {
                "units": {
                    "value": "EMBEDDING_SIZE",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_502": {
                "input_tensor": {
                    "value": "y_true",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_sum_508": {
                "input_tensor": {
                    "value": "y_true",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "argmax_509": {
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "tf.clip_by_value(y_pred, K.epsilon(), 1.0 - K.epsilon())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_max_354": {
                "input_tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros((batch_size, nl), np.int8)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, nl), np.int8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_385": {
                "x": {
                    "value": "1.0 - y_pred",
                    "possible_values": []
                }
            },
            "Dense_394": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "possible_values": []
                },
                "name": {
                    "value": "'Regression-' + props[prop][1]",
                    "possible_values": []
                }
            },
            "Dense_397": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                },
                "name": {
                    "value": "'Classification-' + props[prop][1]",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_790": {
                "filepath": {
                    "value": "model/",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "possible_values": []
                },
                "mode": {
                    "value": "auto",
                    "possible_values": []
                },
                "period": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}