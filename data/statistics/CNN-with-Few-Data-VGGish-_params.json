{
    "src/knn_audioset.py": {
        "sklearn": {
            "KNeighborsClassifier_136": {
                "variable": {
                    "value": "neigh",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "config['metric']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'audio_folder': AUDIO_FOLDER, 'data_folder': DATA_FOLDER, 'index_file': INDEX_FILE, 'gt_train': GT_TRAIN, 'gt_test': GT_TEST, 'n_shot': 2, 'num_experiment_runs': 20, 'num_classes_dataset': NUM_CLASSES, 'train_batch': 32, 'test_batch': 64, 'metric': 'cosine'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "accuracy_score_168": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Graph_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/knn_mfcc.py": {
        "sklearn": {
            "KNeighborsClassifier_101": {
                "variable": {
                    "value": "neigh",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "config['metric']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'n_shot': 20, 'num_experiment_runs': 5, 'audio_folder': AUDIO_FOLDER, 'data_folder': DATA_FOLDER, 'index_file': INDEX_FILE, 'gt_train': GT_TRAIN, 'gt_test': GT_TEST, 'num_classes_dataset': NUM_CLASSES, 'MFCC_number': 20, 'metric': 'cosine'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "accuracy_score_117": {
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/scripts/embeds_vis.py": {
        "sklearn": {
            "TSNE_29": {
                "variable": {
                    "value": "X_tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "PERPLEX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30.0",
                            "float"
                        ]
                    ]
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                }
            },
            "PCA_30": {
                "variable": {
                    "value": "X_pca",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/shared.py": {
        "sklearn": {
            "accuracy_score_143": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "tile_18": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(a, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, M, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_20": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(b, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(N, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_normalize_29": {
                "variable": {
                    "value": "norm_a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(a, axis=1), (1, M, 1))",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_30": {
                "variable": {
                    "value": "norm_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(b, axis=0), (N, 1, 1))",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "norm_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "norm_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_16": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(b, axis=0), (N, 1, 1))",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_18": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(a, axis=1), (1, M, 1))",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_20": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(b, axis=0), (N, 1, 1))",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_21": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_15": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(a, axis=1), (1, M, 1))",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models_proto.py": {
        "tensorflow": {
            "batch_normalization_23": {
                "variable": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(x, training=is_training, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "NUMBER_FILTERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "1CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_31": {
                "variable": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=bn_input, filters=NUMBER_FILTERS, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_32": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv1, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "NUMBER_FILTERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "2CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_42": {
                "variable": {
                    "value": "bn_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=NUMBER_FILTERS, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='2CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_43": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv2, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv2, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "NUMBER_FILTERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "3CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_53": {
                "variable": {
                    "value": "bn_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool2, filters=NUMBER_FILTERS, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='3CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_54": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv3, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv3, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "NUMBER_FILTERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "4CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_64": {
                "variable": {
                    "value": "bn_conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool3, filters=NUMBER_FILTERS, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='4CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_65": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv4, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv4, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "NUMBER_FILTERS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "5CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_75": {
                "variable": {
                    "value": "bn_conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool4, filters=NUMBER_FILTERS, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='5CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_76": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv5, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_79": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv5, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "do",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(pool5)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_83": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "do",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(flat, rate=0.5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "units": {
                    "value": "output_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_96": {
                "variable": {
                    "value": "ta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(7, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ta",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_97": {
                "variable": {
                    "value": "ba",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ba",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_99": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(7, dtype=tf.float32), name='ta', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_100": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 + tf.exp(ba)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "vggish",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "log_learn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_102": {
                "x": {
                    "value": "tf.scalar_mul(alpha, x) + beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_96": {
                "value": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_97": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_100": {
                "x": {
                    "value": "ba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1, dtype=tf.float32), name='ba', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_102": {
                "scalar": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(ta, name='alpha')",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models_sl.py": {
        "tensorflow": {
            "conv2d_166": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "1CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_174": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=bn_input, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=bn_input, filters=num_filters, kernel_size=[7, 108], padding='valid', activation=None, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=input_, filters=24, kernel_size=[5, 5], padding='valid', activation=tf.nn.relu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[4, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_177": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv1, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=[conv1.shape[1], conv1.shape[2]], strides=[conv1.shape[1], conv1.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=[4, 2], strides=[4, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "2CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_185": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='2CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=48, kernel_size=[5, 5], padding='valid', activation=tf.nn.relu, name='2CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[4, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_188": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv2, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv2, pool_size=[4, 2], strides=[4, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "3CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_196": {
                "variable": {
                    "value": "flat_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool2, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='3CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool2, filters=48, kernel_size=[5, 5], padding='valid', activation=tf.nn.relu, name='3CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "do_pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flat_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_202": {
                "variable": {
                    "value": "dense_out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "do_pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(flat_conv3, rate=0.5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_208": {
                "variable": {
                    "value": "do",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=do_pool5, activation=tf.nn.relu, units=64, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_211": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "do",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(flat, rate=0.5, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(dense_out, rate=0.5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "units": {
                    "value": "config['num_classes_dataset']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_223": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_231": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_233": {
                "variable": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "ta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(7, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ta",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "ba",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ba",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_55": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(7, dtype=tf.float32), name='ta', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_56": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 + tf.exp(ba)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_67": {
                "variable": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(input_layer, training=is_training, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer, training=is_training, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "1CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_75": {
                "variable": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=bn_input, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=bn_input, filters=num_filters, kernel_size=[7, 108], padding='valid', activation=None, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=input_, filters=24, kernel_size=[5, 5], padding='valid', activation=tf.nn.relu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_76": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv1, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=[conv1.shape[1], conv1.shape[2]], strides=[conv1.shape[1], conv1.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=[4, 2], strides=[4, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "2CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_86": {
                "variable": {
                    "value": "bn_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='2CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=48, kernel_size=[5, 5], padding='valid', activation=tf.nn.relu, name='2CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_87": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv2, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv2, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv2, pool_size=[4, 2], strides=[4, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "3CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_97": {
                "variable": {
                    "value": "bn_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool2, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='3CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool2, filters=48, kernel_size=[5, 5], padding='valid', activation=tf.nn.relu, name='3CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_98": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv3, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_101": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv3, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "4CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_108": {
                "variable": {
                    "value": "bn_conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool3, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='4CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_109": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv4, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv4, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "5CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_119": {
                "variable": {
                    "value": "bn_conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=pool4, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='5CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_120": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv5, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_123": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv5, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_124": {
                "variable": {
                    "value": "do",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(pool5)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_127": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "do",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(flat, rate=0.5, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(dense_out, rate=0.5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "units": {
                    "value": "config['num_classes_dataset']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_141": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_142": {
                "variable": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_143": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(input_layer, training=is_training, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer, training=is_training, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer, training=is_training, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[7, 108]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "1CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_150": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=bn_input, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.elu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=bn_input, filters=num_filters, kernel_size=[7, 108], padding='valid', activation=None, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=input_, filters=24, kernel_size=[5, 5], padding='valid', activation=tf.nn.relu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[conv1.shape[1], conv1.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[conv1.shape[1], conv1.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_152": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv1, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=[conv1.shape[1], conv1.shape[2]], strides=[conv1.shape[1], conv1.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=[4, 2], strides=[4, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "log_learn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_58": {
                "x": {
                    "value": "tf.scalar_mul(alpha, x) + beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "vggish",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "timbre",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_52": {
                "value": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_53": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_56": {
                "x": {
                    "value": "ba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1, dtype=tf.float32), name='ba', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_58": {
                "scalar": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(ta, name='alpha')",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/proto.py": {
        "tensorflow": {
            "get_collection_215": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_235": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, config['xInput'], config['yInput'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['xInput'], config['yInput'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_183": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None, config['xInput'], config['yInput'], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_184": {
                "variable": {
                    "value": "q_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, config['xInput'], config['yInput'], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_192": {
                "variable": {
                    "value": "emb_prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(emb_x, [num_classes, num_support, emb_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_200": {
                "variable": {
                    "value": "mean_dists_protos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists_protos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shared.euclidean_distance(emb_prototypes, emb_prototypes)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_205": {
                "variable": {
                    "value": "log_p_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "-dists",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_211": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(log_p_y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_one_hot, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_217": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_171": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_216": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_221": {
                "variable": {
                    "value": "(gradients_clip, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(ce_loss))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None, config['xInput'], config['yInput'], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_classes * num_support, config['xInput'], config['yInput'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_190": {
                "input": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "tensor": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes, num_support, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.multiply(y_one_hot, log_p_y), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_211": {
                "input": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(log_p_y, 1), tf.argmax(y_one_hot, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_208": {
                "input_tensor": {
                    "value": "tf.multiply(y_one_hot, log_p_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_208": {
                "x": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "log_p_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(-dists)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/scripts/proto_test.py": {
        "tensorflow": {
            "get_collection_215": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_235": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, config['xInput'], config['yInput'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['xInput'], config['yInput'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_183": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None, config['xInput'], config['yInput'], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_184": {
                "variable": {
                    "value": "q_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, config['xInput'], config['yInput'], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_192": {
                "variable": {
                    "value": "emb_prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(emb_x, [num_classes, num_support, emb_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_200": {
                "variable": {
                    "value": "mean_dists_protos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists_protos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shared.euclidean_distance(emb_prototypes, emb_prototypes)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_205": {
                "variable": {
                    "value": "log_p_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "-dists",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_211": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(log_p_y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_one_hot, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_217": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_171": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_216": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_221": {
                "variable": {
                    "value": "(gradients_clip, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(ce_loss))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None, config['xInput'], config['yInput'], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_classes * num_support, config['xInput'], config['yInput'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_190": {
                "input": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "tensor": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes, num_support, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.multiply(y_one_hot, log_p_y), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_211": {
                "input": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(log_p_y, 1), tf.argmax(y_one_hot, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_208": {
                "input_tensor": {
                    "value": "tf.multiply(y_one_hot, log_p_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_208": {
                "x": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "log_p_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(-dists)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/scripts/proto_train_test.py": {
        "tensorflow": {
            "get_collection_215": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_235": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, config['xInput'], config['yInput'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['xInput'], config['yInput'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_183": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None, config['xInput'], config['yInput'], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_184": {
                "variable": {
                    "value": "q_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, config['xInput'], config['yInput'], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_192": {
                "variable": {
                    "value": "emb_prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(emb_x, [num_classes, num_support, emb_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_200": {
                "variable": {
                    "value": "mean_dists_protos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists_protos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shared.euclidean_distance(emb_prototypes, emb_prototypes)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_205": {
                "variable": {
                    "value": "log_p_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "-dists",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_211": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(log_p_y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_one_hot, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_217": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_171": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_216": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_221": {
                "variable": {
                    "value": "(gradients_clip, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(ce_loss))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None, config['xInput'], config['yInput'], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_classes * num_support, config['xInput'], config['yInput'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_190": {
                "input": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "tensor": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes, num_support, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.multiply(y_one_hot, log_p_y), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_211": {
                "input": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(log_p_y, 1), tf.argmax(y_one_hot, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_208": {
                "input_tensor": {
                    "value": "tf.multiply(y_one_hot, log_p_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_208": {
                "x": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "log_p_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(-dists)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/scripts/sl_train_val.py": {
        "tensorflow": {
            "get_collection_166": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_175": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['xInput'], config['yInput']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['num_classes_dataset']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_23": {
                "variable": {
                    "value": "normalized_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.model_number(x, is_train, config)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_29": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, config['num_classes_dataset']])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.model_number(x, is_train, config)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_211": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_18": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_31": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_32": {
                "variable": {
                    "value": "lossL2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in vars if 'kernel' in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "control_dependencies_167": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_170": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_172": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(cost))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_32": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/scripts/transfer_train_val.py": {
        "tensorflow": {
            "get_collection_142": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS), name='input_features')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_62": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.fully_connected, 4096, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, vggish_params.EMBEDDING_SIZE, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "normalized_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(embeddings, config['num_classes_dataset'], activation_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['num_classes_dataset']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_68": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, config['num_classes_dataset']])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(embeddings, config['num_classes_dataset'], activation_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_195": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_202": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vggish_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'my_model' not in v.name]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "vggish_load_pretrained",
                    "type": "str",
                    "possible_values": []
                },
                "write_version": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_204": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "vggish",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "my_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_143": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_148": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(cost))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_153": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_39": {
                "stddev": {
                    "value": "vggish_params.INIT_STDDEV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/sl_evaluate.py": {
        "tensorflow": {
            "InteractiveSession_49": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_51": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/sl_train.py": {
        "tensorflow": {
            "get_collection_160": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['xInput'], config['yInput']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['num_classes_dataset']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_23": {
                "variable": {
                    "value": "normalized_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.model_number(x, is_train, config)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_29": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, config['num_classes_dataset']])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.model_number(x, is_train, config)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_201": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_203": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_18": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_31": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_32": {
                "variable": {
                    "value": "lossL2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in vars if 'kernel' in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "control_dependencies_161": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_166": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(cost))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_32": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/transfer_evaluate.py": {
        "tensorflow": {
            "InteractiveSession_47": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_49": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/transfer_proto.py": {
        "tensorflow": {
            "get_collection_124": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_152": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_36": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input_signal, 64, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.fully_connected, 4096, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, vggish_params.EMBEDDING_SIZE, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_88": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_89": {
                "variable": {
                    "value": "q_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "emb_prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(emb_x, [num_classes, -1, emb_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_106": {
                "variable": {
                    "value": "log_p_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "-dists",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "mean_dists_protos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists_protos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shared.euclidean_distance(emb_prototypes, emb_prototypes)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_118": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(log_p_y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_one_hot, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_192": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vggish_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'my_model' not in v.name]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "vggish_load_pretrained",
                    "type": "str",
                    "possible_values": []
                },
                "write_version": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "vggish",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "my_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_79": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_125": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_130": {
                "variable": {
                    "value": "(gradients_clip, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(ce_loss))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audioset_model(tf.reshape(x, [-1, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audioset_model(tf.reshape(x, [-1, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_classes, -1, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.multiply(y_one_hot, log_p_y), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "input": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_119": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(log_p_y, 1), tf.argmax(y_one_hot, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_135": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_15": {
                "stddev": {
                    "value": "vggish_params.INIT_STDDEV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "tf.multiply(y_one_hot, log_p_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_115": {
                "x": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, None])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "log_p_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(-dists)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/transfer_train.py": {
        "tensorflow": {
            "get_collection_135": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS), name='input_features')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_61": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, vggish_params.NUM_FRAMES, vggish_params.NUM_BANDS, 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.fully_connected, 4096, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, vggish_params.EMBEDDING_SIZE, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "normalized_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(embeddings, config['num_classes_dataset'], activation_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['num_classes_dataset']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_67": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, config['num_classes_dataset']])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(embeddings, config['num_classes_dataset'], activation_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_186": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_193": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vggish_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'my_model' not in v.name]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "vggish_load_pretrained",
                    "type": "str",
                    "possible_values": []
                },
                "write_version": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_195": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "vggish",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "my_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_136": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_141": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(cost))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_146": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_38": {
                "stddev": {
                    "value": "vggish_params.INIT_STDDEV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/vggish_slim.py": {
        "tensorflow": {
            "Saver_127": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vggish_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if v.name in vggish_var_names]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "vggish_load_pretrained",
                    "type": "str",
                    "possible_values": []
                },
                "write_version": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, params.NUM_FRAMES, params.NUM_BANDS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, params.NUM_FRAMES, params.NUM_BANDS), name='input_features')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, params.NUM_FRAMES, params.NUM_BANDS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "vggish",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_99": {
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(features, [-1, params.NUM_FRAMES, params.NUM_BANDS, 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.fully_connected, 4096, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, params.EMBEDDING_SIZE, scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_67": {
                "stddev": {
                    "value": "params.INIT_STDDEV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}