{
    "src/lenet.py": {
        "torch": {
            "Sequential_6": {
                "variable": {
                    "value": "self.features",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, 5, 1)",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * 2 * 128, 500)",
                    "possible_values": []
                }
            },
            "Conv2d_7": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_8": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_9": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_14": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "2 * 2 * 128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "500",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/visual_backprop.py": {
        "torch": {
            "mean_40": {
                "variable": {
                    "value": "averaged_maps",
                    "possible_values": []
                },
                "input": {
                    "value": "x_batch",
                    "possible_values": [
                        [
                            "x_batch.to(self.device)",
                            "Call"
                        ],
                        [
                            "module(x_batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "maps_max",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "variable": {
                    "value": "maps_min",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "conv_transpose2d_54": {
                "variable": {
                    "value": "last_result",
                    "possible_values": []
                },
                "input": {
                    "value": "last_result",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "maps",
                            "Name"
                        ],
                        [
                            "last_result.mul(maps)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(last_result, torch.ones(1, 1, kernel_size[0], kernel_size[1], device=self.device), stride=stride, output_padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.ones(1, 1, kernel_size[0], kernel_size[1], device=self.device)",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "padding",
                    "possible_values": []
                }
            },
            "relu_56": {
                "input": {
                    "value": "last_result",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "maps",
                            "Name"
                        ],
                        [
                            "last_result.mul(maps)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(last_result, torch.ones(1, 1, kernel_size[0], kernel_size[1], device=self.device), stride=stride, output_padding=padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_54": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size[0]",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size[1]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "max_42": {
                "input": {
                    "value": "flatten_maps",
                    "possible_values": [
                        [
                            "averaged_maps.view(averaged_maps.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_43": {
                "input": {
                    "value": "flatten_maps",
                    "possible_values": [
                        [
                            "averaged_maps.view(averaged_maps.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/visualize_mnist_training.py": {
        "torch": {
            "DataLoader_8": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_12": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./data', train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "9",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "device_23": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "SGD_27": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            }
        }
    },
    "src/visualize_utils.py": {
        "torch": {
            "nll_loss_37": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(output)",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                }
            },
            "log_softmax_37": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}