{
    "data_loader/data.py": {
        "tensorflow": {
            "cast_38": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.string)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_39": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lables",
                            "variable"
                        ],
                        [
                            "tf.convert_to_tensor(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [label_size, classnum])",
                            "Call"
                        ],
                        [
                            "input_queue[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lables",
                            "variable"
                        ],
                        [
                            "tf.convert_to_tensor(label, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [label_size, classnum])",
                            "Call"
                        ],
                        [
                            "input_queue[1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[label_size, classnum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_input_producer_42": {
                "variable": {
                    "value": "input_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "Shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "Capacity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "read_file_44": {
                "variable": {
                    "value": "image_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_jpeg_45": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_48": {
                "variable": {
                    "value": "(image_batch, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "Capacity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_50": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label_batch, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image_batch, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "loss/H_loss.py": {
        "tensorflow": {
            "split_6": {
                "variable": {
                    "value": "(archer_code, sabor_code)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[omega_size, batch_size - omega_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_7": {
                "variable": {
                    "value": "(archer_label, sabor_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[omega_size, batch_size - omega_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_9": {
                "variable": {
                    "value": "archer_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "archer_code",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(archer_code)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_10": {
                "variable": {
                    "value": "sabor_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sabor_code",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(sabor_code)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_12": {
                "variable": {
                    "value": "archer_Similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "archer_label",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(archer_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_13": {
                "variable": {
                    "value": "sabor_Similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "archer_label",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(sabor_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_14": {
                "variable": {
                    "value": "archer_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tf.tile(tf.diag_part(archer_matrix), [omega_size]), [omega_size, omega_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_15": {
                "variable": {
                    "value": "archer_sabor_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tf.tile(tf.diag_part(archer_matrix), [batch_size - omega_size]), [batch_size - omega_size, omega_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "sabor_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.diag_part(sabor_matrix), [omega_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[omega_size, batch_size - omega_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_20": {
                "variable": {
                    "value": "archer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 / 2 * archer_Similarity * archer_distance + 1 / 2 * (1 - archer_Similarity) * tf.maximum(180 - archer_distance, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "sabor_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 / 2 * sabor_Similarity * sabor_distance + 1 / 2 * (1 - sabor_Similarity) * tf.maximum(180 - sabor_distance, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_9": {
                "a": {
                    "value": "archer_code",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_10": {
                "a": {
                    "value": "sabor_code",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_12": {
                "a": {
                    "value": "archer_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_13": {
                "a": {
                    "value": "sabor_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_14": {
                "tensor": {
                    "value": "tf.tile(tf.diag_part(archer_matrix), [omega_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[omega_size, omega_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "tensor": {
                    "value": "tf.tile(tf.diag_part(archer_matrix), [batch_size - omega_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size - omega_size, omega_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_16": {
                "input": {
                    "value": "tf.diag_part(sabor_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[omega_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_14": {
                "input": {
                    "value": "tf.diag_part(archer_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[omega_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_15": {
                "input": {
                    "value": "tf.diag_part(archer_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size - omega_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_part_16": {
                "input": {
                    "value": "sabor_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(sabor_code, tf.transpose(sabor_code))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_18": {
                "a": {
                    "value": "archer_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.reshape(tf.tile(tf.diag_part(archer_matrix), [omega_size]), [omega_size, omega_size]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_19": {
                "a": {
                    "value": "archer_code",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(sabor_code)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_14": {
                "input": {
                    "value": "archer_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(archer_code, tf.transpose(archer_code))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_15": {
                "input": {
                    "value": "archer_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(archer_code, tf.transpose(archer_code))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_19": {
                "a": {
                    "value": "sabor_code",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_20": {
                "x": {
                    "value": "180 - archer_distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_21": {
                "x": {
                    "value": "180 - sabor_distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss/M_loss.py": {
        "tensorflow": {
            "cast_8": {
                "variable": {
                    "value": "kernel_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sqrt(mix_rbf_mmd2(feature1, feature2, sigmas=bandwidths))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_19": {
                "variable": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_21": {
                "variable": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_part_23": {
                "variable": {
                    "value": "X_sqnorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, X, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_24": {
                "variable": {
                    "value": "Y_sqnorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y, Y, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_62": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K_XX.get_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K_YY.get_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K_XX.get_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "variable": {
                    "value": "K_XY_sums_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XY + wt * tf.exp(-gamma * (-2 * XY + c(X_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "K_XY_sums_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XY + wt * tf.exp(-gamma * (-2 * XY + c(X_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "Kt_XX_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Kt_XX_sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(K_XX, 1) - diag_X",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "Kt_YY_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Kt_YY_sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(K_YY, 1) - diag_Y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_119": {
                "variable": {
                    "value": "K_XY_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "K_XY_sums_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(K_XY, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_98": {
                "variable": {
                    "value": "const_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "const_diagonal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(const_diagonal, tf.float32)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_part_103": {
                "variable": {
                    "value": "diag_X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XX + wt * tf.exp(-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_part_104": {
                "variable": {
                    "value": "diag_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_YY + wt * tf.exp(-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_106": {
                "variable": {
                    "value": "sum_diag_X",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diag_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.diag_part(K_XX)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_107": {
                "variable": {
                    "value": "sum_diag_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diag_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.diag_part(K_YY)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_8": {
                "x": {
                    "value": "mix_rbf_mmd2(feature1, feature2, sigmas=bandwidths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "wts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(sigmas)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trace_74": {
                "variable": {
                    "value": "trace_X",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XX + wt * tf.exp(-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_75": {
                "variable": {
                    "value": "trace_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_YY + wt * tf.exp(-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_88": {
                "x": {
                    "value": "tf.maximum(var_est, min_var_est)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XX + wt * tf.exp(-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_YY + wt * tf.exp(-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_32": {
                "x": {
                    "value": "-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_33": {
                "x": {
                    "value": "-gamma * (-2 * XY + c(X_sqnorms) + r(Y_sqnorms))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_34": {
                "x": {
                    "value": "-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_88": {
                "x": {
                    "value": "var_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 / (m ** 2 * (m - 1) ** 2) * (2 * sq_sum(Kt_XX_sums) - Kt_XX_2_sum + 2 * sq_sum(Kt_YY_sums) - Kt_YY_2_sum) - (4 * m - 6) / (m ** 3 * (m - 1) ** 3) * (Kt_XX_sum ** 2 + Kt_YY_sum ** 2) + 4 * (m - 2) / (m ** 3 * (m - 1) ** 2) * (sq_sum(K_XY_sums_1) + sq_sum(K_XY_sums_0)) - 4 * (m - 3) / (m ** 3 * (m - 1) ** 2) * K_XY_2_sum - (8 * m - 12) / (m ** 5 * (m - 1)) * K_XY_sum ** 2 + 8 / (m ** 3 * (m - 1)) * (1 / m * (Kt_XX_sum + Kt_YY_sum) * K_XY_sum - dot(Kt_XX_sums, K_XY_sums_1) - dot(Kt_YY_sums, K_XY_sums_0))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "min_var_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_eps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_66": {
                "input_tensor": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XX + wt * tf.exp(-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_YY + wt * tf.exp(-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XY + wt * tf.exp(-gamma * (-2 * XY + c(X_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_79": {
                "input_tensor": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XY + wt * tf.exp(-gamma * (-2 * XY + c(X_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XX + wt * tf.exp(-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_78": {
                "input_tensor": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_YY + wt * tf.exp(-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/VGG16_net.py": {
        "tensorflow": {
            "reshape_29": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[net_shape[0], shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_22": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "kernel_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.glorot_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "kernel_shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_42": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', kernel_shape, tf.float32, tf.glorot_uniform_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim.value, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'map'",
                            "Method Argument"
                        ],
                        [
                            "'FC'",
                            "Method Argument"
                        ],
                        [
                            "'con'",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'map'",
                            "Method Argument"
                        ],
                        [
                            "'FC'",
                            "Method Argument"
                        ],
                        [
                            "'con'",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'map'",
                            "Method Argument"
                        ],
                        [
                            "'FC'",
                            "Method Argument"
                        ],
                        [
                            "'con'",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "Reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "moments_44": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=net, filter=weight1, strides=strides, padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_45": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=net, filter=weight1, strides=strides, padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', kernel_shape[3], tf.float32, tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_48": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=net, filter=weight1, strides=strides, padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', kernel_shape[3], tf.float32, tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_49": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'map'",
                            "Method Argument"
                        ],
                        [
                            "'FC'",
                            "Method Argument"
                        ],
                        [
                            "'con'",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "Reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_61": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [input_dim.value, output_dim], tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_64": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_65": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [output_dim], tf.float32, tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_70": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "regularizer(weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_57": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "a": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.pool4",
                            "Attribute"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv(net, [3, 3, 512, 512], [1, 1, 1, 1], is_training, reuse, padding='SAME', scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(net, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(net, [net_shape[0], shape])",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc1')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 4096, Training=is_training, Reuse=reuse, scope='fc2')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 2048, Training=is_training, Reuse=reuse, scope='fc3')",
                            "Call"
                        ],
                        [
                            "FullyConnected(net, 128, last=True, Training=is_training, Reuse=reuse, scope='fc4')",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.batch_normalization(conv1, mean, variance, bias1, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, bias1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.matmul(net, weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(net)",
                            "Call"
                        ],
                        [
                            "tf.matmul(net, weight)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(net, mean, variance, bias, None, 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [input_dim.value, output_dim], tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/util.py": {
        "tensorflow": {
            "get_collection_38": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/vgg16.py": {
        "tensorflow": {
            "split_35": {
                "variable": {
                    "value": "(red, green, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_40": {
                "variable": {
                    "value": "bgr",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[blue - VGG_MEAN[0], green - VGG_MEAN[1], red - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "self.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "self.relu7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.fc8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_85": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool_88": {
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_94": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_conv_filter(name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_97": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_99": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, conv_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_115": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_120": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_123": {
                "value": {
                    "value": "self.data_dict[name][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "self.data_dict[name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottom, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_fc_weight(name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/train.py": {
        "tensorflow": {
            "GPUOptions_24": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.65",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_25": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_27": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_28": {
                "variable": {
                    "value": "leaning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_29": {
                "variable": {
                    "value": "leaning_rate1",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_30": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "batch_source",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[source_batch, target_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_48": {
                "variable": {
                    "value": "(source_feature, target_source_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "feature_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.FC(Map_source, 'source_ft', False, False)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_50": {
                "variable": {
                    "value": "batch_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fake_batch, target_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_53": {
                "variable": {
                    "value": "(fake_feature, target_fake_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "feature_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.FC(Map_fake, 'fake_ft', False, False)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_55": {
                "variable": {
                    "value": "source_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "source_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "source_Q_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(source_feature, source_sign), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_60": {
                "variable": {
                    "value": "fake_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fake_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "fake_Q_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(fake_feature, fake_sign), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_65": {
                "variable": {
                    "value": "target_source_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target_source_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_66": {
                "variable": {
                    "value": "target_fake_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target_fake_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "variable": {
                    "value": "t_s_Q_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(target_source_sign, target_source_feature), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "t_f_Q_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(target_fake_sign, target_fake_feature), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "distance_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target_source_sign - target_fake_sign)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_77": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_82": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_83": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Coordinator_84": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_85": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_57": {
                "x": {
                    "value": "tf.subtract(source_feature, source_sign)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_62": {
                "x": {
                    "value": "tf.subtract(fake_feature, fake_sign)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_67": {
                "x": {
                    "value": "tf.subtract(target_source_sign, target_source_feature)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_68": {
                "x": {
                    "value": "tf.subtract(target_fake_sign, target_fake_feature)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_73": {
                "x": {
                    "value": "target_source_sign - target_fake_sign",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_78": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_25": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.65)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_57": {
                "x": {
                    "value": "source_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "source_sign",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(source_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_62": {
                "x": {
                    "value": "fake_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "fake_sign",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(fake_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_67": {
                "x": {
                    "value": "target_source_sign",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(target_source_feature)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_source_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_68": {
                "x": {
                    "value": "target_fake_sign",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(target_fake_feature)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_fake_feature",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}