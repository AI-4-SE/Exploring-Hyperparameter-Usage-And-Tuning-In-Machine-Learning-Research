{
    "engine.py": {
        "torch": {
            "Adam_11": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lrate",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wdecay",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "einsum_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncvl,vw->ncwl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(order * support_len + 1) * c_in",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_45": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.filter_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.gate_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.residual_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.skip_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.gconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.start_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.end_conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "end_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.end_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "end_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "skip[:, :, :, -s.size(3):]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "s + skip",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.end_conv_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.receptive_field - in_len, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "adp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(torch.mm(self.nodevec1, self.nodevec2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_169": {
                "variable": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_convs[i](residual)",
                            "Call"
                        ],
                        [
                            "torch.tanh(filter)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_convs[i](residual)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.nodevec1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_nodes, 10).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.nodevec2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(10, num_nodes).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "svd_86": {
                "variable": {
                    "value": "(m, p, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "aptinit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_87": {
                "variable": {
                    "value": "initemb1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m[:, :10]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(p[:10] ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_88": {
                "variable": {
                    "value": "initemb2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(p[:10] ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "n[:, :10].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.nodevec1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initemb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(m[:, :10], torch.diag(p[:10] ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.nodevec2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initemb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.diag(p[:10] ** 0.5), n[:, :10].t())",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_148": {
                "input": {
                    "value": "torch.mm(self.nodevec1, self.nodevec2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_87": {
                "input": {
                    "value": "p[:10] ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_88": {
                "input": {
                    "value": "p[:10] ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dilation_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "new_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "new_dilation * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv1d_102": {
                "in_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dilation_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "new_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "new_dilation * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv1d_107": {
                "in_channels": {
                    "value": "dilation_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_112": {
                "in_channels": {
                    "value": "dilation_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "residual_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_148": {
                "input": {
                    "value": "self.nodevec1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.nodevec2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_80": {
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_81": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "original_train.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_137": {
                "variable": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_141": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "engine.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save + '_exp' + str(args.expid) + '_best_' + str(round(his_loss[bestid], 2)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, args.epochs + 1)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_83": {
                "variable": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_85": {
                "variable": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_104": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_127": {
                "obj": {
                    "value": "engine.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save + '_epoch_' + str(i) + '_' + str(round(mvalid_loss, 2)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_133": {
                "f": {
                    "value": "args.save + '_epoch_' + str(bestid + 1) + '_' + str(round(his_loss[bestid], 2)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preutil.py": {
        "torch": {
            "where_170": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_173": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_187": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_188": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_190": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_201": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_204": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_169": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_174": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_177": {
                "input": {
                    "value": "masked_mse(preds=preds, labels=labels, null_val=null_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_186": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_191": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_200": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_205": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_170": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_170": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_173": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_173": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_187": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_187": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_190": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_190": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_201": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_201": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_202": {
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_204": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_204": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_165": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_182": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_196": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "SummaryWriter_46": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "pjoin('./result', 'train', args.city, f'{args.tinterval}')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_47": {
                "variable": {
                    "value": "val_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "pjoin('./result', 'val', args.city, f'{args.tinterval}')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_155": {
                "variable": {
                    "value": "realy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_56": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "engine.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '_exp' + str(args.expid) + '_best_' + str(round(his_loss[bestid], 2)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, args.epochs + 1)",
                            "Call"
                        ],
                        [
                            "range(args.seq_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_95": {
                "variable": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_97": {
                "variable": {
                    "value": "trainy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "engine.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '_epoch_' + str(i) + '_' + str(round(mvalid_mae, 2)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_148": {
                "f": {
                    "value": "save_path + '_epoch_' + str(bestid + 1) + '_' + str(round(his_loss[bestid], 2)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_161": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "testx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "testy",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "where_169": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_172": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_186": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_187": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_189": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_202": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_205": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_168": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_173": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_176": {
                "input": {
                    "value": "masked_mse(preds=preds, labels=labels, null_val=null_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_185": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_190": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_201": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_206": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_169": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_169": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_172": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_186": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_186": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_189": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_189": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_202": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_202": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask / torch.mean(mask)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels != null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ],
                        [
                            "~torch.isnan(labels)",
                            "UnaryOp"
                        ],
                        [
                            "labels >= null_val",
                            "Compare"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(mask), torch.zeros_like(mask), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_203": {
                "input": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_205": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_205": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds - labels) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ],
                        [
                            "torch.abs(preds - labels) / labels",
                            "BinOp"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(loss), torch.zeros_like(loss), loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_164": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_181": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_195": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}