{
    "CNN_img.py": {
        "tensorflow": {
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "MV_analysis",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "MV_synthesis",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "analysis",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "synthesis",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_13": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "layer_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "layer_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "layer_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "layer_3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "MC_network.py": {
        "tensorflow": {
            "relu_9": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=input, filters=OC, kernel_size=1, strides=1, padding='same', kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=True), name=name + 'map')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name + 'relu1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_11": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "l1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(input, name=name + 'relu1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=l1, filters=np.minimum(IC, OC), kernel_size=3, strides=1, padding='same', kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=True), name=name + 'l1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "np.minimum(IC, OC)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'l1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_14": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "l1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(input, name=name + 'relu1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=l1, filters=np.minimum(IC, OC), kernel_size=3, strides=1, padding='same', kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=True), name=name + 'l1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_16": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "l2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(l1, name='relu2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=l2, filters=OC, kernel_size=3, strides=1, padding='same', kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=True), name=name + 'l2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'l2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "variable": {
                    "value": "m1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=input, filters=OC, kernel_size=1, strides=1, padding='same', kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=True), name=name + 'map')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mc1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "average_pooling2d_33": {
                "variable": {
                    "value": "m3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "m2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resblock(m1, 64, 64, name='mc2')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "average_pooling2d_37": {
                "variable": {
                    "value": "m5",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "m4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resblock(m3, 64, 64, name='mc4')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "variable": {
                    "value": "m12",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "m11",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resblock(m10, 64, 64, name='mc11')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mc12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "m12",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "m12",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=m11, filters=64, kernel_size=3, strides=1, padding='same', kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=True), name='mc12')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(m12, name='relu12')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_60": {
                "variable": {
                    "value": "m13",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "m12",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=m11, filters=64, kernel_size=3, strides=1, padding='same', kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=True), name='mc12')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(m12, name='relu12')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mc13",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_20": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=input, filters=OC, kernel_size=1, strides=1, padding='same', kernel_initializer=tf.contrib.layers.xavier_initializer(uniform=True), name=name + 'map')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'map'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "m7",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resblock(m6, 64, 64, name='mc7')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_49": {
                "input": {
                    "value": "m9",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resblock(m8, 64, 64, name='mc9')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "OpenDVC_test_P-frame.py": {
        "tensorflow": {
            "ConfigProto_13": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_14": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "Y0_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "Y1_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "string_mv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "string_mv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "entropy_bottleneck_mv.compress(flow_latent)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(string_mv, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "MC_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_hat, Y0_com, Y1_warp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "variable": {
                    "value": "string_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "string_res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "entropy_bottleneck_res.compress(res_latent)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(string_res, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_81": {
                "variable": {
                    "value": "Y1_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Res_hat + Y1_MC",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_89": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "train_mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(Y1_com, Y1_raw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "flow_motion",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "quality",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.image.ssim_multiscale(Y1_com, Y1_raw, max_val=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_84": {
                "x": {
                    "value": "Y1_com",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(Res_hat + Y1_MC, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y1_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, Height, Width, Channel])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_85": {
                "x": {
                    "value": "1.0 / train_mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ssim_multiscale_87": {
                "img1": {
                    "value": "Y1_com",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(Res_hat + Y1_MC, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "img2": {
                    "value": "Y1_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, Height, Width, Channel])",
                            "Call"
                        ]
                    ]
                },
                "max_val": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "OpenDVC_test_P-frame_decoder.py": {
        "tensorflow": {
            "ConfigProto_13": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_14": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "Y0_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "string_mv_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "string_res_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "MC_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_hat, Y0_com, Y1_warp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_71": {
                "variable": {
                    "value": "Y1_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Res_hat + Y1_MC",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_79": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "input": {
                    "value": "string_mv_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, [])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "input": {
                    "value": "string_res_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, [])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "OpenDVC_test_video.py": {
        "tensorflow": {
            "ConfigProto_14": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_15": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "Y0_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "Y1_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "string_mv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "string_mv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "entropy_bottleneck_mv.compress(flow_latent)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(string_mv, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "MC_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_hat, Y0_com, Y1_warp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "string_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "string_res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "entropy_bottleneck_res.compress(res_latent)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(string_res, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_106": {
                "variable": {
                    "value": "Y1_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Res_hat + Y1_MC",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_114": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "train_mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(Y1_com, Y1_raw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "flow_motion",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "variable": {
                    "value": "quality",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.image.ssim_multiscale(Y1_com, Y1_raw, max_val=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_109": {
                "x": {
                    "value": "Y1_com",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(Res_hat + Y1_MC, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y1_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, Height, Width, Channel])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_110": {
                "x": {
                    "value": "1.0 / train_mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ssim_multiscale_112": {
                "img1": {
                    "value": "Y1_com",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(Res_hat + Y1_MC, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "img2": {
                    "value": "Y1_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, Height, Width, Channel])",
                            "Call"
                        ]
                    ]
                },
                "max_val": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "OpenDVC_test_video_decoder.py": {
        "tensorflow": {
            "ConfigProto_14": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_15": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "Y0_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "string_mv_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "string_res_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "MC_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_hat, Y0_com, Y1_warp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_80": {
                "variable": {
                    "value": "Y1_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "Res_hat + Y1_MC",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_89": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "string_mv_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, [])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "string_res_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, [])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "OpenDVC_train_MS-SSIM.py": {
        "tensorflow": {
            "ConfigProto_12": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_13": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "Y0_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "Y1_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "MC_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_hat, Y0_com, Y1_warp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "frame_msssim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.image.ssim_multiscale(Y1_com, Y1_raw, max_val=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "create_global_step_94": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_96": {
                "variable": {
                    "value": "train_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_98": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_101": {
                "variable": {
                    "value": "aux_optimizer2",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_104": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(train_loss_total, global_step=step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "aux_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "aux_optimizer.minimize(entropy_bottleneck_mv.losses[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_111": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./OpenDVC_MS-SSIM_' + str(l)",
                            "BinOp"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_112": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_114": {
                "variable": {
                    "value": "saver_psnr",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "latest_checkpoint_115": {
                "variable": {
                    "value": "latest",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "'./OpenDVC_PSNR_' + str(l * 32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_107": {
                "name": {
                    "value": "ms-ssim",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "frame_msssim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.reduce_mean(tf.image.ssim_multiscale(Y1_com, Y1_raw, max_val=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_108": {
                "name": {
                    "value": "bits_total",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "train_bpp_MV + train_bpp_Res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "flow_motion",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "input_tensor": {
                    "value": "tf.log(MV_likelihoods)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "tf.log(Res_likelihoods)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ssim_multiscale_86": {
                "img1": {
                    "value": "Y1_com",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Res_hat + Y1_MC",
                            "BinOp"
                        ]
                    ]
                },
                "img2": {
                    "value": "Y1_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, Height, Width, Channel])",
                            "Call"
                        ]
                    ]
                },
                "max_val": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_82": {
                "x": {
                    "value": "MV_likelihoods",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_83": {
                "x": {
                    "value": "Res_likelihoods",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "merge_all_161": {
                "variable": {
                    "value": "merged_summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "OpenDVC_train_PSNR.py": {
        "tensorflow": {
            "ConfigProto_12": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_13": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "Y0_com",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "Y1_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, Height, Width, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "MC_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow_hat, Y0_com, Y1_warp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "total_mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(Y1_com, Y1_raw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "warp_mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(Y1_warp, Y1_raw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "MC_mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(Y1_raw, Y1_MC)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "create_global_step_100": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_102": {
                "variable": {
                    "value": "train_MV",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_103": {
                "variable": {
                    "value": "train_MC",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_104": {
                "variable": {
                    "value": "train_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_106": {
                "variable": {
                    "value": "aux_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_109": {
                "variable": {
                    "value": "aux_optimizer2",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_112": {
                "variable": {
                    "value": "train_op_MV",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_MV",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(train_loss_MV, global_step=step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "aux_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "aux_optimizer.minimize(entropy_bottleneck_mv.losses[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "group_113": {
                "variable": {
                    "value": "train_op_MC",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_MC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(train_loss_MC, global_step=step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "aux_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "aux_optimizer.minimize(entropy_bottleneck_mv.losses[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "group_114": {
                "variable": {
                    "value": "train_op_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(train_loss_total, global_step=step)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "aux_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "aux_optimizer.minimize(entropy_bottleneck_mv.losses[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_120": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./OpenDVC_PSNR_' + str(l)",
                            "BinOp"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_121": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_124": {
                "variable": {
                    "value": "var_motion",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "flow_motion",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_125": {
                "variable": {
                    "value": "saver_motion",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_motion",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='flow_motion')",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_117": {
                "name": {
                    "value": "psnr",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "psnr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10.0 * tf.log(1.0 / total_mse) / tf.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_118": {
                "name": {
                    "value": "bits_total",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "train_bpp_MV + train_bpp_Res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "flow_motion",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "input_tensor": {
                    "value": "tf.log(MV_likelihoods)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "tf.log(Res_likelihoods)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_86": {
                "x": {
                    "value": "Y1_com",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Res_hat + Y1_MC",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "Y1_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, Height, Width, Channel])",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_87": {
                "x": {
                    "value": "Y1_warp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.image.dense_image_warp(Y0_com, flow_hat)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y1_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, Height, Width, Channel])",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_88": {
                "x": {
                    "value": "Y1_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, Height, Width, Channel])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y1_MC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MC_network.MC(MC_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_90": {
                "x": {
                    "value": "1.0 / total_mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_82": {
                "x": {
                    "value": "MV_likelihoods",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_83": {
                "x": {
                    "value": "Res_likelihoods",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "merge_all_184": {
                "variable": {
                    "value": "merged_summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "motion.py": {
        "tensorflow": {
            "reduce_mean_31": {
                "variable": {
                    "value": "loss_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(im1_warped_fine, im2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_pooling2d_38": {
                "variable": {
                    "value": "im1_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "im1_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "average_pooling2d_39": {
                "variable": {
                    "value": "im1_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "im1_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling2d(im1_4, pool_size=2, strides=2, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "average_pooling2d_40": {
                "variable": {
                    "value": "im1_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "im1_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling2d(im1_3, pool_size=2, strides=2, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "average_pooling2d_41": {
                "variable": {
                    "value": "im1_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "im1_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling2d(im1_2, pool_size=2, strides=2, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "average_pooling2d_43": {
                "variable": {
                    "value": "im2_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "im2_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "average_pooling2d_44": {
                "variable": {
                    "value": "im2_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "im2_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling2d(im2_4, pool_size=2, strides=2, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "average_pooling2d_45": {
                "variable": {
                    "value": "im2_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "im2_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling2d(im2_3, pool_size=2, strides=2, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "average_pooling2d_46": {
                "variable": {
                    "value": "im2_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "im2_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling2d(im2_2, pool_size=2, strides=2, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "flow_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, h // 16, w // 16, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_7": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[im1_warp, im2, flow]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_9": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([im1_warp, im2, flow], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_11": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=input, filters=32, kernel_size=[7, 7], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_13": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=conv1, filters=64, kernel_size=[7, 7], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_15": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=conv2, filters=32, kernel_size=[7, 7], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_17": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=conv3, filters=16, kernel_size=[7, 7], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "'flow_cnn_' + str(layer)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_31": {
                "x": {
                    "value": "im1_warped_fine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.image.dense_image_warp(im1, flow_fine)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "im2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_25": {
                "input": {
                    "value": "im2",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ms_ssim_np.py": {
        "tensorflow": {
            "py_func_38": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_calc_msssim_orig",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[img1, img2]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "MS-SSIM",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "ms-ssim_np",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "make_NHWC",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "resnet.py": {
        "tensorflow": {
            "get_variable_32": {
                "variable": {
                    "value": "new_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_59": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_64": {
                "variable": {
                    "value": "bn_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "BN_EPSILON",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=[3, 3, input_channel, output_channel])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(input_layer, mean, variance, beta, gamma, BN_EPSILON)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(conv_layer, out_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(input_layer, in_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_100": {
                "variable": {
                    "value": "relu_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(input_layer, mean, variance, beta, gamma, BN_EPSILON)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(conv_layer, out_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(input_layer, in_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_103": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=[3, 3, input_channel, output_channel])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_207": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones([128, 32, 32, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_209": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_210": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "histogram_15": {
                "name": {
                    "value": "tensor_name + '/activations'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_16": {
                "name": {
                    "value": "tensor_name + '/sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool_141": {
                "variable": {
                    "value": "pooled_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_143": {
                "variable": {
                    "value": "padded_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pooled_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(input_layer, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [input_channel // 2, input_channel // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_192": {
                "variable": {
                    "value": "relu_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(input_layer, mean, variance, beta, gamma, BN_EPSILON)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(conv_layer, out_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(input_layer, in_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_193": {
                "variable": {
                    "value": "global_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zero_fraction_16": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "a": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "fc_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "create_variables(name='fc_weights', shape=[input_dim, num_labels], is_fc_layer=True, initializer=tf.uniform_unit_scaling_initializer(factor=1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "conv1_in_block",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_131": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=[3, 3, input_channel, output_channel])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "conv2_in_block",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "conv0",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "uniform_unit_scaling_initializer_45": {
                "factor": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_61": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_63": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "'conv1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "'conv2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "'conv3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}