{
    "dataset/cost2100.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "data_test",
                    "possible_values": []
                },
                "data": {
                    "value": "data_test",
                    "possible_values": [
                        [
                            "sio.loadmat(dir_test)['HT']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(data_test, dtype=torch.float32).view(data_test.shape[0], channel, nt, nc)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "real",
                    "possible_values": []
                },
                "data": {
                    "value": "np.real(raw_test)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "imag",
                    "possible_values": []
                },
                "data": {
                    "value": "np.imag(raw_test)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "raw_test",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real.view(raw_test.shape[0], nt, nc_expand, 1), imag.view(raw_test.shape[0], nt, nc_expand, 1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "TensorDataset_35": {
                "variable": {
                    "value": "self.test_dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data_test",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "MSELoss_28": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "model/acrnet.py": {
        "torch": {
            "PReLU_34": {
                "variable": {
                    "value": "self.prelu1",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "width",
                    "possible_values": [
                        [
                            "8 * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "init": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "PReLU_36": {
                "variable": {
                    "value": "self.prelu2",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "width",
                    "possible_values": [
                        [
                            "8 * expansion",
                            "BinOp"
                        ]
                    ]
                },
                "init": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "PReLU_38": {
                "variable": {
                    "value": "self.prelu3",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "2",
                    "possible_values": []
                },
                "init": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "Identity_39": {
                "variable": {
                    "value": "self.identity",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "PReLU_55": {
                "variable": {
                    "value": "self.prelu1",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "2",
                    "possible_values": []
                },
                "init": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "PReLU_57": {
                "variable": {
                    "value": "self.prelu2",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "2",
                    "possible_values": []
                },
                "init": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "Identity_58": {
                "variable": {
                    "value": "self.identity",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.encoder_feature",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv5x5_bn', ConvBN(in_channels, 2, 5)), ('prelu', nn.PReLU(num_parameters=2, init=0.3)), ('ACREncoderBlock1', ACREncoderBlock()), ('ACREncoderBlock2', ACREncoderBlock())])",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.encoder_fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "total_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "total_size // reduction",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.decoder_fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "total_size // reduction",
                    "possible_values": []
                },
                "out_features": {
                    "value": "total_size",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.decoder_feature",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv5x5_bn', ConvBN(2, in_channels, 5)), ('prelu', nn.PReLU(num_parameters=2, init=0.3)), ('ACRDecoderBlock1', ACRDecoderBlock(expansion=expansion)), ('ACRDecoderBlock2', ACRDecoderBlock(expansion=expansion)), ('sigmoid', nn.Sigmoid())])",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "[(i - 1) // 2 for i in kernel_size]",
                            "ListComp"
                        ],
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "out_planes",
                    "possible_values": []
                }
            },
            "PReLU_80": {
                "num_parameters": {
                    "value": "2",
                    "possible_values": []
                },
                "init": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "PReLU_89": {
                "num_parameters": {
                    "value": "2",
                    "possible_values": []
                },
                "init": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "Sigmoid_92": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils/init.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_47": {
                "f": {
                    "value": "args.pretrained",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "possible_values": []
                }
            },
            "device_48": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "utils/solver.py": {
        "torch": {
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log10_73": {
                "input": {
                    "value": "iter_nmse.avg",
                    "possible_values": []
                }
            },
            "log10_70": {
                "input": {
                    "value": "iter_nmse.avg",
                    "possible_values": []
                }
            }
        }
    },
    "utils/statics.py": {
        "torch": {
            "cat_59": {
                "variable": {
                    "value": "sparse_pred",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sparse_pred, zeros)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sqrt_63": {
                "variable": {
                    "value": "norm_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_pred.sum(dim=1)",
                    "possible_values": []
                }
            },
            "sqrt_66": {
                "variable": {
                    "value": "norm_gt",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_gt.sum(dim=1)",
                    "possible_values": []
                }
            },
            "sqrt_72": {
                "variable": {
                    "value": "norm_cross",
                    "possible_values": []
                },
                "input": {
                    "value": "real_cross ** 2 + imag_cross ** 2",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "fft_60": {
                "input": {
                    "value": "sparse_pred",
                    "possible_values": [
                        [
                            "sparse_pred - 0.5",
                            "BinOp"
                        ],
                        [
                            "sparse_pred.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((sparse_pred, zeros), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "signal_ndim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}