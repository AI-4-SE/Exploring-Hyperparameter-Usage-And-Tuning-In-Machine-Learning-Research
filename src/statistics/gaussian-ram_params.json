{
    "dataloader.py": {
        "torch": {
            "MnistClutteredDataset_10": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_19": {
                "obj": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inference.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "GDRAM_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fast": {
                    "value": "Fast",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_60": {
                "variable": {
                    "value": "location",
                    "possible_values": []
                },
                "input": {
                    "value": "location",
                    "possible_values": [
                        [
                            "torch.clamp(location, min=-1 + self.normalized_glimpse_size / 2, max=1 - self.normalized_glimpse_size / 2)",
                            "Call"
                        ],
                        [
                            "new_location",
                            "Name"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + self.normalized_glimpse_size / 2",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - self.normalized_glimpse_size / 2",
                    "possible_values": []
                }
            },
            "empty_63": {
                "variable": {
                    "value": "location_log_probs",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_glimpses",
                    "possible_values": []
                }
            },
            "empty_64": {
                "variable": {
                    "value": "locations",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_glimpses",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.location_size",
                    "possible_values": []
                }
            },
            "empty_65": {
                "variable": {
                    "value": "baselines",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_glimpses",
                    "possible_values": []
                }
            },
            "empty_66": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_glimpses",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_91": {
                "variable": {
                    "value": "new_location",
                    "possible_values": []
                },
                "input": {
                    "value": "new_location",
                    "possible_values": [
                        [
                            "location.detach() + loc_diff",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(new_location, min=-1 + self.normalized_glimpse_size / 2, max=1 - self.normalized_glimpse_size / 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + self.normalized_glimpse_size / 2",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - self.normalized_glimpse_size / 2",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "hidden",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden1, hidden2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_115": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "(torch.ones(batch_size, 2) * math.exp(-1 / 2)).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.mean(std, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_57": {
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "modules.py": {
        "torch": {
            "GlimpseNetwork_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_12": {
                    "variable": {
                        "value": "self.fc_g",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(input_channel, 128, kernel_size=3, stride=1, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_23": {
                    "variable": {
                        "value": "self.fc_l",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(location_size, internal_size)",
                        "possible_values": []
                    }
                },
                "Linear_27": {
                    "variable": {
                        "value": "self.fc_gg",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "glimpse_size // 4 * glimpse_size // 4 * 256",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "output_size",
                        "possible_values": [
                            [
                                "2",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Linear_28": {
                    "variable": {
                        "value": "self.fc_lg",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "internal_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "output_size",
                        "possible_values": [
                            [
                                "2",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "CoreNetwork_40": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "RNNCell_46": {
                    "variable": {
                        "value": "self.rnn_cell",
                        "possible_values": []
                    },
                    "input_size": {
                        "value": "input_size",
                        "possible_values": []
                    },
                    "hidden_size": {
                        "value": "hidden_size",
                        "possible_values": [
                            [
                                "256",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "nonlinearity": {
                        "value": "relu",
                        "possible_values": []
                    }
                }
            },
            "GRUCoreNetwork_57": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "GRUCell_63": {
                    "variable": {
                        "value": "self.rnn_cell",
                        "possible_values": []
                    },
                    "input_size": {
                        "value": "input_size",
                        "possible_values": []
                    },
                    "hidden_size": {
                        "value": "hidden_size",
                        "possible_values": [
                            [
                                "256",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "GlimpseLSTMCoreNetwork_74": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "LSTMCell_80": {
                    "variable": {
                        "value": "self.lstm_cell",
                        "possible_values": []
                    },
                    "input_size": {
                        "value": "input_size",
                        "possible_values": []
                    },
                    "hidden_size": {
                        "value": "hidden_size",
                        "possible_values": [
                            [
                                "256",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "LocationLSTMCoreNetwork_91": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.glimpse_size": {
                    "value": "glimpse_size",
                    "possible_values": []
                },
                "LSTMCell_99": {
                    "variable": {
                        "value": "self.lstm_cell",
                        "possible_values": []
                    },
                    "input_size": {
                        "value": "input_size",
                        "possible_values": []
                    },
                    "hidden_size": {
                        "value": "hidden_size",
                        "possible_values": [
                            [
                                "256",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Sequential_102": {
                    "variable": {
                        "value": "self.context_net1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(3, 64, 3, padding=1)",
                        "possible_values": []
                    }
                },
                "Sequential_107": {
                    "variable": {
                        "value": "self.context_net2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(64, 64, 3, padding=1)",
                        "possible_values": []
                    }
                },
                "Linear_113": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "glimpse_size // 4 * glimpse_size // 4 * 64",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "hidden_size",
                        "possible_values": [
                            [
                                "256",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "EmissionNetwork_128": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_133": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(input_size, hidden)",
                        "possible_values": []
                    }
                },
                "Sequential_138": {
                    "variable": {
                        "value": "self.mu_net",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(hidden, output_size)",
                        "possible_values": []
                    }
                },
                "Sequential_143": {
                    "variable": {
                        "value": "self.logvar_net",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(hidden, output_size)",
                        "possible_values": []
                    }
                },
                "self.unifrom": {
                    "value": "uniform",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ActionNetwork_175": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_180": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(input_size, hidden)",
                        "possible_values": []
                    }
                }
            },
            "BaselineNetwork_192": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_197": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(input_size, hidden_size)",
                        "possible_values": []
                    }
                }
            },
            "relu_34": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_gg(hg) * self.fc_lg(hl)",
                    "possible_values": []
                }
            },
            "interpolate_120": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, (self.glimpse_size, self.glimpse_size))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.glimpse_size, self.glimpse_size)",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.hidden_size)",
                    "possible_values": []
                }
            },
            "exp_156": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar * 0.5",
                    "possible_values": []
                }
            },
            "sigmoid_203": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x.detach())",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "possible_values": []
                }
            },
            "Normal_161": {
                "variable": {
                    "value": "distribution",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "possible_values": [
                        [
                            "self.mu_net(z)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(logvar * 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_162": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "distribution.sample()",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "log_p",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "possible_values": [
                        [
                            "distribution.log_prob(output)",
                            "Call"
                        ],
                        [
                            "torch.sum(log_p, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.ones(output.size(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_170": {
                "variable": {
                    "value": "log_p",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "input_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_16": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "location_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "internal_size",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_110": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_135": {
                "num_features": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_140": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_182": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_198": {
                "in_features": {
                    "value": "input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_132": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_134": {
                "variable": {
                    "value": "predtion_loss_fn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "args.random_seed",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_64": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_65": {
                "variable": {
                    "value": "valid_sampler",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MnistClutteredDataset(args.data_path, type='train', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "valid_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MnistClutteredDataset(args.data_path, type='train', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(args.data_path, train=False, transform=transform)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_87": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_88": {
                "variable": {
                    "value": "valid_sampler",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MnistClutteredDataset(args.data_path, type='train', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "valid_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MnistClutteredDataset(args.data_path, type='train', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ],
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(args.data_path, train=False, transform=transform)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "argmax_139": {
                "variable": {
                    "value": "predictions",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logits",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mse_loss_144": {
                "variable": {
                    "value": "baseline_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "possible_values": [
                        [
                            "(labels == predictions.detach()).float().repeat(1, num_repeats)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "baselines",
                    "possible_values": []
                }
            },
            "mean_146": {
                "variable": {
                    "value": "reinforce_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(-location_log_probs * b_rewards, dim=1)",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_path, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MnistClutteredDataset(args.data_path, type='train', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "valid_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "possible_values": [
                        [
                            "MnistClutteredDataset(args.data_path, type='val', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "possible_values": [
                        [
                            "MnistClutteredDataset(args.data_path, type='test', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "load_122": {
                "f": {
                    "value": "args.checkpoint",
                    "possible_values": []
                }
            },
            "sum_147": {
                "input": {
                    "value": "-location_log_probs * b_rewards",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "argmax_190": {
                "variable": {
                    "value": "predictions",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logits",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_192": {
                "input": {
                    "value": "labels == predictions",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "theta",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                }
            },
            "Tensor_89": {
                "variable": {
                    "value": "loc",
                    "possible_values": []
                }
            },
            "affine_grid_33": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "osize",
                    "possible_values": [
                        [
                            "torch.Size([batch_size, 1, output_size, output_size])",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "grid_sample_34": {
                "variable": {
                    "value": "glimpse",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, osize, align_corners=False).to(device)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, glimpse)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}