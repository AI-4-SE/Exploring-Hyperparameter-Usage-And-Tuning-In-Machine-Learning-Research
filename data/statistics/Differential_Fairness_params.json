{
    "Gini-coefficient/compute_Gini_indx.py": {
        "sklearn": {
            "StandardScaler_67": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_71": {
                "variable": {
                    "value": "clfLR",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "demo_all_groups.py": {
        "sklearn": {
            "StandardScaler_64": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_67": {
                "variable": {
                    "value": "clfLR",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "demo_binary_groups.py": {
        "sklearn": {
            "StandardScaler_65": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_68": {
                "variable": {
                    "value": "clfLR",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "learning-algorithm-batch/run_Batch_DF_Classifier.py": {
        "sklearn": {
            "StandardScaler_44": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_50": {
                "variable": {
                    "value": "(X, y, S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_59": {
                "variable": {
                    "value": "(X, dev_X, y, dev_y, S, dev_S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.data', 1)",
                            "Call"
                        ],
                        [
                            "sk.utils.shuffle(X, y, S, random_state=0)",
                            "Call"
                        ],
                        [
                            "y.values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_109": {
                "variable": {
                    "value": "aucScore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictProb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DF_Model(devData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "DF_Model(testData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_111": {
                "variable": {
                    "value": "nn_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_135": {
                "variable": {
                    "value": "aucScore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_y.values",
                            "Attribute"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictProb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DF_Model(devData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "DF_Model(testData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_137": {
                "variable": {
                    "value": "nn_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_y.values",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_63": {
                "variable": {
                    "value": "trainData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.data', 1)",
                            "Call"
                        ],
                        [
                            "X.pipe(scale_df, scaler)",
                            "Call"
                        ],
                        [
                            "sk.utils.shuffle(X, y, S, random_state=0)",
                            "Call"
                        ],
                        [
                            "X.values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "trainLabel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y.reshape((-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "testData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_X.pipe(scale_df, scaler)",
                            "Call"
                        ],
                        [
                            "test_X.values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "devData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dev_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "epsilonBase",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "lamda",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning-algorithm-batch/run_batch_typical_clf.py": {
        "sklearn": {
            "StandardScaler_48": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_54": {
                "variable": {
                    "value": "(X, y, S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_63": {
                "variable": {
                    "value": "(X, dev_X, y, dev_y, S, dev_S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.data', 1)",
                            "Call"
                        ],
                        [
                            "sk.utils.shuffle(X, y, S, random_state=0)",
                            "Call"
                        ],
                        [
                            "y.values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_103": {
                "variable": {
                    "value": "aucScore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictProb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typical_clf(devData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "typical_clf(testData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_105": {
                "variable": {
                    "value": "nn_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_129": {
                "variable": {
                    "value": "aucScore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_y.values",
                            "Attribute"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictProb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typical_clf(devData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "typical_clf(testData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_131": {
                "variable": {
                    "value": "nn_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_y.values",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_68": {
                "variable": {
                    "value": "trainData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.data', 1)",
                            "Call"
                        ],
                        [
                            "X.pipe(scale_df, scaler)",
                            "Call"
                        ],
                        [
                            "sk.utils.shuffle(X, y, S, random_state=0)",
                            "Call"
                        ],
                        [
                            "X.values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "trainLabel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y.reshape((-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "testData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_X.pipe(scale_df, scaler)",
                            "Call"
                        ],
                        [
                            "test_X.values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "devData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dev_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning-algorithm-stochastic/run_Stochastic_DF_Classifier.py": {
        "sklearn": {
            "StandardScaler_44": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_50": {
                "variable": {
                    "value": "(X, y, S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_59": {
                "variable": {
                    "value": "(X, dev_X, y, dev_y, S, dev_S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.data', 1)",
                            "Call"
                        ],
                        [
                            "sk.utils.shuffle(X, y, S, random_state=0)",
                            "Call"
                        ],
                        [
                            "y.values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_109": {
                "variable": {
                    "value": "aucScore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictProb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DF_Model(devData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "DF_Model(testData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_111": {
                "variable": {
                    "value": "nn_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_135": {
                "variable": {
                    "value": "aucScore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_y.values",
                            "Attribute"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictProb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DF_Model(devData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "DF_Model(testData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_137": {
                "variable": {
                    "value": "nn_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_y.values",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_63": {
                "variable": {
                    "value": "trainData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.data', 1)",
                            "Call"
                        ],
                        [
                            "X.pipe(scale_df, scaler)",
                            "Call"
                        ],
                        [
                            "sk.utils.shuffle(X, y, S, random_state=0)",
                            "Call"
                        ],
                        [
                            "X.values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "trainLabel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y.reshape((-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "testData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_X.pipe(scale_df, scaler)",
                            "Call"
                        ],
                        [
                            "test_X.values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "devData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dev_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "epsilonBase",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "lamda",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning-algorithm-stochastic/run_stochastic_typical_clf.py": {
        "sklearn": {
            "StandardScaler_48": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_54": {
                "variable": {
                    "value": "(X, y, S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_63": {
                "variable": {
                    "value": "(X, dev_X, y, dev_y, S, dev_S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.data', 1)",
                            "Call"
                        ],
                        [
                            "sk.utils.shuffle(X, y, S, random_state=0)",
                            "Call"
                        ],
                        [
                            "y.values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_106": {
                "variable": {
                    "value": "aucScore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictProb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typical_clf(devData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "typical_clf(testData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_108": {
                "variable": {
                    "value": "nn_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_132": {
                "variable": {
                    "value": "aucScore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_y.values",
                            "Attribute"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictProb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typical_clf(devData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "typical_clf(testData)",
                            "Call"
                        ],
                        [
                            "predictProb.numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_134": {
                "variable": {
                    "value": "nn_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_y.values",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ],
                        [
                            "(predictProb > 0.5).numpy().reshape((-1,))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_68": {
                "variable": {
                    "value": "trainData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.data', 1)",
                            "Call"
                        ],
                        [
                            "X.pipe(scale_df, scaler)",
                            "Call"
                        ],
                        [
                            "sk.utils.shuffle(X, y, S, random_state=0)",
                            "Call"
                        ],
                        [
                            "X.values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "trainLabel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y.reshape((-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "testData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_census_data('data/adult.test', 0)",
                            "Call"
                        ],
                        [
                            "test_X.pipe(scale_df, scaler)",
                            "Call"
                        ],
                        [
                            "test_X.values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "devData",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dev_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, S, test_size=0.3, stratify=y, random_state=7)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning-algorithm-batch/DF_Training.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "epsilonPerGroup",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(probabilitiesOfPositive)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_66": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epsilonPerGroup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(probabilitiesOfPositive), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "gammaPerGroup",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(probabilitiesOfPositive)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_77": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gammaPerGroup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(probabilitiesOfPositive), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "countsClassOne",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(intersectGroups)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "countsTotal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(intersectGroups)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_25": {
                "input": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_38": {
                "input": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_50": {
                "input": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_49": {
                "input": {
                    "value": "theta_minority / theta_majority",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_63": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.max(epsilonPerGroup)",
                            "Call"
                        ],
                        [
                            "torch.max(epsilon, torch.abs(torch.log(probabilitiesOfPositive[i]) - torch.log(probabilitiesOfPositive[j])))",
                            "Call"
                        ],
                        [
                            "torch.max(epsilon, torch.abs(torch.log(1 - probabilitiesOfPositive[i]) - torch.log(1 - probabilitiesOfPositive[j])))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_64": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.max(epsilonPerGroup)",
                            "Call"
                        ],
                        [
                            "torch.max(epsilon, torch.abs(torch.log(probabilitiesOfPositive[i]) - torch.log(probabilitiesOfPositive[j])))",
                            "Call"
                        ],
                        [
                            "torch.max(epsilon, torch.abs(torch.log(1 - probabilitiesOfPositive[i]) - torch.log(1 - probabilitiesOfPositive[j])))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_76": {
                "input": {
                    "value": "spD - probabilitiesOfPositive[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_63": {
                "input": {
                    "value": "torch.log(probabilitiesOfPositive[i]) - torch.log(probabilitiesOfPositive[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_64": {
                "input": {
                    "value": "torch.log(1 - probabilitiesOfPositive[i]) - torch.log(1 - probabilitiesOfPositive[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "probabilitiesOfPositive[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "1 - probabilitiesOfPositive[j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "learning-algorithm-batch/DNN_model.py": {
        "torch": {
            "BCELoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dnn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCELoss_72": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "modelFair.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "Method Argument"
                        ],
                        [
                            "hidden1",
                            "Method Argument"
                        ],
                        [
                            "hidden1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "Method Argument"
                        ],
                        [
                            "hidden1",
                            "Method Argument"
                        ],
                        [
                            "hidden1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden2",
                            "Method Argument"
                        ],
                        [
                            "hidden2",
                            "Method Argument"
                        ],
                        [
                            "hidden2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden2",
                            "Method Argument"
                        ],
                        [
                            "hidden2",
                            "Method Argument"
                        ],
                        [
                            "hidden2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden3",
                            "Method Argument"
                        ],
                        [
                            "hidden3",
                            "Method Argument"
                        ],
                        [
                            "hidden3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.drop3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.outputLayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden3",
                            "Method Argument"
                        ],
                        [
                            "hidden3",
                            "Method Argument"
                        ],
                        [
                            "hidden3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_30": {
                "variable": {
                    "value": "self.out_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning-algorithm-stochastic/DF_Training.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "epsilonPerGroup",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(probabilitiesOfPositive)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_64": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epsilonPerGroup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(probabilitiesOfPositive), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "gammaPerGroup",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(probabilitiesOfPositive)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_75": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gammaPerGroup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(probabilitiesOfPositive), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "countsClassOne",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(intersectGroups)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "countsTotal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(intersectGroups)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_24": {
                "input": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_36": {
                "input": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_47": {
                "input": {
                    "value": "zeroTerm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_95": {
                "variable": {
                    "value": "self.countClass_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "no_of_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no_of_groups",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_96": {
                "variable": {
                    "value": "self.countTotal_hat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "no_of_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no_of_groups",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_46": {
                "input": {
                    "value": "theta_minority / theta_majority",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_61": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.max(epsilonPerGroup)",
                            "Call"
                        ],
                        [
                            "torch.max(epsilon, torch.abs(torch.log(probabilitiesOfPositive[i]) - torch.log(probabilitiesOfPositive[j])))",
                            "Call"
                        ],
                        [
                            "torch.max(epsilon, torch.abs(torch.log(1 - probabilitiesOfPositive[i]) - torch.log(1 - probabilitiesOfPositive[j])))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_62": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0)",
                            "Call"
                        ],
                        [
                            "torch.max(epsilonPerGroup)",
                            "Call"
                        ],
                        [
                            "torch.max(epsilon, torch.abs(torch.log(probabilitiesOfPositive[i]) - torch.log(probabilitiesOfPositive[j])))",
                            "Call"
                        ],
                        [
                            "torch.max(epsilon, torch.abs(torch.log(1 - probabilitiesOfPositive[i]) - torch.log(1 - probabilitiesOfPositive[j])))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_74": {
                "input": {
                    "value": "spD - probabilitiesOfPositive[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_61": {
                "input": {
                    "value": "torch.log(probabilitiesOfPositive[i]) - torch.log(probabilitiesOfPositive[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "torch.log(1 - probabilitiesOfPositive[i]) - torch.log(1 - probabilitiesOfPositive[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "probabilitiesOfPositive[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_62": {
                "input": {
                    "value": "1 - probabilitiesOfPositive[j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "learning-algorithm-stochastic/DNN_model.py": {
        "torch": {
            "BCELoss_49": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dnn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCELoss_80": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "modelFair.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "Method Argument"
                        ],
                        [
                            "hidden1",
                            "Method Argument"
                        ],
                        [
                            "hidden1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "Method Argument"
                        ],
                        [
                            "hidden1",
                            "Method Argument"
                        ],
                        [
                            "hidden1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden2",
                            "Method Argument"
                        ],
                        [
                            "hidden2",
                            "Method Argument"
                        ],
                        [
                            "hidden2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden2",
                            "Method Argument"
                        ],
                        [
                            "hidden2",
                            "Method Argument"
                        ],
                        [
                            "hidden2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden3",
                            "Method Argument"
                        ],
                        [
                            "hidden3",
                            "Method Argument"
                        ],
                        [
                            "hidden3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.drop3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.outputLayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden3",
                            "Method Argument"
                        ],
                        [
                            "hidden3",
                            "Method Argument"
                        ],
                        [
                            "hidden3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_30": {
                "variable": {
                    "value": "self.out_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}