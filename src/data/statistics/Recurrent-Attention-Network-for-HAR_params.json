{
    "kenn/AdvancedCNN.py": {
        "sklearn": {
            "confusion_matrix_236": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.argmax(self.test_y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sess.run(tf.argmax(y_, 1), feed_dict={self.X: self.test_x, self.is_training: False})",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool",
                            "Name"
                        ],
                        [
                            "pool",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[1] * shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_117": {
                "variable": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(l_op, [-1, shape[1] * shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(l_op, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_122": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=flat, units=100, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=flat, units=100, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool",
                            "Name"
                        ],
                        [
                            "pool",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[1] * shape[2] * shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_176": {
                "variable": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(l_op, [-1, shape[1] * shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(l_op, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_181": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=flat, units=100, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=flat, units=100, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_194": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_195": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.Y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_196": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_201": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.seg_len, self.num_channels, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.seg_len, self.num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv1d_71": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.conv_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling1d_84": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.pool_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_92": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(inputs=conv, pool_size=self.pool_size, strides=self.pool_strides, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(inputs=conv, pool_size=self.pool_size, strides=self.pool_strides, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv, pool_size=(self.pool_size, 1), strides=(self.pool_strides, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv, pool_size=(self.pool_size, 1), strides=(self.pool_strides, 1), padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "int(self.filters * (i + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.conv_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling1d_105": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.pool_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_132": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.k_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.conv_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_145": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(self.pool_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.pool_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(inputs=conv, pool_size=self.pool_size, strides=self.pool_strides, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(inputs=conv, pool_size=self.pool_size, strides=self.pool_strides, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv, pool_size=(self.pool_size, 1), strides=(self.pool_strides, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv, pool_size=(self.pool_size, 1), strides=(self.pool_strides, 1), padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "int(self.filters * (i + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.k_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.conv_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_166": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(self.pool_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.pool_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "self.Y * tf.log(tf.clip_by_value(y_, 1e-10, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "input": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_196": {
                "x": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_, 1), tf.argmax(self.Y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_203": {
                "config": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_104": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_144": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_165": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_193": {
                "x": {
                    "value": "tf.clip_by_value(y_, 1e-10, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_193": {
                "t": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.build_network_2d()",
                            "Call"
                        ],
                        [
                            "self.build_network()",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "input": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.build_network_2d()",
                            "Call"
                        ],
                        [
                            "self.build_network()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kenn/AttCNN.py": {
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_113": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.att_cnn_filters1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.conv_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling1d_128": {
                "variable": {
                    "value": "pool1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=self.att_cnn_filters1, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=self.att_cnn_filters1, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv1, [-1, shape_conv1[1] * shape_conv1[2], shape_conv1[3]])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.pool_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_135": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(inputs=conv1, pool_size=self.pool_size, strides=self.pool_strides, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=(self.pool_size, 1), strides=(self.pool_strides, 1), padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.att_cnn_filters2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.conv_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling1d_150": {
                "variable": {
                    "value": "pool2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool1, filters=self.att_cnn_filters2, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=self.att_cnn_filters2, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv2, [-1, shape_conv2[1] * shape_conv2[2], shape_conv2[3]])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.pool_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_157": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(inputs=conv2, pool_size=self.pool_size, strides=self.pool_strides, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv2, pool_size=(self.pool_size, 1), strides=(self.pool_strides, 1), padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.att_cnn_filters3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.conv_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling1d_172": {
                "variable": {
                    "value": "pool3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool2, filters=self.att_cnn_filters3, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool2, filters=self.att_cnn_filters3, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv3, [-1, shape_conv3[1] * shape_conv3[2], shape_conv3[3]])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.pool_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool3",
                            "Name"
                        ],
                        [
                            "self._batch_norm(pool3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[1] * shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_182": {
                "variable": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(l_op, [-1, shape[1] * shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(l_op, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.att_cnn_filters3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_213": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.att_cnn_filters1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.k_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.conv_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_224": {
                "variable": {
                    "value": "pool1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=self.att_cnn_filters1, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=self.att_cnn_filters1, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv1, [-1, shape_conv1[1] * shape_conv1[2], shape_conv1[3]])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(self.pool_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.pool_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_231": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(inputs=conv1, pool_size=self.pool_size, strides=self.pool_strides, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=(self.pool_size, 1), strides=(self.pool_strides, 1), padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.att_cnn_filters2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.k_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.conv_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_242": {
                "variable": {
                    "value": "pool2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool1, filters=self.att_cnn_filters2, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=self.att_cnn_filters2, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv2, [-1, shape_conv2[1] * shape_conv2[2], shape_conv2[3]])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(self.pool_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.pool_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_249": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(inputs=conv2, pool_size=self.pool_size, strides=self.pool_strides, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=conv2, pool_size=(self.pool_size, 1), strides=(self.pool_strides, 1), padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.att_cnn_filters3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.k_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.conv_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_260": {
                "variable": {
                    "value": "pool3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool2, filters=self.att_cnn_filters3, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool2, filters=self.att_cnn_filters3, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv3, [-1, shape_conv3[1] * shape_conv3[2], shape_conv3[3]])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(self.pool_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.pool_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool3",
                            "Name"
                        ],
                        [
                            "self._batch_norm(pool3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[1] * shape[2] * shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_270": {
                "variable": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(l_op, [-1, shape[1] * shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(l_op, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.att_cnn_filters3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.act_func",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=self.att_cnn_filters1, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=self.att_cnn_filters1, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv1, [-1, shape_conv1[1] * shape_conv1[2], shape_conv1[3]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_conv1[1] * shape_conv1[2], shape_conv1[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool1, filters=self.att_cnn_filters2, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=self.att_cnn_filters2, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv2, [-1, shape_conv2[1] * shape_conv2[2], shape_conv2[3]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_conv2[1] * shape_conv2[2], shape_conv2[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool2, filters=self.att_cnn_filters3, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool2, filters=self.att_cnn_filters3, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv3, [-1, shape_conv3[1] * shape_conv3[2], shape_conv3[3]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_conv3[1] * shape_conv3[2], shape_conv3[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_368": {
                "variable": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ga",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gas, [2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(gas, [2])",
                            "Call"
                        ],
                        [
                            "ga3",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_374": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_375": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.Y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.seg_len, self.num_channels, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.seg_len, self.num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=self.att_cnn_filters1, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=self.att_cnn_filters1, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv1, [-1, shape_conv1[1] * shape_conv1[2], shape_conv1[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_149": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool1, filters=self.att_cnn_filters2, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool1, filters=self.att_cnn_filters2, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv2, [-1, shape_conv2[1] * shape_conv2[2], shape_conv2[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_171": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool2, filters=self.att_cnn_filters3, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool2, filters=self.att_cnn_filters3, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv3, [-1, shape_conv3[1] * shape_conv3[2], shape_conv3[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_82": {
                "variable": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.conv_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.act_func",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_98": {
                "variable": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "int(self.filters * (i + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.conv_strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.act_func",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_194": {
                "variable": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.k_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.conv_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_204": {
                "variable": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "int(self.filters * (i + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.k_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.conv_strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_286": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Attention'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_290": {
                "variable": {
                    "value": "global_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "global_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=global_feature, units=n_units, name='{}-Gbf_fc'.format(name))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_feature.get_shape().as_list()[2]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}-Gbf_fc'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_373": {
                "input_tensor": {
                    "value": "self.Y * tf.log(tf.clip_by_value(y_, 1e-10, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_375": {
                "input": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_112": {
                "variable": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_extract",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=self.X, filters=self.filters, kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=self.k_size, strides=self.conv_strides, padding=self.padding, activation=self.act_func)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_extract)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.X, filters=self.filters, kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=conv_extract, filters=int(self.filters * (i + 1)), kernel_size=(self.k_size, 1), strides=(self.conv_strides, 1), padding=self.padding, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_297": {
                "name": {
                    "value": "'{}-Get_cpt_score'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_302": {
                "variable": {
                    "value": "g_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=global_feature, units=n_units, name='{}-Gbf_fc'.format(name))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_304": {
                "variable": {
                    "value": "add_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "local_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "g_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(global_feature, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(global_feature, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_306": {
                "variable": {
                    "value": "add_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "add_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(local_feature, g_vector)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_309": {
                "variable": {
                    "value": "u_para",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, n_units, 1], mean=0.01, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}-U_para'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_312": {
                "variable": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "add_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(add_, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_para",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([1, n_units, 1], mean=0.01, stddev=0.01), name='{}-U_para'.format(name))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_314": {
                "variable": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(add_t, u_para)",
                            "Call"
                        ],
                        [
                            "tf.multiply(l_vector_t, g_vector)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_326": {
                "variable": {
                    "value": "a_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(score_vector)",
                            "Call"
                        ],
                        [
                            "score_vector",
                            "Name"
                        ],
                        [
                            "tf.nn.sigmoid(score_vector)",
                            "Call"
                        ],
                        [
                            "score_vector",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_328": {
                "variable": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "local_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_330": {
                "variable": {
                    "value": "gas",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_332": {
                "variable": {
                    "value": "ga",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(l_vector_t, a_score)",
                            "Call"
                        ],
                        [
                            "tf.multiply(l_vector_t, a_score)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_337": {
                "variable": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "local_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_339": {
                "variable": {
                    "value": "g_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=global_feature, units=n_units, name='{}-Gbf_fc'.format(name))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_341": {
                "variable": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "g_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(global_feature, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(global_feature, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_343": {
                "variable": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(add_t, u_para)",
                            "Call"
                        ],
                        [
                            "tf.multiply(l_vector_t, g_vector)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_351": {
                "variable": {
                    "value": "a_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(score_vector)",
                            "Call"
                        ],
                        [
                            "score_vector",
                            "Name"
                        ],
                        [
                            "tf.nn.sigmoid(score_vector)",
                            "Call"
                        ],
                        [
                            "score_vector",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_352": {
                "variable": {
                    "value": "gas",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_353": {
                "variable": {
                    "value": "ga",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(l_vector_t, a_score)",
                            "Call"
                        ],
                        [
                            "tf.multiply(l_vector_t, a_score)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_319": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_346": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_373": {
                "x": {
                    "value": "tf.clip_by_value(y_, 1e-10, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_321": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_348": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_373": {
                "t": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=ga, units=self.num_labels, activation=tf.nn.softmax)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_323": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kenn/AttCaptionsModel.py": {
        "tensorflow": {
            "constant_initializer_52": {
                "variable": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_53": {
                "variable": {
                    "value": "self.emb_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 650, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.captions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.T + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.captions_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.T + 1, self.V]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_305": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(captions_out, self._null)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_323": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_363": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_387": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(alpha_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_392": {
                "variable": {
                    "value": "sampled_captions",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(sampled_word_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "features_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features4",
                            "Name"
                        ],
                        [
                            "self.extract_feature_cnn()",
                            "Call"
                        ],
                        [
                            "self._batch_norm(features, mode='test', name='conv_features')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "w_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.D, self.H]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "b_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.H]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(features_mean, w_h) + b_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "w_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.D, self.H]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "b_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.H]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_72": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(features_mean, w_c) + b_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_84": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "[1.0] * self.V",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.diag([1.0] * self.V, name='diag')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.D, self.D]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "features_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features4",
                            "Name"
                        ],
                        [
                            "self.extract_feature_cnn()",
                            "Call"
                        ],
                        [
                            "self._batch_norm(features, mode='test', name='conv_features')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "features_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "features_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(features, [-1, self.D])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [self.D, self.D], initializer=self.weight_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [self.H, self.D], initializer=self.weight_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [self.H, 1], initializer=self.weight_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "features_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(features_flat, w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(features_proj, [-1, self.L, self.D])",
                            "Call"
                        ],
                        [
                            "self._project_features(features=features)",
                            "Call"
                        ],
                        [
                            "self._project_features(features=features)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.L, self.D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_173": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.H, self.D]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_174": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.D]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_175": {
                "variable": {
                    "value": "w_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_att",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.D, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_177": {
                "variable": {
                    "value": "h_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features_proj + tf.expand_dims(tf.matmul(h, w), 1) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "tensor": {
                    "value": "h_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(features_proj + tf.expand_dims(tf.matmul(h, w), 1) + b)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_179": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(h_att, [-1, self.D]), w_att), [-1, self.L])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_180": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "features * tf.expand_dims(alpha, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "context",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_185": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.H, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_186": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_187": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h, w) + b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_188": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(h, w) + b, 'beta')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(features * tf.expand_dims(alpha, 2), 1, name='context')",
                            "Call"
                        ],
                        [
                            "tf.multiply(beta, context, name='selected_context')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "selected_context",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_193": {
                "variable": {
                    "value": "w_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.H, self.M]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "b_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.M]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_195": {
                "variable": {
                    "value": "w_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_out",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.M, self.V]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_196": {
                "variable": {
                    "value": "b_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_out",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.V]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_208": {
                "variable": {
                    "value": "h_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h, w_h) + b_h",
                            "BinOp"
                        ],
                        [
                            "h_logits + x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h_logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_logits, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_228": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data",
                            "Attribute"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling1d_241": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=data, filters=16, kernel_size=5, strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=self.weight_initializer, bias_initializer=self.const_initializer)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_243": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(conv1, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(conv2, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling1d_256": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool, filters=32, kernel_size=5, strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=self.weight_initializer, bias_initializer=self.const_initializer)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_258": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(conv1, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(conv2, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling1d_271": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=pool, filters=64, kernel_size=5, strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=self.weight_initializer, bias_initializer=self.const_initializer)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_273": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(conv1, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(conv2, 2, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "self.const_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv4",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[1] * shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_289": {
                "variable": {
                    "value": "fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(l_op, [-1, shape[1] * shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_344": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(alpha_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_345": {
                "variable": {
                    "value": "alphas_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.stack(alpha_list), (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.stack(alpha_list), (1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_384": {
                "variable": {
                    "value": "sampled_word",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._decode_lstm(x[:, t, :], h, context, dropout=self.dropout, reuse=t != 0)",
                            "Call"
                        ],
                        [
                            "self._decode_lstm(x, h, context, reuse=t != 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_389": {
                "variable": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(beta_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_391": {
                "variable": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "initial_lstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "project_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_104": {
                "variable": {
                    "value": "global_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "global_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=global_feature, units=n_units, name='{}-Gbf_fc'.format(name))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_feature.get_shape().as_list()[2]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}-Gbf_fc'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "attention_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "selector",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(features_mean, w_h) + b_h)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_203": {
                "variable": {
                    "value": "w_ctx2out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_ctx2out",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.D, self.M]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.weight_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_211": {
                "variable": {
                    "value": "h_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h, w_h) + b_h",
                            "BinOp"
                        ],
                        [
                            "h_logits + x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h_logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_logits, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_301": {
                "input": {
                    "value": "features1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._batch_norm(features1, mode='train', name='conv_features1')",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_305": {
                "x": {
                    "value": "captions_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "captions[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self._null",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_340": {
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=captions_out[:, t], logits=logits) * mask[:, t]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_349": {
                "x": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(features1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_387": {
                "values": {
                    "value": "alpha_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_392": {
                "values": {
                    "value": "sampled_word_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_111": {
                "name": {
                    "value": "'{}-Get_cpt_score'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_116": {
                "variable": {
                    "value": "g_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=global_feature, units=n_units, name='{}-Gbf_fc'.format(name))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_118": {
                "variable": {
                    "value": "add_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "local_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "g_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(global_feature, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(global_feature, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_120": {
                "variable": {
                    "value": "add_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "add_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(local_feature, g_vector)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "u_para",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, n_units, 1], mean=0.01, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}-U_para'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_126": {
                "variable": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "add_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(add_, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_para",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([1, n_units, 1], mean=0.01, stddev=0.01), name='{}-U_para'.format(name))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_128": {
                "variable": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(add_t, u_para)",
                            "Call"
                        ],
                        [
                            "tf.multiply(l_vector_t, g_vector)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_140": {
                "variable": {
                    "value": "a_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(score_vector)",
                            "Call"
                        ],
                        [
                            "score_vector",
                            "Name"
                        ],
                        [
                            "tf.nn.sigmoid(score_vector)",
                            "Call"
                        ],
                        [
                            "score_vector",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "local_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_144": {
                "variable": {
                    "value": "gas",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_146": {
                "variable": {
                    "value": "ga",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(l_vector_t, a_score)",
                            "Call"
                        ],
                        [
                            "tf.multiply(l_vector_t, a_score)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_151": {
                "variable": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "local_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_153": {
                "variable": {
                    "value": "g_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=global_feature, units=n_units, name='{}-Gbf_fc'.format(name))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_155": {
                "variable": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "g_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(global_feature, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(global_feature, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_157": {
                "variable": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(add_t, u_para)",
                            "Call"
                        ],
                        [
                            "tf.multiply(l_vector_t, g_vector)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_165": {
                "variable": {
                    "value": "a_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(score_vector)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(score_vector)",
                            "Call"
                        ],
                        [
                            "score_vector",
                            "Name"
                        ],
                        [
                            "tf.nn.sigmoid(score_vector)",
                            "Call"
                        ],
                        [
                            "score_vector",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_166": {
                "variable": {
                    "value": "gas",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_vector_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(local_feature, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(score, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_167": {
                "variable": {
                    "value": "ga",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(l_vector_t, a_score)",
                            "Call"
                        ],
                        [
                            "tf.multiply(l_vector_t, a_score)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "tf.reshape(h_att, [-1, self.D])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_att', [self.D, 1], initializer=self.weight_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_200": {
                "a": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(features_mean, w_h) + b_h)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_h', [self.D, self.H], initializer=self.weight_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_h', [self.H, self.M], initializer=self.weight_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_204": {
                "a": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(features * tf.expand_dims(alpha, 2), 1, name='context')",
                            "Call"
                        ],
                        [
                            "tf.multiply(beta, context, name='selected_context')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_ctx2out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_ctx2out', [self.D, self.M], initializer=self.weight_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_212": {
                "a": {
                    "value": "h_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h, w_h) + b_h",
                            "BinOp"
                        ],
                        [
                            "h_logits + x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h_logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_logits, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_out', [self.M, self.V], initializer=self.weight_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_334": {
                "name_or_scope": {
                    "value": "lstm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "t != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_344": {
                "values": {
                    "value": "alpha_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_346": {
                "input_tensor": {
                    "value": "(1 - alphas_all) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_379": {
                "name_or_scope": {
                    "value": "lstm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "t != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_389": {
                "input": {
                    "value": "beta_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_68": {
                "a": {
                    "value": "features_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(features, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_h', [self.D, self.H], initializer=self.weight_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_h', [self.H, self.M], initializer=self.weight_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "a": {
                    "value": "features_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(features, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_c', [self.D, self.H], initializer=self.weight_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_133": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_160": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_180": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(out_att)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "a": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(features_mean, w_h) + b_h)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [self.D, self.D], initializer=self.weight_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [self.H, self.D], initializer=self.weight_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [self.H, 1], initializer=self.weight_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_341": {
                "labels": {
                    "value": "captions_out[:, t]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "captions[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._decode_lstm(x[:, t, :], h, context, dropout=self.dropout, reuse=t != 0)",
                            "Call"
                        ],
                        [
                            "self._decode_lstm(x, h, context, reuse=t != 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_135": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_162": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_177": {
                "input": {
                    "value": "tf.matmul(h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_336": {
                "values": {
                    "value": "[x[:, t, :], context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_367": {
                "dims": {
                    "value": "[tf.shape(features)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "self._start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_381": {
                "values": {
                    "value": "[x, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_137": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dot_, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_177": {
                "a": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(features_mean, w_h) + b_h)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [self.D, self.D], initializer=self.weight_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [self.H, self.D], initializer=self.weight_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [self.H, 1], initializer=self.weight_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_367": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features4",
                            "Name"
                        ],
                        [
                            "self.extract_feature_cnn()",
                            "Call"
                        ],
                        [
                            "self._batch_norm(features, mode='test', name='conv_features')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kenn/AttCaptionsSolver.py": {
        "tensorflow": {
            "merge_all_113": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_120": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_219": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_98": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.build_model()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_126": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_222": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_122": {
                "config": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_221": {
                "config": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}