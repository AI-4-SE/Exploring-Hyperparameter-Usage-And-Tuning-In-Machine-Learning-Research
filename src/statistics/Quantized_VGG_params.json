{
    "main.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.device) if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cifar10_train_dset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10('./cifar10_pytorch', train=True, transform=transform_train, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.mbs",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cifar10_test_dset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10('./cifar10_pytorch', train=False, transform=transform_test, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "SGD_100": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "possible_values": []
                }
            },
            "MultiStepLR_101": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.decay)",
                            "Call"
                        ],
                        [
                            "AdamW(model.parameters(), lr=args.lr, weight_decay=decay_W)",
                            "Call"
                        ],
                        [
                            "AdamW(model.parameters(), lr=args.lr, weight_decay=decay_W)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[150, 250, 350]",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "possible_values": []
                }
            },
            "MultiStepLR_104": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.decay)",
                            "Call"
                        ],
                        [
                            "AdamW(model.parameters(), lr=args.lr, weight_decay=decay_W)",
                            "Call"
                        ],
                        [
                            "AdamW(model.parameters(), lr=args.lr, weight_decay=decay_W)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[150, 250, 350]",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'opt': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "path + '/checkpoint.tar'",
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_110": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.decay)",
                            "Call"
                        ],
                        [
                            "AdamW(model.parameters(), lr=args.lr, weight_decay=decay_W)",
                            "Call"
                        ],
                        [
                            "AdamW(model.parameters(), lr=args.lr, weight_decay=decay_W)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "T_max",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "T_max * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_139": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.decay)",
                            "Call"
                        ],
                        [
                            "AdamW(model.parameters(), lr=args.lr, weight_decay=decay_W)",
                            "Call"
                        ],
                        [
                            "AdamW(model.parameters(), lr=args.lr, weight_decay=decay_W)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "T_max",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "T_max * 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model_utils.py": {
        "torch": {
            "where_43": {
                "variable": {
                    "value": "errors",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand_like(self.weight.data) > self.ber",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(self.weight.data)",
                    "possible_values": []
                },
                "y": {
                    "value": "-torch.ones_like(self.weight.data)",
                    "possible_values": []
                }
            },
            "linear_49": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                }
            },
            "where_86": {
                "variable": {
                    "value": "p_0",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.weight.data == 0.0",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(self.weight.data)",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(self.weight.data)",
                    "possible_values": []
                }
            },
            "where_88": {
                "variable": {
                    "value": "pm_ones",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand_like(self.weight.data) < 0.5",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(self.weight.data)",
                    "possible_values": []
                },
                "y": {
                    "value": "-torch.ones_like(self.weight.data)",
                    "possible_values": []
                }
            },
            "where_89": {
                "variable": {
                    "value": "errors",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand_like(self.weight.data) > 2.0 * self.ber / (1 + p_0)",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(self.weight.data)",
                    "possible_values": []
                },
                "y": {
                    "value": "pm_ones",
                    "possible_values": [
                        [
                            "torch.where(torch.rand_like(self.weight.data) < 0.5, torch.ones_like(self.weight.data), -torch.ones_like(self.weight.data))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand_like(self.weight.data) < 0.5, torch.ones_like(self.weight.data), -torch.ones_like(self.weight.data))",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_95": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                }
            },
            "where_124": {
                "variable": {
                    "value": "errors",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand_like(self.weight.data) > self.ber",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(self.weight.data)",
                    "possible_values": []
                },
                "y": {
                    "value": "-torch.ones_like(self.weight.data)",
                    "possible_values": []
                }
            },
            "conv2d_130": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "where_166": {
                "variable": {
                    "value": "p_0",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.weight.data == 0.0",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(self.weight.data)",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(self.weight.data)",
                    "possible_values": []
                }
            },
            "where_168": {
                "variable": {
                    "value": "pm_ones",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand_like(self.weight.data) < 0.5",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(self.weight.data)",
                    "possible_values": []
                },
                "y": {
                    "value": "-torch.ones_like(self.weight.data)",
                    "possible_values": []
                }
            },
            "where_169": {
                "variable": {
                    "value": "errors",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand_like(self.weight.data) > 2.0 * self.ber / (1 + p_0)",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(self.weight.data)",
                    "possible_values": []
                },
                "y": {
                    "value": "pm_ones",
                    "possible_values": [
                        [
                            "torch.where(torch.rand_like(self.weight.data) < 0.5, torch.ones_like(self.weight.data), -torch.ones_like(self.weight.data))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand_like(self.weight.data) < 0.5, torch.ones_like(self.weight.data), -torch.ones_like(self.weight.data))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_175": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_356": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_381": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "where_21": {
                "condition": {
                    "value": "torch.abs(tensor) > threshold",
                    "possible_values": []
                },
                "x": {
                    "value": "Binarize(tensor)",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(tensor)",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "in_features": {
                    "value": "in_size",
                    "possible_values": [
                        [
                            "out_size",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "possible_values": [
                        [
                            "in_channels * data_size * data_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_266": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "is_available_360": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_388": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_like_21": {
                "input": {
                    "value": "tensor",
                    "possible_values": []
                }
            },
            "ones_like_43": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "ones_like_86": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "ones_like_124": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "ones_like_166": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "zeros_like_166": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "ones_like_168": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "zeros_like_169": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "Sequential_250": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "BatchNorm1d_265": {
                "num_features": {
                    "value": "10",
                    "possible_values": []
                },
                "affine": {
                    "value": "aff",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_21": {
                "input": {
                    "value": "tensor",
                    "possible_values": []
                }
            },
            "rand_like_43": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "rand_like_88": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "rand_like_89": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "rand_like_124": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "rand_like_168": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "rand_like_169": {
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "zeros_like_321": {
                "variable": {
                    "value": "state[exp_avg]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "zeros_like_323": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "MaxPool2d_235": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "BatchNorm1d_257": {
                "num_features": {
                    "value": "x",
                    "possible_values": [
                        [
                            "df['epoch']",
                            "Subscript"
                        ],
                        [
                            "df['epoch']",
                            "Subscript"
                        ],
                        [
                            "conv_list",
                            "Name"
                        ],
                        [
                            "fc_list",
                            "Name"
                        ]
                    ]
                },
                "affine": {
                    "value": "aff",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_326": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "max_340": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm2d_238": {
                "num_features": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "affine": {
                    "value": "aff",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_259": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Hardtanh_261": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_264": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Hardtanh_242": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_244": {
                "p": {
                    "value": "0.3",
                    "possible_values": []
                }
            }
        }
    }
}