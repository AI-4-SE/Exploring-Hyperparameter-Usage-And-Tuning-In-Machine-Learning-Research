{
    "data/TUs.py": {
        "sklearn": {
            "StratifiedKFold_37": {
                "variable": {
                    "value": "cross_val_fold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_54": {
                "variable": {
                    "value": "(train, val, _, __)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "remain_set",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "range(len(remain_set.graph_lists))",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 / (num_split - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stratify": {
                    "value": "remain_set.graph_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_131": {
                "variable": {
                    "value": "new_g.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_g.number_of_edges()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_221": {
                "variable": {
                    "value": "zero_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sym_normalize_adj(g.adjacency_matrix().to_dense())",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_226": {
                "variable": {
                    "value": "adj_node_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_adj for j in range(in_dim)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "adj_node_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adj.unsqueeze(0), adj_node_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_237": {
                "variable": {
                    "value": "deg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sym_normalize_adj(g.adjacency_matrix().to_dense())",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_238": {
                "variable": {
                    "value": "deg_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "deg > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 / torch.sqrt(deg)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(deg.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_240": {
                "variable": {
                    "value": "deg_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deg_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(deg > 0, 1.0 / torch.sqrt(deg), torch.zeros(deg.size()))",
                            "Call"
                        ],
                        [
                            "torch.diag(deg_inv)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_241": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sym_normalize_adj(g.adjacency_matrix().to_dense())",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "deg_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(deg > 0, 1.0 / torch.sqrt(deg), torch.zeros(deg.size()))",
                            "Call"
                        ],
                        [
                            "torch.diag(deg_inv)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_280": {
                "variable": {
                    "value": "graph.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "graph.number_of_edges()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.ndata['feat'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "graph.ndata['feat'].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_186": {
                "variable": {
                    "value": "graph.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "graph.number_of_edges()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.ndata['feat'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "graph.ndata['feat'].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "deg.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_238": {
                "input": {
                    "value": "deg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(adj, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/metrics.py": {
        "sklearn": {
            "f1_score_41": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.detach().argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "scores.detach().argmax(dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_35": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.argmax(dim=1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "l1_loss_10": {
                "variable": {
                    "value": "MAE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.detach().argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "scores.detach().argmax(dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_22": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.detach().argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "scores.detach().argmax(dim=1).cpu()",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices == targets",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "data/citations.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "new_g.edata[feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_g.number_of_edges()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "layers/activation_gin_layer.py": {
        "torch": {
            "BatchNorm1d_39": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([init_eps])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "layers/activation_graphsage_layer.py": {
        "torch": {
            "mean_26": {
                "variable": {
                    "value": "mean_neighbour",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbour",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.mailbox['m']",
                            "Subscript"
                        ],
                        [
                            "self.activation(neighbour)",
                            "Call"
                        ],
                        [
                            "node.mailbox['m']",
                            "Subscript"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_45": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_57": {
                "variable": {
                    "value": "rand_order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "neighbours.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_85": {
                "variable": {
                    "value": "bundle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bundle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h + aggre_result",
                            "BinOp"
                        ],
                        [
                            "self.concat(h, c)",
                            "Call"
                        ],
                        [
                            "F.normalize(bundle, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.activation(bundle)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_110": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_111": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_38": {
                "input": {
                    "value": "neighbour",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.mailbox['m']",
                            "Subscript"
                        ],
                        [
                            "self.activation(neighbour)",
                            "Call"
                        ],
                        [
                            "node.mailbox['m']",
                            "Subscript"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hiddim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hiddim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "layers/activation_pna_layer.py": {
        "torch": {
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_29": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indim",
                            "Method Argument"
                        ],
                        [
                            "indim",
                            "Method Argument"
                        ],
                        [
                            "indim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_48": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(h) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, g.ndata['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.towers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_137": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_tower",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_196": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_198": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indim",
                            "Method Argument"
                        ],
                        [
                            "indim",
                            "Method Argument"
                        ],
                        [
                            "indim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_206": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(h) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, g.ndata['h'] * norm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_217": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "h_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h[:, n_tower * self.input_tower:(n_tower + 1) * self.input_tower], e) * norm for (n_tower, tower) in enumerate(self.towers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "h_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h, e) * norm for tower in self.towers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_152": {
                "variable": {
                    "value": "h_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/expander/expander_layer.py": {
        "torch": {
            "Sequential_66": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indim",
                            "Method Argument"
                        ],
                        [
                            "indim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outdim",
                            "Method Argument"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "num_features": {
                    "value": "sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "layers/expander/expander_module.py": {
        "torch": {
            "Parameter_50": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.outdim, self.indim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_135": {
                "variable": {
                    "value": "self.inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "addmm_19": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "mat1": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_input",
                            "Method Argument"
                        ],
                        [
                            "_input",
                            "Method Argument"
                        ],
                        [
                            "_input",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.outdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "self.n_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.outdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_106": {
                "*size": {
                    "value": "self.n_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_108": {
                "*size": {
                    "value": "self.outdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "layers/expander/samplers.py": {
        "torch": {
            "zeros_6": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_24": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(edges)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_10": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "layers/gcn_layer.py": {
        "torch": {
            "BatchNorm1d_56": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "apply_func.outdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "layers/gin_layer.py": {
        "torch": {
            "BatchNorm1d_42": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.apply_func.outdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([init_eps])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "layers/graphsage_layer.py": {
        "torch": {
            "mean_29": {
                "variable": {
                    "value": "mean_neighbour",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbour",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.mailbox['m']",
                            "Subscript"
                        ],
                        [
                            "self.linear(neighbour)",
                            "Call"
                        ],
                        [
                            "self.activation(neighbour)",
                            "Call"
                        ],
                        [
                            "node.mailbox['m']",
                            "Subscript"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_63": {
                "variable": {
                    "value": "rand_order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "neighbours.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "bundle",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, aggre_result)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_93": {
                "variable": {
                    "value": "bundle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bundle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((h, aggre_result), 1)",
                            "Call"
                        ],
                        [
                            "self.apply_func(bundle)",
                            "Call"
                        ],
                        [
                            "self.concat(h, c)",
                            "Call"
                        ],
                        [
                            "F.normalize(bundle, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.activation(bundle)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_126": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_127": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_191": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_192": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_222": {
                "variable": {
                    "value": "sigma_ij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes.mailbox['e_ij']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['e_ij']",
                            "Subscript"
                        ],
                        [
                            "g.ndata['e']",
                            "Subscript"
                        ],
                        [
                            "self.activation(e)",
                            "Call"
                        ],
                        [
                            "self.batchnorm_e(e)",
                            "Call"
                        ],
                        [
                            "e_in + e",
                            "BinOp"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_266": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_267": {
                "variable": {
                    "value": "self.batchnorm_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "apply_func.outdim",
                            "Attribute"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_269": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_307": {
                "variable": {
                    "value": "sigma_ij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes.mailbox['e_ij']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['e_ij']",
                            "Subscript"
                        ],
                        [
                            "g.ndata['e']",
                            "Subscript"
                        ],
                        [
                            "self.activation(e)",
                            "Call"
                        ],
                        [
                            "self.batchnorm_e(e)",
                            "Call"
                        ],
                        [
                            "e_in + e",
                            "BinOp"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_44": {
                "input": {
                    "value": "neighbour",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.mailbox['m']",
                            "Subscript"
                        ],
                        [
                            "self.linear(neighbour)",
                            "Call"
                        ],
                        [
                            "self.activation(neighbour)",
                            "Call"
                        ],
                        [
                            "node.mailbox['m']",
                            "Subscript"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ],
                        [
                            "neighbour",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hiddim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hiddim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_227": {
                "input": {
                    "value": "Ah_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edges.src['Ah']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['Ah_j']",
                            "Subscript"
                        ],
                        [
                            "sigma_ij * Ah_j",
                            "BinOp"
                        ],
                        [
                            "self.activation(Ah_j)",
                            "Call"
                        ],
                        [
                            "edges.src['Ah']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['Ah_j']",
                            "Subscript"
                        ],
                        [
                            "sigma_ij * Ah_j",
                            "BinOp"
                        ],
                        [
                            "self.activation(Ah_j)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_312": {
                "input": {
                    "value": "Ah_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edges.src['Ah']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['Ah_j']",
                            "Subscript"
                        ],
                        [
                            "sigma_ij * Ah_j",
                            "BinOp"
                        ],
                        [
                            "self.activation(Ah_j)",
                            "Call"
                        ],
                        [
                            "edges.src['Ah']",
                            "Subscript"
                        ],
                        [
                            "nodes.mailbox['Ah_j']",
                            "Subscript"
                        ],
                        [
                            "sigma_ij * Ah_j",
                            "BinOp"
                        ],
                        [
                            "self.activation(Ah_j)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/pna_layer.py": {
        "torch": {
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outdim",
                            "Method Argument"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_75": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(h) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, g.ndata['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_153": {
                "variable": {
                    "value": "self.towers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_176": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outdim",
                            "Method Argument"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_239": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_241": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outdim",
                            "Method Argument"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ],
                        [
                            "outdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregate(h) for aggregate in self.aggregators]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale(h, D=D, avg_d=self.avg_d) for scale in self.scalers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, g.ndata['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h'], edges.data['ef']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['h'], edges.dst['h']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "h_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h[:, n_tower * self.input_tower:(n_tower + 1) * self.input_tower], e) for (n_tower, tower) in enumerate(self.towers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "h_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tower(g, h, e) for tower in self.towers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/pna_utils/aggregators.py": {
        "torch": {
            "mean_23": {
                "variable": {
                    "value": "h_mean_squares",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_24": {
                "variable": {
                    "value": "h_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_mean_squares - h_mean * h_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_33": {
                "variable": {
                    "value": "h_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_34": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(h - h_mean, n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_7": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "aggregate_var(h) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_11": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_15": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_34": {
                "input": {
                    "value": "h - h_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_35": {
                "input": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.pow(h - h_mean, n))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_35": {
                "input": {
                    "value": "torch.abs(h_n) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_35": {
                "input": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.pow(h - h_mean, n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "layers/pna_utils/utils.py": {
        "torch": {
            "GRU_34": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indim",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hiddim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "main_arxiv_node_classification.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in [graph]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_369": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_373": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['init_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_123": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=params['init_lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "train_epoch(model, optimizer, device, evaluator, graph, epoch, nfeat, efeat, train_idx, labels, writer)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "params['lr_reduce_factor']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "patience": {
                    "value": "params['lr_schedule_patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_27": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_97": {
                "seed": {
                    "value": "split_number",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_number in range(params['num_split'])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_138": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.pkl'.format(ckpt_dir + '/epoch_{}'.format(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_device_name_368": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "g.adjacency_matrix(transpose=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_72": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in [graph]])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_73": {
                "input": {
                    "value": "torch.exp(torch.div(1, D)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "torch.log(D + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_device_properties_85": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "net_params['device']",
                            "Subscript"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "split_number",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_number in range(params['num_split'])",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_peak_memory_stats_225": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "net_params['device']",
                            "Subscript"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_75": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.pkl'.format(ckpt_dir + '/epoch_' + str(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_73": {
                "input": {
                    "value": "torch.div(1, D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_73": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in [graph]])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_memory_reserved_150": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "net_params['device']",
                            "Subscript"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_citation_node_classification.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in [dataset.graph]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_360": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_364": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['init_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_114": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=params['init_lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "train_epoch(model, optimizer, device, graph, epoch, nfeat, efeat, train_mask, labels, writer)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "params['lr_reduce_factor']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "patience": {
                    "value": "params['lr_schedule_patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_26": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_88": {
                "seed": {
                    "value": "split_number",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_number in range(params['num_split'])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.pkl'.format(ckpt_dir + '/epoch_{}'.format(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_device_name_359": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "g.adjacency_matrix(transpose=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_63": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in [dataset.graph]])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_64": {
                "input": {
                    "value": "torch.exp(torch.div(1, D)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_66": {
                "input": {
                    "value": "torch.log(D + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_device_properties_76": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "net_params['device']",
                            "Subscript"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_90": {
                "seed": {
                    "value": "split_number",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_number in range(params['num_split'])",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_peak_memory_stats_216": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "net_params['device']",
                            "Subscript"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.pkl'.format(ckpt_dir + '/epoch_' + str(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_64": {
                "input": {
                    "value": "torch.div(1, D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_64": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in [dataset.graph]])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_memory_reserved_142": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "net_params['device']",
                            "Subscript"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_tu_graph_classification.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_380": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_384": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['init_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_119": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=params['init_lr'], weight_decay=params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "train_epoch(model, optimizer, device, train_loader, epoch, writer)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "params['lr_reduce_factor']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "patience": {
                    "value": "params['lr_schedule_patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.train[split_number]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if MODEL_NAME == 'DiffPool' else False",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.val[split_number]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if MODEL_NAME == 'DiffPool' else False",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.test[split_number]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['params']",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if MODEL_NAME == 'DiffPool' else False",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_27": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train[split_number].graph_lists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.pkl'.format(ckpt_dir + '/epoch_{}'.format(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_device_name_379": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_device_properties_59": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "net_params['device']",
                            "Subscript"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_236": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "net_params['device']",
                            "Subscript"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.pkl'.format(ckpt_dir + '/epoch_' + str(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "g.adjacency_matrix(transpose=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_92": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train[split_number].graph_lists])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_93": {
                "input": {
                    "value": "torch.exp(torch.div(1, D)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_95": {
                "input": {
                    "value": "torch.log(D + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_95": {
                "input": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_memory_reserved_161": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "net_params['device']",
                            "Subscript"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_93": {
                "input": {
                    "value": "torch.div(1, D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_94": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "other": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.sparse.sum(g.adjacency_matrix(transpose=True), dim=-1).to_dense() for g in dataset.train[split_number].graph_lists])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nets/citation_node_classification/activation_gcn_net.py": {
        "torch": {
            "Dropout_45": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_47": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hiddim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indim",
                            "variable"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_89": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_67": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.in_degrees().float().clamp(min=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nets/citation_node_classification/activation_gin_net.py": {
        "torch": {
            "Dropout_37": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.linear_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_90": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/citation_node_classification/activation_graphsage_net.py": {
        "torch": {
            "Dropout_38": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_39": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hiddim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indim",
                            "variable"
                        ]
                    ]
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_84": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/citation_node_classification/activation_pna_net.py": {
        "torch": {
            "ModuleList_64": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_132": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/citation_node_classification/gcn_net.py": {
        "torch": {
            "Dropout_39": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_113": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_103": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.in_degrees().float().clamp(min=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nets/citation_node_classification/gin_net.py": {
        "torch": {
            "ModuleList_36": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.linear_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_105": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/citation_node_classification/graphsage_net.py": {
        "torch": {
            "Dropout_44": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_115": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/citation_node_classification/mlp_net.py": {
        "torch": {
            "Dropout_34": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_87": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_52": {
                "num_features": {
                    "value": "sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "input": {
                    "value": "self.gates(h)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nets/citation_node_classification/pna_net.py": {
        "torch": {
            "ModuleList_67": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_179": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/citation_node_classification/simple_gcn_net.py": {
        "torch": {
            "Dropout_43": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_76": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_60": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.in_degrees().float().clamp(min=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/activation_gcn_net.py": {
        "torch": {
            "Dropout_48": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_50": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hiddim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearLayer(hiddim, hiddim // 2, bias=True, linear_type='regular')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_102": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_71": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.in_degrees().float().clamp(min=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/activation_gin_net.py": {
        "torch": {
            "Dropout_41": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.linear_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/activation_graphsage_net.py": {
        "torch": {
            "Dropout_44": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_45": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hiddim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearLayer(hiddim, hiddim // 2, bias=True, linear_type='regular')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_98": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/activation_pna_net.py": {
        "torch": {
            "ModuleList_62": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearLayer(hiddim, hiddim // 2, bias=True, linear_type='regular')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_148": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/gcn_net.py": {
        "torch": {
            "Dropout_43": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearLayer(outdim, outdim // 2, bias=True, linear_type='regular')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_114": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_94": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.in_degrees().float().clamp(min=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/gin_net.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.linear_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_94": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/graphsage_net.py": {
        "torch": {
            "Dropout_49": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearLayer(outdim, outdim // 2, bias=True, linear_type='regular')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_115": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/mlp_net.py": {
        "torch": {
            "Dropout_34": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearLayer(outdim, outdim // 2, bias=True, linear_type='regular')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_94": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_53": {
                "num_features": {
                    "value": "sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "input": {
                    "value": "self.gates(h)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/pna_net.py": {
        "torch": {
            "ModuleList_70": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearLayer(outdim, outdim // 2, bias=True, linear_type='regular')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_176": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/tu_graph_classification/simple_gcn_net.py": {
        "torch": {
            "Dropout_47": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['in_feat_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_49": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params['out_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinearLayer(outdim, outdim // 2, bias=True, linear_type='regular')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_110": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_79": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.in_degrees().float().clamp(min=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/train_arxiv_node_classification.py": {
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/train_citation_node_classification.py": {
        "torch": {
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/train_tu_graph_classification.py": {
        "torch": {
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "Sigmoid_22": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_24": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_28": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_204": {
                "variable": {
                    "value": "saved_expander[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "net.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RReLU_30": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_32": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_148": {
                "input": {
                    "value": "net.mask == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "LeakyReLU_34": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CELU_36": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SELU_38": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GELU_40": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_42": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softsign_44": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softshrink_46": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}