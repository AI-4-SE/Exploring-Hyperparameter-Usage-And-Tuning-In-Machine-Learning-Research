{
    "dna-gcn-cnn/model.py": {
        "sklearn": {
            "roc_auc_score_152": {
                "variable": {
                    "value": "train_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_label.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(train_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_171": {
                "variable": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_label.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(test_label)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Variable_72": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([m, 64], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([64, embeded_size], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_75": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "conv_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_len, embeded_size, kernel_num]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_num]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(m, m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "kmer-graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, kmer_num, m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(x, w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x, a), w2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_84": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(b, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, kmer_num, m), name='data')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x, a), w2))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(b, 0), [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_86": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(z, b)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "conv_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='filter', shape=[kernel_len, embeded_size, kernel_num], initializer=weight_init, regularizer=reg)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_87": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(data, conv_filter, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, conv_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[kernel_num], initializer=bias_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_88": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(data, conv_filter, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, conv_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling1d_91": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(data, conv_filter, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv1, conv_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "local_window_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_106": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool1, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, 1, kernel_initializer=weight_init, bias_initializer=bias_init, kernel_regularizer=reg)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, 1), name='label')",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_122": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GPUOptions_130": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_131": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(conv1, pool_size=local_window_size, strides=1, padding='valid')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_102": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool1, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, 1, kernel_initializer=weight_init, bias_initializer=bias_init, kernel_regularizer=reg)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_123": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_133": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(m, m), name='kmer-graph')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([m, 64], stddev=1, seed=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_83": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(m, m), name='kmer-graph')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(x, w1))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_84": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x, a), w2))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(b, 0), [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_100": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "tf.multiply(dim, d)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Session_132": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dna-gcn/hetero_graph_convolution.py": {
        "sklearn": {},
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_27": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_34": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(preds, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_36": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_37": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(preds - labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([total_len, 200], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([graph_size - total_len, 200], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([200, 1], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([200, 1], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "x11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x11-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x12-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "x21",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x21-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x22-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "v11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "v11-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "v12-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "v21",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "v21-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "v22",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "v22-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "z11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z11-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "z12",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z12-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "z21",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z21-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z22-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x11, z11) + tf.matmul(x12, z21), W1) + tf.matmul(tf.matmul(x11, z12) + tf.matmul(x12, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x21, z11) + tf.matmul(x22, z21), W1) + tf.matmul(tf.matmul(x21, z12) + tf.matmul(x22, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h3, h4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h3, h4], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_111": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(v11, z11) + tf.matmul(v12, z21), W1) + tf.matmul(tf.matmul(v11, z12) + tf.matmul(v12, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(v21, z11) + tf.matmul(v22, z21), W1) + tf.matmul(tf.matmul(v21, z12) + tf.matmul(v22, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g3, g4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_116": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([g3, g4], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_sigmoid_cross_entropy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y1 - t1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_126": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_133": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_134": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(result_path, data_info, 'tf_log')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_145": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_146": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_38": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_128": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(mask_sigmoid_cross_entropy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_129": {
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_130": {
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_131": {
                "name": {
                    "value": "train_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_train, 0, train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_132": {
                "name": {
                    "value": "test_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_test, train_len, train_len + test_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_135": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_149": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_45": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "num_thresholds": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "a": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='x12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x21, z11) + tf.matmul(x22, z21), W1) + tf.matmul(tf.matmul(x21, z12) + tf.matmul(x22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "a": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='x22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x21, z11) + tf.matmul(x22, z21), W1) + tf.matmul(tf.matmul(x21, z12) + tf.matmul(x22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_113": {
                "a": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='v12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(v21, z11) + tf.matmul(v22, z21), W1) + tf.matmul(tf.matmul(v21, z12) + tf.matmul(v22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_114": {
                "a": {
                    "value": "v22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='v22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(v21, z11) + tf.matmul(v22, z21), W1) + tf.matmul(tf.matmul(v21, z12) + tf.matmul(v22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_119": {
                "x": {
                    "value": "y1 - t1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_148": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_101": {
                "a": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='x12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_102": {
                "a": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='x22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_111": {
                "a": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='v12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_112": {
                "a": {
                    "value": "v22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='v22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dna-gcn/new_hetero_graph_convolution.py": {
        "sklearn": {},
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_32": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_40": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(preds, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_42": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(preds - labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_len, 200]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[graph_size - total_len, 200]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[200, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W4",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[200, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "x11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x11-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x12-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "x21",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x21-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x22-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "v11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "v11-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "v12-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "v21",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "v21-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "v22",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "v22-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "z11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z11-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "z12",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z12-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "z21",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z21-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z22-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x11, z11) + tf.matmul(x12, z21), W1) + tf.matmul(tf.matmul(x11, z12) + tf.matmul(x12, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x21, z11) + tf.matmul(x22, z21), W1) + tf.matmul(tf.matmul(x21, z12) + tf.matmul(x22, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_119": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h3, h4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_120": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h3, h4], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_122": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(v11, z11) + tf.matmul(v12, z21), W1) + tf.matmul(tf.matmul(v11, z12) + tf.matmul(v12, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(v21, z11) + tf.matmul(v22, z21), W1) + tf.matmul(tf.matmul(v21, z12) + tf.matmul(v22, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g3, g4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_127": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([g3, g4], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_129": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_sigmoid_cross_entropy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y1 - t1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "validation_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_validation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_139": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_148": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_149": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(result_path, data_info, 'tf_log')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_162": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_163": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_44": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_141": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(mask_sigmoid_cross_entropy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_142": {
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_143": {
                "name": {
                    "value": "validation_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_validation))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_144": {
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_145": {
                "name": {
                    "value": "train_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_train, 0, train_len1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_146": {
                "name": {
                    "value": "validation_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_validation, train_len1, train_len1 + validation_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_147": {
                "name": {
                    "value": "test_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_test, train_len1 + validation_len, train_len1 + validation_len + test_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_150": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_166": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_51": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "num_thresholds": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "a": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='x12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x21, z11) + tf.matmul(x22, z21), W1) + tf.matmul(tf.matmul(x21, z12) + tf.matmul(x22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "a": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='x22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x21, z11) + tf.matmul(x22, z21), W1) + tf.matmul(tf.matmul(x21, z12) + tf.matmul(x22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "a": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='v12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(v21, z11) + tf.matmul(v22, z21), W1) + tf.matmul(tf.matmul(v21, z12) + tf.matmul(v22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_125": {
                "a": {
                    "value": "v22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='v22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(v21, z11) + tf.matmul(v22, z21), W1) + tf.matmul(tf.matmul(v21, z12) + tf.matmul(v22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_130": {
                "x": {
                    "value": "y1 - t1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_165": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_114": {
                "a": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='x12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_115": {
                "a": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='x22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_122": {
                "a": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='v12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "a": {
                    "value": "v22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='v22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "new-dna-gcn/hetero_graph_convolution.py": {
        "sklearn": {},
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_17": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_25": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_26": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(preds, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_27": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(preds - labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_65": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([total_len, 200], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([graph_size - total_len, 200], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([200, 1], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([200, 1], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "x11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x11-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x12-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "x21",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x21-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x22-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "z11",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z11-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "z12",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z12-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "z21",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z21-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(graph_size - total_len, graph_size - total_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z22-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x11, z11) + tf.matmul(x12, z21), W1) + tf.matmul(tf.matmul(x11, z12) + tf.matmul(x12, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x21, z11) + tf.matmul(x22, z21), W1) + tf.matmul(tf.matmul(x21, z12) + tf.matmul(x22, z22), W2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h3, h4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h3, h4], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_sigmoid_cross_entropy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_95": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_103": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_104": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(result_path, data_info, 'tf_log')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_115": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_116": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_29": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_98": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(mask_sigmoid_cross_entropy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_99": {
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_100": {
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_101": {
                "name": {
                    "value": "train_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_train, 0, train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_102": {
                "name": {
                    "value": "test_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_test, train_len, train_len + test_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_105": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_119": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_36": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "num_thresholds": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "a": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='x12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x21, z11) + tf.matmul(x22, z21), W1) + tf.matmul(tf.matmul(x21, z12) + tf.matmul(x22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "a": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='x22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x21, z11) + tf.matmul(x22, z21), W1) + tf.matmul(tf.matmul(x21, z12) + tf.matmul(x22, z22), W2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_118": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "a": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(total_len, graph_size - total_len), name='x12-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_83": {
                "a": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='x22-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(graph_size - total_len, graph_size - total_len), name='z22-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dna-gcn/dna_gcn.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_170": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_178": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_179": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(preds, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_180": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_181": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(preds - labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_234": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([X.shape[0], 200], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_235": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([200, 1], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_238": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_239": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_240": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x, z), w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_243": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_X[i, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x, z), w1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_244": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(x, a), w2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_245": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_sigmoid_cross_entropy(y, Y, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, Y, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_248": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, Y, mask_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_251": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_257": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_258": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(args.result_path, args.data_info, 'tf_log')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_272": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_252": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(mask_sigmoid_cross_entropy(y, Y, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_253": {
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, Y, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_254": {
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, Y, mask_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_255": {
                "name": {
                    "value": "train_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, Y, mask_train, 0, train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_256": {
                "name": {
                    "value": "test_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, Y, mask_test, train_len, train_len + test_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_259": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_274": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_194": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "num_thresholds": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_X[i, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='z-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_273": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_273": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dna-gcn/graph_convolution.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_25": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_33": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(preds, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_35": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(preds - labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([graph_matrix.shape[0], 200], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_61": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([200, 1], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x, z), w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x, z), w1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(x, a), w2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_sigmoid_cross_entropy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "validation_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_validation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_82": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_91": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_92": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(result_path, data_info, 'tf_log')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_105": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_107": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_37": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_84": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(mask_sigmoid_cross_entropy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_85": {
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_86": {
                "name": {
                    "value": "validation_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_validation))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_87": {
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_88": {
                "name": {
                    "value": "train_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_train, 0, train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_89": {
                "name": {
                    "value": "validation_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_validation, train_len, train_len + validation_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_90": {
                "name": {
                    "value": "test_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_test, train_len + validation_len, train_len + validation_len + test_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_93": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_110": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_44": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "num_thresholds": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='z-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_109": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dna-gcn/markov_graph_convolution.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_24": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_32": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_33": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(preds, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_34": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(preds - labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([graph_matrix.shape[0], 200], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([200, 1], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x1-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x, z), w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "a": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x1-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x, z), w1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(x_, a), w2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_sigmoid_cross_entropy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_78": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_85": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_86": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(result_path, data_info, 'tf_log')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_97": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_98": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_36": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_80": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(mask_sigmoid_cross_entropy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_81": {
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_82": {
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_83": {
                "name": {
                    "value": "train_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_train, 0, train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_84": {
                "name": {
                    "value": "test_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_test, train_len, train_len + test_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_87": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_101": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_44": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "num_thresholds": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='z-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_100": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dna-gcn/simple_graph_convolution.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_25": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_33": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(preds, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_35": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(preds - labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[graph_matrix.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='z-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(x, z), w1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_70": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_sigmoid_cross_entropy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "variable": {
                    "value": "validation_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_validation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_77": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_86": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_87": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(result_path, data_info, 'tf_log')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_100": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_101": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_37": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_79": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(mask_sigmoid_cross_entropy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_80": {
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_81": {
                "name": {
                    "value": "validation_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_validation))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_82": {
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_83": {
                "name": {
                    "value": "train_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_train, 0, train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_84": {
                "name": {
                    "value": "validation_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_validation, train_len, train_len + validation_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_85": {
                "name": {
                    "value": "test_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_test, train_len + validation_len, train_len + validation_len + test_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_88": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_104": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_44": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "num_thresholds": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_103": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dna-gcn/validation.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_30": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_38": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(preds, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_40": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(preds - labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([graph_matrix.shape[0], 200], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([200, 1], stddev=1, seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x, z), w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x, z), w1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(x, a), w2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_99": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_sigmoid_cross_entropy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_104": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GPUOptions_116": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_117": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_42": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_random_seed_106": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_120": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_49": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "num_thresholds": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='z-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_119": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "new-dna-gcn/graph_convolution.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_21": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_29": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_30": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(preds, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_31": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "preds - labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_32": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(preds - labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([feature_matrix.shape[0], 200], stddev=1, seed=random_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([200, 1], stddev=1, seed=random_seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "z-feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(tf.matmul(x, z), w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(tf.matmul(x, z), w1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(x, a), w2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_79": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_sigmoid_cross_entropy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_accuracy(y, true_label, mask_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_84": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_91": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_92": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(result_path, data_info, 'tf_log')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_103": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_104": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_86": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(mask_sigmoid_cross_entropy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_87": {
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_88": {
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_accuracy(y, true_label, mask_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_89": {
                "name": {
                    "value": "train_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_train, 0, train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_90": {
                "name": {
                    "value": "test_auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_AUC(y1, true_label, mask_test, train_len, train_len + test_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_93": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_107": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_41": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(zz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preds[a:b, :] * mask[a:b, :]",
                            "BinOp"
                        ]
                    ]
                },
                "num_thresholds": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, None), name='z-feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_106": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}