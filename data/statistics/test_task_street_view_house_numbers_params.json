{
    "CNN_eval.py": {
        "tensorflow": {
            "convert_to_tensor_56": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(X, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "variable": {
                    "value": "convout",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(X, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(filter_shape, ax)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_64": {
                "variable": {
                    "value": "centered_X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(X, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "convout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(X, filters, [1, 1, 1, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "tf_test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 32, 32, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "layer1_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[patch_size, patch_size, num_channels, depth1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "layer1_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[depth1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "B1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "layer2_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[patch_size, patch_size, depth1, depth2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "layer2_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[depth2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "B2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "layer3_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[patch_size, patch_size, depth2, num_hidden1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "layer3_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_hidden1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "B3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "s1_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WS1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_hidden1, num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "s1_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_labels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "BS1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "s2_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WS2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_hidden1, num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "s2_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_labels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "BS2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "s3_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WS3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_hidden1, num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_125": {
                "variable": {
                    "value": "s3_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_labels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "BS3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_126": {
                "variable": {
                    "value": "s4_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WS4",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_hidden1, num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_128": {
                "variable": {
                    "value": "s4_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_labels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "BS4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "s5_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "WS5",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_hidden1, num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_131": {
                "variable": {
                    "value": "s5_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_labels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "BS5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.softmax(logits1), tf.nn.softmax(logits2), tf.nn.softmax(logits3), tf.nn.softmax(logits4), tf.nn.softmax(logits5)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_165": {
                "variable": {
                    "value": "test_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.argmax(predict, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_199": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_18": {
                "value": {
                    "value": "x / np.sum(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "sum_sqr_XX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.square(centered_X)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(filter_shape, ax)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_77": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sum_sqr_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(tf.square(centered_X), filters, [1, 1, 1, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_79": {
                "variable": {
                    "value": "per_img_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(sum_sqr_XX)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_80": {
                "variable": {
                    "value": "divisor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "per_img_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(denom)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(sum_sqr_XX)",
                            "Call"
                        ]
                    ]
                }
            },
            "truediv_82": {
                "variable": {
                    "value": "new_X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "centered_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(X, convout)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.maximum(divisor, threshold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_136": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "LCN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LecunLCN(data, shape)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "layer1_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W1', shape=[patch_size, patch_size, num_channels, depth1], initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "C1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv + layer1_biases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "local_response_normalization_138": {
                "variable": {
                    "value": "lrn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv + layer1_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv + layer2_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv + layer3_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden, keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_139": {
                "variable": {
                    "value": "sub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lrn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.local_response_normalization(hidden)",
                            "Call"
                        ],
                        [
                            "tf.nn.local_response_normalization(hidden)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "S2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_140": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(lrn, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME', name='S2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(lrn, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME', name='S4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "layer2_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W2', shape=[patch_size, patch_size, depth1, depth2], initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "C3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv + layer2_biases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "local_response_normalization_142": {
                "variable": {
                    "value": "lrn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv + layer1_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv + layer2_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv + layer3_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden, keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_143": {
                "variable": {
                    "value": "sub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lrn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.local_response_normalization(hidden)",
                            "Call"
                        ],
                        [
                            "tf.nn.local_response_normalization(hidden)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "S4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_144": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(lrn, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME', name='S2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(lrn, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME', name='S4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "layer3_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W3', shape=[patch_size, patch_size, depth2, num_hidden1], initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "C5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv + layer3_biases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_146": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv + layer1_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv + layer2_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv + layer3_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv + layer1_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv + layer2_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv + layer3_biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1] * shape[2] * shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_174": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_32": {
                "value": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(kernel_shape, dtype=float)",
                            "Call"
                        ],
                        [
                            "filter_ / np.sum(filter_)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_107": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_111": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_115": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_hidden1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_119": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_122": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_125": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_128": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_131": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_165": {
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.nn.softmax(logits1), tf.nn.softmax(logits2), tf.nn.softmax(logits3), tf.nn.softmax(logits4), tf.nn.softmax(logits5)])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_173": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "init_model(graph, test_dataset, image_index)",
                            "Call"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_74": {
                "x": {
                    "value": "centered_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(X, convout)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_82": {
                "x": {
                    "value": "divisor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(per_img_mean, denom)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_150": {
                "a": {
                    "value": "reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hidden, [shape[0], shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "s1_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WS1', shape=[num_hidden1, num_labels], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_151": {
                "a": {
                    "value": "reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hidden, [shape[0], shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "s2_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WS2', shape=[num_hidden1, num_labels], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_152": {
                "a": {
                    "value": "reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hidden, [shape[0], shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "s3_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WS3', shape=[num_hidden1, num_labels], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_153": {
                "a": {
                    "value": "reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hidden, [shape[0], shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "s4_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WS4', shape=[num_hidden1, num_labels], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_154": {
                "a": {
                    "value": "reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hidden, [shape[0], shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "s5_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('WS5', shape=[num_hidden1, num_labels], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_161": {
                "logits": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(reshape, s2_w) + s2_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_162": {
                "logits": {
                    "value": "logits4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(reshape, s4_w) + s4_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_163": {
                "logits": {
                    "value": "logits5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(reshape, s5_w) + s5_b",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}