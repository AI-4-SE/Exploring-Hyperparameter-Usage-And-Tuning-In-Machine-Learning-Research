{
    "data.py": {
        "torch": {
            "DataLoader_106": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SalObjDataset(image_root, gt_root, mask_root, gray_root, edge_root, trainsize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/vgg.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "pre_train",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/jing-zhang/jing_file/vgg16-397923af.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_36": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_46": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/vgg_models.py": {
        "torch": {
            "AdaptiveAvgPool2d_13": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.conv_du",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channel, channel // reduction, 1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_fea[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_fea[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_fea[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv5_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.classifer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_fea * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "edge4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.conv5_4(edge4_fea))",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge4, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_91": {
                "variable": {
                    "value": "edge5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.conv5_5(edge5_fea))",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge5, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge2, edge4, edge5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.asppconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_136": {
                "variable": {
                    "value": "self.conv2d_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_185": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_188": {
                "variable": {
                    "value": "self.img_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.img_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.edge_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, reduction_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_201": {
                "variable": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_pooling(x)",
                            "Call"
                        ],
                        [
                            "self.img_conv(img_features)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img_features, x_size[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_size[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_205": {
                "variable": {
                    "value": "edge_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([edge2, edge4, edge5], dim=1)",
                            "Call"
                        ],
                        [
                            "self.rcab(edge)",
                            "Call"
                        ],
                        [
                            "self.classifer(edge)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_size[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, edge_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_219": {
                "variable": {
                    "value": "self.upsample4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_220": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_222": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.classification",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout2d(p=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_235": {
                "variable": {
                    "value": "self.sal_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "variable": {
                    "value": "self.edge_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.after_aspp_conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "variable": {
                    "value": "self.after_aspp_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.final_sal_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channel * 2, channel, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "variable": {
                    "value": "self.fuse_canny_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "variable": {
                    "value": "self.fused_edge_sal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_262": {
                "variable": {
                    "value": "edge_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_layer(x1, x3, x4)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_268": {
                "variable": {
                    "value": "canny",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "canny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_size[0], 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(canny).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_269": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_out, canny)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_271": {
                "variable": {
                    "value": "acts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fuse_canny_edge(cat)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(acts)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_276": {
                "variable": {
                    "value": "x_conv5_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.after_aspp_conv5(x5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "feat_fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_conv5_up, x_conv2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_280": {
                "variable": {
                    "value": "sal_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sal_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.final_sal_seg(feat_fuse)",
                            "Call"
                        ],
                        [
                            "F.interpolate(sal_init, x_size[2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_size[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.asppconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(input_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.asppconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_129": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.asppconv(_input)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(feature, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_227": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "num_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_230": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "in_channels": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_284": {
                "tensors": {
                    "value": "(sal_feature, edge_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "input_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "input_num",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "num1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "num1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "input_num",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "num1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "num1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "NoLabels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=3, dilation=r, padding=r, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rates",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rates",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "smoothness/__init__.py": {
        "torch": {
            "Tensor_6": {
                "variable": {
                    "value": "laplacian_filter",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_7": {
                "variable": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "laplacian_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[-1, -1, -1], [-1, 8, -1], [-1, -1, -1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_9": {
                "variable": {
                    "value": "lap_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(laplacian_filter, [1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "filter.cuda()",
                            "Call"
                        ],
                        [
                            "torch.reshape(sobel, [1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "filter.cuda()",
                            "Call"
                        ],
                        [
                            "torch.reshape(sobel, [1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "filter.cuda()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_13": {
                "variable": {
                    "value": "sobel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_14": {
                "variable": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sobel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_16": {
                "variable": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(laplacian_filter, [1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "filter.cuda()",
                            "Call"
                        ],
                        [
                            "torch.reshape(sobel, [1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "filter.cuda()",
                            "Call"
                        ],
                        [
                            "torch.reshape(sobel, [1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "filter.cuda()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_21": {
                "variable": {
                    "value": "sobel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_22": {
                "variable": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sobel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "variable": {
                    "value": "gy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(laplacian_filter, [1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "filter.cuda()",
                            "Call"
                        ],
                        [
                            "torch.reshape(sobel, [1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "filter.cuda()",
                            "Call"
                        ],
                        [
                            "torch.reshape(sobel, [1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "filter.cuda()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_28": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_36": {
                "variable": {
                    "value": "sal_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradient_x(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_37": {
                "variable": {
                    "value": "sal_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradient_y(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_40": {
                "variable": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(gt_x) * -alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_41": {
                "variable": {
                    "value": "w_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(gt_y) * -alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_47": {
                "variable": {
                    "value": "lap_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "laplacian_edge(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_48": {
                "variable": {
                    "value": "lap_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "laplacian_edge(gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_49": {
                "variable": {
                    "value": "weight_lap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lap_gt * -alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "gt_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_x(gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_41": {
                "input": {
                    "value": "gt_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_y(gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_52": {
                "input": {
                    "value": "weighted_lap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "charbonnier_penalty(lap_sal * weight_lap)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "Adam_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_45": {
                "variable": {
                    "value": "CE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "sal1_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sal1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "sal2_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sal2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + 'scribble' + '_%d' % epoch + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(masks)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_113": {
                "input": {
                    "value": "sal1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_114": {
                "input": {
                    "value": "edge_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_115": {
                "input": {
                    "value": "sal2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_107": {
                "input": {
                    "value": "sal1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "input": {
                    "value": "sal2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_111": {
                "input": {
                    "value": "edge_map",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "pad_19": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.gt(0.5).float()",
                            "Call"
                        ],
                        [
                            "F.pad(label, (1, 1, 1, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_20": {
                "variable": {
                    "value": "label_fx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.gt(0.5).float()",
                            "Call"
                        ],
                        [
                            "F.pad(label, (1, 1, 1, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(fx, (1, 1, 3, 3))",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(fx)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_21": {
                "variable": {
                    "value": "label_fy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.gt(0.5).float()",
                            "Call"
                        ],
                        [
                            "F.pad(label, (1, 1, 1, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(fy, (1, 1, 3, 3))",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(fy)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_22": {
                "variable": {
                    "value": "label_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(label_fx, label_fx) + torch.mul(label_fy, label_fy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_23": {
                "variable": {
                    "value": "label_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.mul(label_fx, label_fx) + torch.mul(label_fy, label_fy))",
                            "Call"
                        ],
                        [
                            "torch.gt(label_grad, contour_th).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "contour_th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.5",
                            "float"
                        ]
                    ]
                }
            },
            "pad_30": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(pred, (1, 1, 1, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "variable": {
                    "value": "pred_fx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(pred, (1, 1, 1, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(fx, (1, 1, 3, 3))",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(fx)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_32": {
                "variable": {
                    "value": "pred_fy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(pred, (1, 1, 1, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(fy, (1, 1, 3, 3))",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(fy)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_11": {
                "ndarray": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(fx, (1, 1, 3, 3))",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(fx)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_12": {
                "ndarray": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(fy, (1, 1, 3, 3))",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(fy)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_22": {
                "input": {
                    "value": "label_fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(label, fy)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "label_fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(label, fy)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}