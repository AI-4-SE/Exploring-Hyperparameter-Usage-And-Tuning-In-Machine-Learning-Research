{
    "parameter_and_input_saliency.py": {
        "torch": {
            "stack_167": {
                "variable": {
                    "value": "grads_to_save",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_167": {
                "variable": {
                    "value": "grads_to_save",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_160": {
                "variable": {
                    "value": "matching_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_261": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.models.resnet50(pretrained=True)",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torchvision.models.vgg19(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "torchvision.models.densenet121(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torchvision.models.inception_v3(pretrained=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_290": {
                "variable": {
                    "value": "inf_results",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "inference_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_helpers_root_path, 'ImageNet_val_inference_results_{:s}.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_313": {
                "variable": {
                    "value": "filter_stats",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filter_stats_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_helpers_root_path, 'ImageNet_val_saliency_stat_{:s}_filter_wise.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "reference_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "int(args.image_target_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_327": {
                "variable": {
                    "value": "reference_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "reference_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reference_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(int(args.image_target_label)).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(reference_target).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_337": {
                "variable": {
                    "value": "reference_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_151": {
                "variable": {
                    "value": "sorted_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "filter_saliency.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_153": {
                "variable": {
                    "value": "sorted_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filter_saliency",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filter_saliency_model(perturbed_inputs, reference_targets, testset_mean_abs_grad=testset_mean_stat, testset_std_abs_grad=testset_std_stat).to(device)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_297": {
                "obj": {
                    "value": "{'incorrect_id': incorrect_id, 'incorrect_predictions': incorrect_predictions, 'correct_id': correct_id}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "inference_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_helpers_root_path, 'ImageNet_val_inference_results_{:s}.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_319": {
                "obj": {
                    "value": "{'mean': filter_testset_mean_abs_grad, 'std': filter_testset_std_abs_grad}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filter_stats_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_helpers_root_path, 'ImageNet_val_saliency_stat_{:s}_filter_wise.pth'.format(args.model))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_135": {
                "input": {
                    "value": "perturbed_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reference_inputs.detach().clone()",
                            "Call"
                        ],
                        [
                            "(1 - args.noise_percent) * perturbed_inputs + args.noise_percent * torch.randn_like(perturbed_inputs)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "parameter_saliency/saliency_model_backprop.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "variable": {
                    "value": "testset_std_abs_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "testset_std_abs_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "testset_std_abs_grad / float(len(testloader) - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(testset_std_abs_grad)",
                            "Call"
                        ],
                        [
                            "(testset_grad - testset_mean_abs_grad) * (testset_grad - testset_mean_abs_grad_prev)",
                            "BinOp"
                        ],
                        [
                            "testset_std_abs_grad + (testset_grad - testset_mean_abs_grad) * (testset_grad - testset_mean_abs_grad_prev)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grad_46": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(outputs, targets)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_68": {
                "variable": {
                    "value": "naive_saliency",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(filter_grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "naive_saliency",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "filter_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "variable": {
                    "value": "testset_mean_abs_grad_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "testset_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filter_saliency_model(testset_inputs, testset_targets).detach().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "filter_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_228": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_237": {
                "variable": {
                    "value": "correct_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "predicted == targets",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(-1, device='cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_244": {
                "condition": {
                    "value": "correct_output == -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor(1, device='cuda')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(0, device='cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_244": {
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normal_69": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}