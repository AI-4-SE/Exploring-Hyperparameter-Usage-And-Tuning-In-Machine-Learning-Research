{
    "Attention_analysis/analysis.py": {
        "torch": {
            "tensor_61": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[indexed_tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Attention_analysis/process.py": {
        "torch": {
            "tensor_131": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[indexed_tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CWS_probing/src/main.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "seed_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "word_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "label_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_263": {
                "variable": {
                    "value": "char_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, max_word_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "word_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "label_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_345": {
                "variable": {
                    "value": "char_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, max_word_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_442": {
                "variable": {
                    "value": "data.HP_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_248": {
                "variable": {
                    "value": "mask[idx, :seqlen]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_332": {
                "variable": {
                    "value": "mask[idx, :seqlen]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_390": {
                "f": {
                    "value": "data.load_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_411": {
                "f": {
                    "value": "data.load_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_325": {
                "*size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "CWS_probing/src/model/charbigru.py": {
        "torch": {
            "Dropout_13": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_19": {
                "variable": {
                    "value": "self.char_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirect_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_42": {
                "variable": {
                    "value": "pack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_59": {
                "variable": {
                    "value": "pack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_61": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_18": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CWS_probing/src/model/charbilstm.py": {
        "torch": {
            "Dropout_13": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_19": {
                "variable": {
                    "value": "self.char_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirect_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_42": {
                "variable": {
                    "value": "pack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_61": {
                "variable": {
                    "value": "pack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_63": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_18": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CWS_probing/src/model/charcnn.py": {
        "torch": {
            "Dropout_11": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_12": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_17": {
                "variable": {
                    "value": "self.char_cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_41": {
                "variable": {
                    "value": "char_cnn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_cnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_cnn(char_embeds)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(char_cnn_out, char_cnn_out.size(2)).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.char_cnn(char_embeds).transpose(2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "char_cnn_out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CWS_probing/src/model/crf.py": {
        "torch": {
            "max_20": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_21": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1, 1, m_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "init_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.tagset_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tagset_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_transitions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.tagset_size + 2, self.tagset_size + 2)",
                            "Call"
                        ],
                        [
                            "init_transitions.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_115": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_159": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_162": {
                "variable": {
                    "value": "last_partition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1).expand(batch_size, 1, tag_size) - 1",
                            "BinOp"
                        ],
                        [
                            "length_mask.view(batch_size, 1, 1, 1).expand(batch_size, 1, tag_size, nbest) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_165": {
                "variable": {
                    "value": "(_, last_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, tag_size) + self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_partition.expand(batch_size, tag_size, nbest, tag_size) + self.transitions.view(1, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_170": {
                "variable": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size, nbest)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_230": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_232": {
                "variable": {
                    "value": "end_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_235": {
                "variable": {
                    "value": "end_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_transition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transitions[:, STOP_TAG].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "end_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(tags, 1, length_mask - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_240": {
                "variable": {
                    "value": "tg_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(seq_len, batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.Variable(torch.LongTensor(batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.transpose(1, 0).contiguous().view(seq_len, batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_279": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_336": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_339": {
                "variable": {
                    "value": "last_partition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1).expand(batch_size, 1, tag_size) - 1",
                            "BinOp"
                        ],
                        [
                            "length_mask.view(batch_size, 1, 1, 1).expand(batch_size, 1, tag_size, nbest) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_343": {
                "variable": {
                    "value": "(end_partition, end_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, tag_size) + self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_partition.expand(batch_size, tag_size, nbest, tag_size) + self.transitions.view(1, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size, nbest)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_409": {
                "variable": {
                    "value": "(max_scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "end_partition[:, :, STOP_TAG]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_411": {
                "variable": {
                    "value": "path_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minus_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - max_scores.view(batch_size, 1).expand(batch_size, nbest)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_22": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score.expand_as(vec)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_146": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size) + partition.contiguous().view(batch_size, tag_size, nbest, 1).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_189": {
                "variable": {
                    "value": "pointer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_314": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size) + partition.contiguous().view(batch_size, tag_size, nbest, 1).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_391": {
                "variable": {
                    "value": "new_pointer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx].view(batch_size, tag_size * nbest)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, nbest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "torch.exp(vec - max_score.expand_as(vec))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_347": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_22": {
                "input": {
                    "value": "vec - max_score.expand_as(vec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CWS_probing/src/model/ncrf_transformers.py": {
        "torch": {
            "zeros_50": {
                "variable": {
                    "value": "subword_word_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_word_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "batch_word_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_word_mask_tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_87": {
                "variable": {
                    "value": "one_sentence_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_hidden_states[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "subword_word_indicator[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "one_sentence_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "batch_token_ids_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "CWS_probing/src/model/sentclassifier.py": {
        "torch": {
            "cross_entropy_42": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "batch_label.view(batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "(_, tag_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_57": {
                "variable": {
                    "value": "(_, tag_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_68": {
                "variable": {
                    "value": "(_, tag_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "outs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Softmax_70": {
                "variable": {
                    "value": "sf",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CWS_probing/src/model/seqlabel.py": {
        "torch": {
            "CrossEntropyLoss_44": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "(_, tag_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_hidden(*input)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size * seq_len, -1)",
                            "Call"
                        ],
                        [
                            "self.word_hidden(*input)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size * seq_len, -1)",
                            "Call"
                        ],
                        [
                            "self.word_hidden(*input)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_64": {
                "variable": {
                    "value": "(_, tag_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_hidden(*input)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size * seq_len, -1)",
                            "Call"
                        ],
                        [
                            "self.word_hidden(*input)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size * seq_len, -1)",
                            "Call"
                        ],
                        [
                            "self.word_hidden(*input)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CWS_probing/src/model/wordrep.py": {
        "torch": {
            "ModuleList_57": {
                "variable": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "data.HP_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_49": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data.word_alphabet.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "num_embeddings": {
                    "value": "data.feature_alphabets[idx].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.feature_embedding_dims[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "data.pretrain_word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "self.random_embedding(data.word_alphabet.size(), self.embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "data.pretrain_feature_embeddings[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "ndarray": {
                    "value": "self.random_embedding(data.feature_alphabets[idx].size(), self.feature_embedding_dims[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CWS_probing/src/model/wordsequence.py": {
        "torch": {
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "data.HP_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "final_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sent_out]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.word_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data.label_alphabet_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_207": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.word_weights(feature_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_hidden_dim + feature_dim_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data.label_alphabet_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data.label_alphabet_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_135": {
                "variable": {
                    "value": "word_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.word2cnn(word_represent)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "variable": {
                    "value": "word_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "feature_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature_out, transformer_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_215": {
                "variable": {
                    "value": "sent_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.high_transformer.extract_features(batch_word_text)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.ff(word_represent)).transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cnn_feature.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "feature_out.contiguous()",
                            "Call"
                        ],
                        [
                            "word_represent",
                            "variable"
                        ],
                        [
                            "lstm_out.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([feature_out, transformer_output], 2)",
                            "Call"
                        ],
                        [
                            "self.network_out_features(*input)",
                            "Call"
                        ],
                        [
                            "self.dropout(feature_out)",
                            "Call"
                        ],
                        [
                            "self.network_out_features(*input)",
                            "Call"
                        ],
                        [
                            "feature_out * mask",
                            "BinOp"
                        ],
                        [
                            "feature_out.view(batch_size * seq_len, hidden_size).contiguous()",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "feature_out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_54": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "data.HP_lstm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "data.HP_bilstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data.HP_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_146": {
                "variable": {
                    "value": "feature_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(word_represent)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_146": {
                "variable": {
                    "value": "feature_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_56": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "data.HP_lstm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "sdata.HP_bilstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.word2cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data.HP_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.cnn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.cnn_drop_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_66": {
                "variable": {
                    "value": "self.cnn_batchnorm_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "cnn_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cnn_list[idx](word_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "cnn_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cnn_list[idx](cnn_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_150": {
                "variable": {
                    "value": "packed_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_represent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wordrep(*input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "word_seq_lengths.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_153": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool1d_221": {
                "variable": {
                    "value": "sent_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.high_transformer.extract_features(batch_word_text)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.ff(word_represent)).transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cnn_feature.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "feature_out.contiguous()",
                            "Call"
                        ],
                        [
                            "word_represent",
                            "variable"
                        ],
                        [
                            "lstm_out.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([feature_out, transformer_output], 2)",
                            "Call"
                        ],
                        [
                            "self.network_out_features(*input)",
                            "Call"
                        ],
                        [
                            "self.dropout(feature_out)",
                            "Call"
                        ],
                        [
                            "self.network_out_features(*input)",
                            "Call"
                        ],
                        [
                            "feature_out * mask",
                            "BinOp"
                        ],
                        [
                            "feature_out.view(batch_size * seq_len, hidden_size).contiguous()",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "feature_out.transpose(2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "feature_out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_96": {
                "num_embeddings": {
                    "value": "data.feature_alphabets[idx].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.feature_embedding_dims[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "data.pretrain_feature_embeddings[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "self.random_embedding(data.feature_alphabets[idx].size(), self.feature_embedding_dims[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_70": {
                "in_channels": {
                    "value": "data.HP_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "data.HP_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kernel - 1) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_71": {
                "p": {
                    "value": "data.HP_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "num_features": {
                    "value": "data.HP_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CWS_probing/src/ncrf.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "seed_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "variable": {
                    "value": "self.data.HP_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "the_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ncrf.model'",
                            "Method Argument"
                        ],
                        [
                            "'ncrf.model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_52": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.data.HP_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_108": {
                "obj": {
                    "value": "the_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'data': self.data, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_dir)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ncrf.model'",
                            "Method Argument"
                        ],
                        [
                            "'ncrf.model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adagrad_54": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_56": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_58": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}