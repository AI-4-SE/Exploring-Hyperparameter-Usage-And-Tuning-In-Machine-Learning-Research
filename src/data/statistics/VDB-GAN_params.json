{
    "source/data_processing/DataLoader.py": {
        "torch": {
            "DataLoader_188": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "source/latent_space_interpolation.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Generator(size=args.size, z_dim=args.latent_size, final_channels=64, max_channels=1024).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_83": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_93": {
                "*size": {
                    "value": "args.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_101": {
                "*size": {
                    "value": "args.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "source/train.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_196": {
                "variable": {
                    "value": "gen_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vdb_gan.gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_202": {
                "variable": {
                    "value": "dis_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vdb_gan.dis.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_182": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_190": {
                "f": {
                    "value": "args.discriminator_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_200": {
                "f": {
                    "value": "args.gen_optim_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_206": {
                "f": {
                    "value": "args.dis_optim_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "source/vdb/Gan.py": {
        "torch": {
            "clamp_123": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples.detach() / 2 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_19": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_34": {
                "variable": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "self.dis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.dis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_270": {
                "obj": {
                    "value": "self.gen.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_' + str(epoch) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "self.dis.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_DIS_' + str(epoch) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_272": {
                "obj": {
                    "value": "gen_optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_optim_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_OPTIM' + str(epoch) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_273": {
                "obj": {
                    "value": "dis_optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_optim_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_DIS_OPTIM' + str(epoch) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "source/vdb/Gan_networks.py": {
        "torch": {
            "leaky_relu_118": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nf0 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_200": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x_s + alpha * dx",
                            "BinOp"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, self.nf0, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "th.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(out)",
                            "Call"
                        ],
                        [
                            "th.randn_like(mus).to(x.device) * sigmas + mus",
                            "BinOp"
                        ],
                        [
                            "mus",
                            "Name"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "variable": {
                    "value": "self.conv_converter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nf * 2 ** (num_layers - i - 1), nf_max)",
                            "Call"
                        ],
                        [
                            "min(nf * 2 ** (i + 1), nf_max)",
                            "Call"
                        ],
                        [
                            "blocks[-1].conv_1.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nf * 2 ** (num_layers - i - 1), nf_max)",
                            "Call"
                        ],
                        [
                            "min(nf * 2 ** (i + 1), nf_max)",
                            "Call"
                        ],
                        [
                            "blocks[-1].conv_1.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nf1 // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_288": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(sigmas)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_169": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_248": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_295": {
                "input": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "source/vdb/Losses.py": {
        "torch": {
            "BCEWithLogitsLoss_96": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_142": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_202": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_samps.shape[0]",
                            "Subscript"
                        ],
                        [
                            "real_samps.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_278": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_samps.shape[0]",
                            "Subscript"
                        ],
                        [
                            "real_samps.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_352": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * th.mean(th.abs(real_samps - fake_samps), 1)",
                            "BinOp"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "10 * th.mean(th.abs(real_samps - fake_samps), 1)",
                            "BinOp"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_353": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * th.mean(th.abs(real_samps - fake_samps), 1)",
                            "BinOp"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "10 * th.mean(th.abs(real_samps - fake_samps), 1)",
                            "BinOp"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_354": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-loss + 0.5 * loss ** 2 / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_373": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * th.mean(th.abs(real_samps - fake_samps), 1)",
                            "BinOp"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "10 * th.mean(th.abs(real_samps - fake_samps), 1)",
                            "BinOp"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_374": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * th.mean(th.abs(real_samps - fake_samps), 1)",
                            "BinOp"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "10 * th.mean(th.abs(real_samps - fake_samps), 1)",
                            "BinOp"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ],
                        [
                            "th.mean(norm, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "mus ** 2 + sigmas ** 2 - th.log(sigmas ** 2 + alpha) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_47": {
                "input": {
                    "value": "kl_divergence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * th.sum(mus ** 2 + sigmas ** 2 - th.log(sigmas ** 2 + alpha) - 1, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_104": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(r_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_105": {
                "*size": {
                    "value": "real_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_110": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(f_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "(r_mus, f_mus)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "(r_sigmas, f_sigmas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_123": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_124": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(r_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_152": {
                "*size": {
                    "value": "real_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(f_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "(r_mus, f_mus)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "(r_sigmas, f_sigmas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_172": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_173": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_211": {
                "outputs": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * real_samps + (1 - epsilon) * fake_samps",
                            "BinOp"
                        ],
                        [
                            "epsilon * real_samps + (1 - epsilon) * fake_samps",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "th.ones_like(op)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_239": {
                "tensors": {
                    "value": "(r_mus, f_mus)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "(r_sigmas, f_sigmas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_249": {
                "input": {
                    "value": "self.dis(fake_samps, mean_mode=True)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_287": {
                "outputs": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * real_samps + (1 - epsilon) * fake_samps",
                            "BinOp"
                        ],
                        [
                            "epsilon * real_samps + (1 - epsilon) * fake_samps",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "th.ones_like(op)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_314": {
                "tensors": {
                    "value": "(r_mus, f_mus)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_315": {
                "tensors": {
                    "value": "(r_sigmas, f_sigmas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_324": {
                "input": {
                    "value": "self.dis(fake_samps, mean_mode=True)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_351": {
                "input": {
                    "value": "th.abs(real_samps - fake_samps)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_358": {
                "tensors": {
                    "value": "(r_mus, f_mus)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "tensors": {
                    "value": "(r_sigmas, f_sigmas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "tensors": {
                    "value": "(r_mus, f_mus)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_403": {
                "tensors": {
                    "value": "(r_sigmas, f_sigmas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_427": {
                "input": {
                    "value": "th.nn.ReLU()(1 - r_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_428": {
                "input": {
                    "value": "th.nn.ReLU()(1 + f_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_432": {
                "tensors": {
                    "value": "(r_mus, f_mus)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_433": {
                "tensors": {
                    "value": "(r_sigmas, f_sigmas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_438": {
                "input": {
                    "value": "self.dis(fake_samps, mean_mode=True)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_458": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(f_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_461": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(r_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_464": {
                "input": {
                    "value": "th.nn.ReLU()(1 - r_f_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_465": {
                "input": {
                    "value": "th.nn.ReLU()(1 + f_r_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_469": {
                "tensors": {
                    "value": "(r_mus, f_mus)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_470": {
                "tensors": {
                    "value": "(r_sigmas, f_sigmas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_480": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(f_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_483": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(r_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_486": {
                "input": {
                    "value": "th.nn.ReLU()(1 + r_f_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_487": {
                "input": {
                    "value": "th.nn.ReLU()(1 - f_r_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_226": {
                "input": {
                    "value": "real_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps, mean_mode=True)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_227": {
                "input": {
                    "value": "real_out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_302": {
                "input": {
                    "value": "real_out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_351": {
                "input": {
                    "value": "real_samps - fake_samps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_372": {
                "input": {
                    "value": "th.abs(real_samps - fake_samps)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_375": {
                "input": {
                    "value": "-loss + 0.5 * loss ** 2 / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_212": {
                "input": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_288": {
                "input": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_372": {
                "input": {
                    "value": "real_samps - fake_samps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_378": {
                "input": {
                    "value": "self.dis(fake_samps, mean_mode=True)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_398": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(f_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_408": {
                "input": {
                    "value": "self.dis(fake_samps, mean_mode=True)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "sigmas ** 2 + alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_381": {
                "input": {
                    "value": "self.dis(fake_samps, mean_mode=True)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_397": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.act(r_preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_vdb/test_Gan_networks.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_31": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "69",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_59": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_72": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_106": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_116": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_27": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resBlock_1(mock_in)",
                            "Call"
                        ],
                        [
                            "self.resBlock_2(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen_edge(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_28": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resBlock_1(mock_in)",
                            "Call"
                        ],
                        [
                            "self.resBlock_2(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen_edge(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_34": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resBlock_1(mock_in)",
                            "Call"
                        ],
                        [
                            "self.resBlock_2(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen_edge(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_35": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resBlock_1(mock_in)",
                            "Call"
                        ],
                        [
                            "self.resBlock_2(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen_edge(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_112": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resBlock_1(mock_in)",
                            "Call"
                        ],
                        [
                            "self.resBlock_2(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen_edge(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_113": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resBlock_1(mock_in)",
                            "Call"
                        ],
                        [
                            "self.resBlock_2(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen_edge(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_122": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resBlock_1(mock_in)",
                            "Call"
                        ],
                        [
                            "self.resBlock_2(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen_edge(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_123": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.resBlock_1(mock_in)",
                            "Call"
                        ],
                        [
                            "self.resBlock_2(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen_edge(mock_in)",
                            "Call"
                        ],
                        [
                            "self.gen(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_68": {
                "input": {
                    "value": "mock_out1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_69": {
                "input": {
                    "value": "mock_out1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_81": {
                "input": {
                    "value": "mock_out1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_82": {
                "input": {
                    "value": "mock_out1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}