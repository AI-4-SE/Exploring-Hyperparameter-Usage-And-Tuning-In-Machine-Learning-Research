{
    "aif360/algorithms/inprocessing/celisMeta/General.py": {
        "sklearn": {}
    },
    "aif360/algorithms/inprocessing/celisMeta/utils.py": {
        "sklearn": {
            "GaussianMixture_21": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GaussianMixture_28": {
                "variable": {
                    "value": "clf_train",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "aif360/algorithms/inprocessing/gerryfair/auditor.py": {
        "sklearn": {
            "LinearRegression_216": {
                "variable": {
                    "value": "reg0",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_218": {
                "variable": {
                    "value": "reg1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_238": {
                "variable": {
                    "value": "reg0_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_240": {
                "variable": {
                    "value": "reg1_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "aif360/algorithms/inprocessing/gyf/gyf_utils.py": {
        "sklearn": {}
    },
    "aif360/algorithms/inprocessing/kamfadm-2012ecmlpkdd/fadm/lr/pr.py": {
        "sklearn": {
            "LogisticRegression_227": {
                "variable": {
                    "value": "clr",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogisticRegression_239": {
                "variable": {
                    "value": "clr",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "aif360/algorithms/inprocessing/kamfadm-2012ecmlpkdd/train_pr.py": {
        "sklearn": {}
    },
    "aif360/datasets/lime_encoder.py": {
        "sklearn": {}
    },
    "aif360/metrics/binary_label_dataset_metric.py": {
        "sklearn": {
            "NearestNeighbors_147": {
                "variable": {
                    "value": "nbrs",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "aif360/sklearn/datasets/openml_datasets.py": {
        "sklearn": {
            "fetch_openml_82": {
                "data_id": {
                    "value": "1590",
                    "type": "int",
                    "possible_values": []
                },
                "target_column": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "data_home": {
                    "value": "data_home or DATA_HOME_DEFAULT",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "fetch_openml_160": {
                "data_id": {
                    "value": "31",
                    "type": "int",
                    "possible_values": []
                },
                "target_column": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "data_home": {
                    "value": "data_home or DATA_HOME_DEFAULT",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "fetch_openml_230": {
                "data_id": {
                    "value": "1558 if percent10 else 1461",
                    "type": "IfExp",
                    "possible_values": []
                },
                "data_home": {
                    "value": "data_home or DATA_HOME_DEFAULT",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "target_column": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "aif360/sklearn/inprocessing/adversarial_debiasing.py": {
        "sklearn": {
            "check_random_state_95": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LabelEncoder_103": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_is_fitted_278": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "attributes": {
                    "value": "['classes_', 'input_ph', 'keep_prob', 'classifier_logits_']",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_100": {
                "variable": {
                    "value": "self.sess_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "self.input_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "variable": {
                    "value": "self.prot_attr_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_125": {
                "variable": {
                    "value": "self.true_labels_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_187": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_197": {
                "variable": {
                    "value": "clf_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(init_learning_rate, global_step, 1000, 0.96, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.train.inverse_time_decay(init_learning_rate, global_step, 1000, 0.1, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_130": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_features, self.classifier_num_hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.glorot_uniform(seed=s1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_133": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[self.classifier_num_hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(self.input_ph, W1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(self.input_ph, W1) + b1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h1, rate=1 - self.keep_prob, seed=s2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_139": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.classifier_num_hidden_units, n_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.glorot_uniform(seed=s3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[n_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "variable": {
                    "value": "clf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=self.true_labels_ph, logits=self.classifier_logits_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "clf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.squeeze(tf.cast(self.true_labels_ph, tf.int32)), logits=self.classifier_logits_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exponential_decay_190": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "init_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "inverse_time_decay_193": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "init_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_199": {
                "variable": {
                    "value": "adv_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(init_learning_rate, global_step, 1000, 0.96, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.train.inverse_time_decay(init_learning_rate, global_step, 1000, 0.1, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "classifier_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_162": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_163": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(1 + tf.abs(c)) * self.classifier_logits_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, n_groups]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.glorot_uniform(seed=s4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_167": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[n_groups])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_176": {
                "variable": {
                    "value": "adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=self.prot_attr_ph, logits=self.adversary_logits_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "variable": {
                    "value": "adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.squeeze(tf.cast(self.prot_attr_ph, tf.int32)), logits=self.adversary_logits_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_133": {
                "shape": {
                    "value": "[self.classifier_num_hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "shape": {
                    "value": "[n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_144": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(self.input_ph, W1) + b1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h1, rate=1 - self.keep_prob, seed=s2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W2', [self.classifier_num_hidden_units, n_classes], initializer=tf.initializers.glorot_uniform(seed=s3))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W2', [3, n_groups], initializer=tf.initializers.glorot_uniform(seed=s4))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_149": {
                "labels": {
                    "value": "self.true_labels_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.classifier_logits_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_154": {
                "labels": {
                    "value": "tf.squeeze(tf.cast(self.true_labels_ph, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.classifier_logits_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "adversary_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_228": {
                "control_inputs": {
                    "value": "[clf_min]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "glorot_uniform_132": {
                "seed": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "a": {
                    "value": "self.input_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W1', [n_features, self.classifier_num_hidden_units], initializer=tf.initializers.glorot_uniform(seed=s1))",
                            "Call"
                        ]
                    ]
                }
            },
            "glorot_uniform_141": {
                "seed": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "shape": {
                    "value": "[n_groups]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "a": {
                    "value": "tf.concat([s, s * self.true_labels_ph, s * (1.0 - self.true_labels_ph)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W2', [self.classifier_num_hidden_units, n_classes], initializer=tf.initializers.glorot_uniform(seed=s3))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W2', [3, n_groups], initializer=tf.initializers.glorot_uniform(seed=s4))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_177": {
                "labels": {
                    "value": "self.prot_attr_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.adversary_logits_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_182": {
                "labels": {
                    "value": "tf.squeeze(tf.cast(self.prot_attr_ph, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.adversary_logits_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_210": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_218": {
                "input_tensor": {
                    "value": "grad * unit_adv_grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_155": {
                "input": {
                    "value": "tf.cast(self.true_labels_ph, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_162": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "glorot_uniform_166": {
                "seed": {
                    "value": "s4",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_170": {
                "values": {
                    "value": "[s, s * self.true_labels_ph, s * (1.0 - self.true_labels_ph)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_222": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_155": {
                "x": {
                    "value": "self.true_labels_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_163": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('c', initializer=tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_183": {
                "input": {
                    "value": "tf.cast(self.prot_attr_ph, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_183": {
                "x": {
                    "value": "self.prot_attr_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "aif360/sklearn/metrics/metrics.py": {
        "sklearn": {
            "multilabel_confusion_matrix_161": {
                "variable": {
                    "value": "MCM",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "[pos_label]",
                    "type": "List",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_X_y_572": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NearestNeighbors_574": {
                "variable": {
                    "value": "nbrs",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_584": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "pos_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "recall_score_588": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "pos_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "aif360/sklearn/postprocessing/__init__.py": {
        "sklearn": {
            "clone_112": {
                "variable": {
                    "value": "self.estimator_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.estimator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_113": {
                "variable": {
                    "value": "self.postprocessor_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.postprocessor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "if_delegate_has_method_132": {
                "delegate": {
                    "value": "postprocessor_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "if_delegate_has_method_151": {
                "delegate": {
                    "value": "postprocessor_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "if_delegate_has_method_175": {
                "delegate": {
                    "value": "postprocessor_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "if_delegate_has_method_199": {
                "delegate": {
                    "value": "postprocessor_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clone_95": {
                "variable": {
                    "value": "self.postprocessor_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.postprocessor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_116": {
                "variable": {
                    "value": "(X_est, X_post, y_est, y_post, sw_est, sw_post)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "options_",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "train_test_split_120": {
                "variable": {
                    "value": "(X_est, X_post, y_est, y_post)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "options_",
                    "type": "kwargs",
                    "possible_values": []
                }
            }
        }
    },
    "aif360/sklearn/postprocessing/calibrated_equalized_odds.py": {
        "sklearn": {
            "check_random_state_150": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_is_fitted_149": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "attributes": {
                    "value": "mix_rates_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_is_fitted_200": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "attributes": {
                    "value": "['classes_', 'pos_label_']",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "aif360/sklearn/preprocessing/reweighing.py": {
        "sklearn": {
            "clone_138": {
                "variable": {
                    "value": "self.reweigher_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.reweigher",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_139": {
                "variable": {
                    "value": "self.estimator_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.estimator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "if_delegate_has_method_146": {
                "delegate": {
                    "value": "estimator_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "if_delegate_has_method_158": {
                "delegate": {
                    "value": "estimator_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "if_delegate_has_method_174": {
                "delegate": {
                    "value": "estimator_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "if_delegate_has_method_191": {
                "delegate": {
                    "value": "estimator_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "has_fit_parameter_134": {
                "estimator": {
                    "value": "self.estimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameter": {
                    "value": "sample_weight",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "aif360/sklearn/utils.py": {
        "sklearn": {
            "column_or_1d_36": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "column_or_1d_38": {
                "variable": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(sample_weight)",
                            "Call"
                        ],
                        [
                            "np.ones(X.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_consistent_length_41": {
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "noisy_fairlearn.py": {
        "sklearn": {
            "LogisticRegression_58": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {}
    },
    "aif360/algorithms/inprocessing/adversarial_debiasing.py": {
        "tensorflow": {
            "get_variable_82": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[features_dim, self.classifier_num_hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[self.classifier_num_hidden_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(features, W1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_87": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(features, W1) + b1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h1, rate=1 - keep_prob, seed=self.seed2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.classifier_num_hidden_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h1, W2) + b2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_102": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(1 + tf.abs(c)) * pred_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=self.seed4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_110": {
                "variable": {
                    "value": "pred_protected_attribute_label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_protected_attribute_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.concat([s, s * true_labels, s * (1.0 - true_labels)], axis=1), W2) + b2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.features_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.features_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "self.protected_attributes_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "self.true_labels_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_142": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "variable": {
                    "value": "pred_labels_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=self.true_labels_ph, logits=pred_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_157": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_159": {
                "variable": {
                    "value": "classifier_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.train.exponential_decay(starter_learning_rate, global_step, 1000, 0.96, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "classifier_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "adversary_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_151": {
                "variable": {
                    "value": "pred_protected_attributes_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=self.protected_attributes_ph, logits=pred_protected_attributes_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_161": {
                "variable": {
                    "value": "adversary_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.train.exponential_decay(starter_learning_rate, global_step, 1000, 0.96, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "shape": {
                    "value": "[self.classifier_num_hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(features, W1) + b1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h1, rate=1 - keep_prob, seed=self.seed2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('W2', [self.classifier_num_hidden_units, 1], initializer=tf.contrib.layers.xavier_initializer(seed=self.seed3))",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable('W2', [3, 1], initializer=tf.contrib.layers.xavier_initializer(seed=self.seed4))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "a": {
                    "value": "tf.concat([s, s * true_labels, s * (1.0 - true_labels)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('W2', [self.classifier_num_hidden_units, 1], initializer=tf.contrib.layers.xavier_initializer(seed=self.seed3))",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable('W2', [3, 1], initializer=tf.contrib.layers.xavier_initializer(seed=self.seed4))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_146": {
                "labels": {
                    "value": "self.true_labels_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_86": {
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('W1', [features_dim, self.classifier_num_hidden_units], initializer=tf.contrib.layers.xavier_initializer(seed=self.seed1))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_102": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_109": {
                "values": {
                    "value": "[s, s * true_labels, s * (1.0 - true_labels)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_152": {
                "labels": {
                    "value": "self.protected_attributes_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_protected_attributes_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_182": {
                "control_inputs": {
                    "value": "[classifier_minimizer]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_103": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('c', initializer=tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_169": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_175": {
                "input_tensor": {
                    "value": "grad * unit_adversary_grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}