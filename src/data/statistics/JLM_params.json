{
    "train/comp.py": {
        "sklearn": {
            "KMeans_40": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** bit",
                            "BinOp"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/model.py": {
        "tensorflow": {
            "constant_86": {
                "variable": {
                    "value": "self.D_softmax_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "D_softmax_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(self.vocab), self.config.embed_size))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "self.input_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.config.num_steps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "self.labels_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.config.num_steps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "self.dropout_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.config.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "self.initial_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.config.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "self.v_table_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "LM",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self.vocab), self.config.embed_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_117": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('LM', [len(self.vocab), self.config.embed_size])",
                            "Call"
                        ],
                        [
                            "self.v_table_embedding",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(embedding, self.D_softmax_mask)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('LM')",
                            "Call"
                        ],
                        [
                            "self.v_table_embedding",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(embedding, self.D_softmax_mask)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "variable": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "self.initial_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_193": {
                "variable": {
                    "value": "proj_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(outputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_all_260": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_266": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_35": {
                "logits": {
                    "value": "tf.cast(o, 'float64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'LM{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[e - s, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "InputDropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "LSTM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_137": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "HMi",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "Hf",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "HMf",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_139": {
                "variable": {
                    "value": "Ho",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "HMo",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "Hg",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "HMg",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "Ii",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "IMi",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.embed_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_143": {
                "variable": {
                    "value": "If",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "IMf",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.embed_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "Io",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "IMo",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.embed_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "Ig",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "IMg",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.embed_size, self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bi",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "bf",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bf",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_149": {
                "variable": {
                    "value": "bo",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bo",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "bg",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bg",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_152": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(state, Hi) + tf.matmul(current_input, Ii) + bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(state, Hf) + tf.matmul(current_input, If) + bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(state, Ho) + tf.matmul(current_input, Io) + bo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_155": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(state, Hg) + tf.matmul(current_input, Ig) + bg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_158": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.tanh(cell)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(state, Ho) + tf.matmul(current_input, Io) + bo)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "RNNDropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_179": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "LM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_184": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('LM', [len(self.vocab), self.config.embed_size])",
                            "Call"
                        ],
                        [
                            "self.v_table_embedding",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(embedding, self.D_softmax_mask)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('LM')",
                            "Call"
                        ],
                        [
                            "self.v_table_embedding",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(embedding, self.D_softmax_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.D_softmax_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "Projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_188": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "PM",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size, self.config.embed_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('PM', [self.config.hidden_size, self.config.embed_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_191": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "UM",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_197": {
                "variable": {
                    "value": "c_M",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CM",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.hidden_size, self.config.class_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "c_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.class_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_206": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "sub_class_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(sub_class_outputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.config.class_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_224": {
                "variable": {
                    "value": "softmax_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.reshape(self.labels_placeholder, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(outputs, 1), [-1, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_230": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.log(tf.reduce_sum(tf.exp(output), 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "AdamOptimizer_246": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_248": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_253": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_254": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.calculate_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_255": {
                "name": {
                    "value": "pp",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.exp(self.calculate_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_35": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(state, Ho) + tf.matmul(current_input, Io) + bo)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'VT{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, self.config.embed_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_115": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('LM', [len(self.vocab), self.config.embed_size])",
                            "Call"
                        ],
                        [
                            "self.v_table_embedding",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(embedding, self.D_softmax_mask)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('LM')",
                            "Call"
                        ],
                        [
                            "self.v_table_embedding",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(embedding, self.D_softmax_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.D_softmax_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_123": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_168": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_211": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.matmul(o, U) + proj_b for o in rnn_outputs]",
                            "ListComp"
                        ],
                        [
                            "projection_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_215": {
                "labels": {
                    "value": "tf.reshape(self.labels_placeholder // self.config.class_size, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(outputs, 1), [-1, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_221": {
                "labels": {
                    "value": "tf.reshape(self.labels_placeholder, [-1]) % self.config.class_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "logits": {
                    "value": "sub_class_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(sub_class_outputs, 1), [-1, self.config.class_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_236": {
                "variable": {
                    "value": "sub_class_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.log(tf.reduce_sum(tf.exp(sub_class_output), 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_255": {
                "x": {
                    "value": "self.calculate_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_257": {
                "name": {
                    "value": "variance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_118": {
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_embedding()",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embedding, self.input_placeholder)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(x, [1]) for x in tf.split(inputs, self.config.num_steps, 1)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.dropout(x, self.dropout_placeholder) for x in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.config.num_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_157": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(state, Hg) + tf.matmul(current_input, Ig) + bg)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(state, Hi) + tf.matmul(current_input, Ii) + bi)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_158": {
                "x": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.initial_cell",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(cell, f) + tf.multiply(g, i)",
                            "BinOp"
                        ],
                        [
                            "np.zeros((self.config.batch_size, self.config.hidden_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_189": {
                "a": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('LM', [len(self.vocab), self.config.embed_size])",
                            "Call"
                        ],
                        [
                            "self.v_table_embedding",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(embedding, self.D_softmax_mask)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('LM')",
                            "Call"
                        ],
                        [
                            "self.v_table_embedding",
                            "Attribute"
                        ],
                        [
                            "tf.multiply(embedding, self.D_softmax_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_201": {
                "a": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(state, Ho) + tf.matmul(current_input, Io) + bo)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(P, tf.transpose(embedding))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('UM', [self.config.hidden_size, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_216": {
                "tensor": {
                    "value": "self.labels_placeholder // self.config.class_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_220": {
                "values": {
                    "value": "sub_class_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[tf.matmul(o, c_M) + c_b for o in rnn_outputs]",
                            "ListComp"
                        ],
                        [
                            "projection_outputs[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "tensor": {
                    "value": "self.labels_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_230": {
                "x": {
                    "value": "tf.log(tf.reduce_sum(tf.exp(output), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_259": {
                "name": {
                    "value": "sub_class_variance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.sub_class_variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('LM{}'.format(i), [e - s, size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('VT{}'.format(i), [size, self.config.embed_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_199": {
                "a": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.matmul(state, Ho) + tf.matmul(current_input, Io) + bo)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "c_M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('CM', [self.config.hidden_size, self.config.class_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_222": {
                "tensor": {
                    "value": "self.labels_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_230": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(output), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_236": {
                "x": {
                    "value": "tf.log(tf.reduce_sum(tf.exp(sub_class_output), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_152": {
                "a": {
                    "value": "current_input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Ii",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('IMi', [self.config.embed_size, self.config.hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_153": {
                "a": {
                    "value": "current_input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "If",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('IMf', [self.config.embed_size, self.config.hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_154": {
                "a": {
                    "value": "current_input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Io",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('IMo', [self.config.embed_size, self.config.hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_155": {
                "a": {
                    "value": "current_input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Ig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('IMg', [self.config.embed_size, self.config.hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_230": {
                "input_tensor": {
                    "value": "tf.exp(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_236": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(sub_class_output), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_230": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(outputs, 1), [-1, self.num_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_236": {
                "input_tensor": {
                    "value": "tf.exp(sub_class_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_236": {
                "x": {
                    "value": "sub_class_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(sub_class_outputs, 1), [-1, self.config.class_size])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/test.py": {
        "tensorflow": {
            "global_variables_initializer_41": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_42": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/train.py": {
        "tensorflow": {
            "global_variables_initializer_65": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_66": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_68": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_61": {
                "seed": {
                    "value": "config.tf_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_77": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(experiment_path, str(_run._id), 'tf_board_train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_78": {
                "variable": {
                    "value": "writer_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(experiment_path, str(_run._id), 'tf_board_dev')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_71": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/weights.py": {
        "tensorflow": {
            "global_variables_initializer_23": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_24": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}