{
    "core/nn/freezer.py": {
        "torch": {}
    },
    "core/nn/functional.py": {
        "torch": {
            "sum_58": {
                "variable": {
                    "value": "square_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "baddbmm_60": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "square_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(feature ** 2, 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "square_sum.transpose(1, 2) + square_sum",
                            "BinOp"
                        ],
                        [
                            "square_sum1.transpose(1, 2) + square_sum2",
                            "BinOp"
                        ],
                        [
                            "square_sum1 + square_sum2.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "batch1": {
                    "value": "feature.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch2": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "square_sum1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "square_sum2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "baddbmm_81": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "square_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(feature ** 2, 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "square_sum.transpose(1, 2) + square_sum",
                            "BinOp"
                        ],
                        [
                            "square_sum1.transpose(1, 2) + square_sum2",
                            "BinOp"
                        ],
                        [
                            "square_sum1 + square_sum2.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "batch1": {
                    "value": "feature1.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch2": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "square_sum1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "square_sum2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "addmm_102": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "square_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(feature ** 2, 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "square_sum.transpose(1, 2) + square_sum",
                            "BinOp"
                        ],
                        [
                            "square_sum1.transpose(1, 2) + square_sum2",
                            "BinOp"
                        ],
                        [
                            "square_sum1 + square_sum2.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "mat1": {
                    "value": "feature1",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature2.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_141": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, input.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_141": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_143": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, input.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_29": {
                "variable": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, input.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_276": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, input.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.view(views).expand(expand_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_142": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, input.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_237": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_237": {
                "input": {
                    "value": "torch.sum(weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "core/nn/init.py": {
        "torch": {}
    },
    "core/nn/modules/conv.py": {
        "torch": {
            "Conv1d_24": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "core/nn/modules/linear.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "core/nn/modules/mlp.py": {
        "torch": {
            "dropout_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_prob, training=True)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_prob, training=True)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=self.dropout_prob, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_prob, training=True)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_prob, training=True)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=self.dropout_prob, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout2d_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_prob, training=True)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_prob, training=True)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, p=self.dropout_prob, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "core/solver/build.py": {
        "torch": {}
    },
    "core/solver/lr_scheduler.py": {
        "torch": {}
    },
    "core/unittest/test_functional.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(batch_size, channels, num_inst)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "feature1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(batch_size, channels, num_inst1)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_inst1, channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "feature2_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(batch_size, channels, num_inst2)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_inst2, channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "feature1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(batch_size, channels, num_inst1)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_inst1, channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "feature2_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(batch_size, channels, num_inst2)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_inst2, channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, [num_samples])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "logit_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(num_samples, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/unittest/test_multiprocess.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomDataset()",
                            "Call"
                        ],
                        [
                            "H5Dataset(filename, size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomDataset()",
                            "Call"
                        ],
                        [
                            "H5Dataset(filename, size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomDataset()",
                            "Call"
                        ],
                        [
                            "H5Dataset(filename, size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "core/unittest/test_solver.py": {
        "torch": {
            "SGD_10": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[torch.nn.Parameter()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_21": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[torch.nn.Parameter()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_22": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD([torch.nn.Parameter()], lr=1.0)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD([torch.nn.Parameter()], lr=1.0)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/utils/checkpoint.py": {
        "torch": {
            "save_42": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_96": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_96": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "core/utils/metric_logger.py": {
        "torch": {}
    },
    "core/utils/torch_util.py": {
        "torch": {
            "manual_seed_60": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/data/build.py": {
        "torch": {
            "mean_95": {
                "variable": {
                    "value": "centroid_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbour_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_F.group_points(xyz, neighbour_index)",
                            "Call"
                        ],
                        [
                            "_F.group_points(xyz, neighbour_index)",
                            "Call"
                        ],
                        [
                            "neighbour_xyz + shift",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clone_95": {
                "variable": {
                    "value": "centroid_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_ins_seg_3d_dataset(cfg, mode)",
                            "Call"
                        ],
                        [
                            "PartNetInsSeg(root_dir=cfg.DATASET.ROOT_DIR, transform=transform, **kwargs_dict)",
                            "Call"
                        ],
                        [
                            "PartNetRegionInsSeg(root_dir=cfg.DATASET.ROOT_DIR, transform=transform, **kwargs_dict)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.BATCH_SIZE if is_train else cfg.TEST.BATCH_SIZE",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "cfg.DATALOADER.DROP_LAST",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(collate, num_centroids=kwargs_dict.num_centroids, radius=kwargs_dict.radius, num_neighbours=kwargs_dict.num_neighbours, with_renorm=kwargs_dict.with_renorm, with_resample=kwargs_dict.with_resample if is_train else False, with_shift=kwargs_dict.with_shift if is_train else False, sample_method=kwargs_dict.get('sample_method', 'FPS'))",
                            "Call"
                        ],
                        [
                            "default_collate",
                            "variable"
                        ]
                    ]
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_ins_seg_3d_dataset(cfg, mode)",
                            "Call"
                        ],
                        [
                            "PartNetInsSeg(root_dir=cfg.DATASET.ROOT_DIR, transform=transform, **kwargs_dict)",
                            "Call"
                        ],
                        [
                            "PartNetRegionInsSeg(root_dir=cfg.DATASET.ROOT_DIR, transform=transform, **kwargs_dict)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.BATCH_SIZE if is_train else cfg.TEST.BATCH_SIZE",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(collate, num_centroids=kwargs_dict.num_centroids, radius=kwargs_dict.radius, num_neighbours=kwargs_dict.num_neighbours, with_renorm=kwargs_dict.with_renorm, with_resample=kwargs_dict.with_resample if is_train else False, with_shift=kwargs_dict.with_shift if is_train else False, sample_method=kwargs_dict.get('sample_method', 'FPS'))",
                            "Call"
                        ],
                        [
                            "default_collate",
                            "variable"
                        ]
                    ]
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_29": {
                "variable": {
                    "value": "centroid_index",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, num_centroids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "ins_id.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_like_85": {
                "variable": {
                    "value": "neighbour_centroid_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(low=0, high=length, size=(batch_size, num_centroids), device=ins_id.device)",
                            "Call"
                        ],
                        [
                            "torch.randint(low=0, high=length, size=(batch_size, num_centroids), device=ins_id.device)",
                            "Call"
                        ],
                        [
                            "centroid_index.gather(1, select_centroid_index)",
                            "Call"
                        ],
                        [
                            "_F.farthest_point_sample(xyz, num_centroids)",
                            "Call"
                        ]
                    ]
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_neighbours",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_31": {
                "variable": {
                    "value": "linspace",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "int(1 / radius)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "ins_id.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "pseudo_centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(linspace, linspace, linspace)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_39": {
                "variable": {
                    "value": "centroid_index",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, num_centroids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "ins_id.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "ins_label_purity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(neighbour_label_purity == centroid_label.expand_as(neighbour_label_purity)).long()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_32": {
                "*tensors": {
                    "value": "linspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1, 1, steps=int(1 / radius), device=ins_id.device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "linspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1, 1, steps=int(1 / radius), device=ins_id.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "partnet/data/partnet.py": {
        "torch": {
            "cat_245": {
                "variable": {
                    "value": "gt_all_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_other_mask.unsqueeze(1), gt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_259": {
                "variable": {
                    "value": "centroid_index",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, self.num_centroids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "neighbour_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neighbour_index_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "randint_like_284": {
                "variable": {
                    "value": "neighbour_centroid_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(low=0, high=length, size=(batch_size, self.num_centroids))",
                            "Call"
                        ]
                    ]
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_370": {
                "variable": {
                    "value": "self.cache[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_240": {
                "tensors": {
                    "value": "seg_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_341": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f['pts'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_345": {
                "variable": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f['gt_mask'][:].astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_347": {
                "variable": {
                    "value": "gt_other_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f['gt_other_mask'][:].astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/backbones/pn2_ssg.py": {
        "torch": {
            "ModuleList_70": {
                "variable": {
                    "value": "self.sa_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.fp_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/backbones/pn2_ssg_part_seg.py": {
        "torch": {
            "ModuleList_70": {
                "variable": {
                    "value": "self.sa_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.fp_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/backbones/pn_backbone1.py": {
        "torch": {
            "randn_228": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_49": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.classifier2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_165": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_206": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['cls_logit']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['cls_label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_214": {
                "variable": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_215": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "trans_norm.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "trans_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "trans_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_216": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_feature.transpose(2, 1), trans_feature)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "I.unsqueeze(0).expand_as(trans_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/backbones/pn_backbone_2th.py": {
        "torch": {
            "randn_228": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_49": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.classifier2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_165": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_206": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['cls_logit']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['cls_label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_214": {
                "variable": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_215": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "trans_norm.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "trans_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "trans_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_216": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_feature.transpose(2, 1), trans_feature)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "I.unsqueeze(0).expand_as(trans_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/backbones/pn_backbone_shallow.py": {
        "torch": {
            "randn_228": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_49": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.classifier2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_165": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_206": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['cls_logit']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['cls_label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_214": {
                "variable": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_215": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "trans_norm.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "trans_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "trans_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_216": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_feature.transpose(2, 1), trans_feature)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "I.unsqueeze(0).expand_as(trans_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/backbones/pointnet.py": {
        "torch": {
            "max_140": {
                "variable": {
                    "value": "(global_feature, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "stem_feature",
                            "variable"
                        ],
                        [
                            "mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(seg_features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_seg(x)",
                            "Call"
                        ],
                        [
                            "self.conv_seg(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_features + local_features + [global_feature_expand]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "stem_feature",
                            "variable"
                        ],
                        [
                            "mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(seg_features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_seg(x)",
                            "Call"
                        ],
                        [
                            "self.conv_seg(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "stem_feature",
                            "variable"
                        ],
                        [
                            "mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(seg_features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_seg(x)",
                            "Call"
                        ],
                        [
                            "self.conv_seg(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "partnet/models/classifiers/region_classifier.py": {
        "torch": {
            "max_46": {
                "variable": {
                    "value": "(_, node_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "node_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['node_logit']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_48": {
                "variable": {
                    "value": "node_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(node_pred.float() == data_batch['valid_center_mask'].view(-1).float()).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_49": {
                "variable": {
                    "value": "node_pos_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(node_acc_arr, dim=0, index=(data_batch['valid_center_mask'].view(-1) == 1).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_53": {
                "variable": {
                    "value": "node_neg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(node_acc_arr, dim=0, index=(data_batch['valid_center_mask'].view(-1) == 0).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_49": {
                "input": {
                    "value": "node_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(node_pred.float() == data_batch['valid_center_mask'].view(-1).float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(data_batch['valid_center_mask'].view(-1) == 1).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "data_batch['valid_center_mask'] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "torch.sum(data_batch['valid_center_mask'], 1).float() / num_centroids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_53": {
                "input": {
                    "value": "node_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(node_pred.float() == data_batch['valid_center_mask'].view(-1).float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(data_batch['valid_center_mask'].view(-1) == 0).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "data_batch['valid_center_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/heads/concat_head.py": {
        "torch": {
            "cat_22": {
                "variable": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(concat_feats, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/heads/concat_head_sharemlp.py": {
        "torch": {
            "cat_20": {
                "variable": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(concat_feats, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/loss.py": {
        "torch": {}
    },
    "partnet/models/metric.py": {
        "torch": {
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bincount_123": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n * ins_label + pred_label",
                            "BinOp"
                        ]
                    ]
                },
                "minlength": {
                    "value": "n ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "diag_134": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mat.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_135": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mat.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_136": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mat.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "partnet/models/pn2.py": {
        "torch": {
            "randn_289": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "self.p1(x)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x)",
                            "Call"
                        ],
                        [
                            "self.p2(x)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x)",
                            "Call"
                        ],
                        [
                            "self.p3(x)",
                            "Call"
                        ],
                        [
                            "self.classifier3(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global22(x)",
                            "Call"
                        ],
                        [
                            "self.classifier22(x)",
                            "Call"
                        ],
                        [
                            "self.p4(x)",
                            "Call"
                        ],
                        [
                            "self.classifier4(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global8(x)",
                            "Call"
                        ],
                        [
                            "self.classifier8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local9(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global9(x)",
                            "Call"
                        ],
                        [
                            "self.classifier9(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_51": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.classifier1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.classifier2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.classifier3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(global_channels[-1] / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(global_channels[-1] / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.classifier22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(global_channels[-1] / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.classifier4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.classifier8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.classifier9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_190": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_267": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['cls_logit']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['cls_label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "self.p1(x)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x)",
                            "Call"
                        ],
                        [
                            "self.p2(x)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x)",
                            "Call"
                        ],
                        [
                            "self.p3(x)",
                            "Call"
                        ],
                        [
                            "self.classifier3(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global22(x)",
                            "Call"
                        ],
                        [
                            "self.classifier22(x)",
                            "Call"
                        ],
                        [
                            "self.p4(x)",
                            "Call"
                        ],
                        [
                            "self.classifier4(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global8(x)",
                            "Call"
                        ],
                        [
                            "self.classifier8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local9(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global9(x)",
                            "Call"
                        ],
                        [
                            "self.classifier9(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "self.p1(x)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x)",
                            "Call"
                        ],
                        [
                            "self.p2(x)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x)",
                            "Call"
                        ],
                        [
                            "self.p3(x)",
                            "Call"
                        ],
                        [
                            "self.classifier3(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global22(x)",
                            "Call"
                        ],
                        [
                            "self.classifier22(x)",
                            "Call"
                        ],
                        [
                            "self.p4(x)",
                            "Call"
                        ],
                        [
                            "self.classifier4(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global8(x)",
                            "Call"
                        ],
                        [
                            "self.classifier8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local9(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global9(x)",
                            "Call"
                        ],
                        [
                            "self.classifier9(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_126": {
                "input": {
                    "value": "input * self.k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_275": {
                "variable": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_276": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "trans_norm.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "trans_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "trans_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_277": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_feature.transpose(2, 1), trans_feature)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "I.unsqueeze(0).expand_as(trans_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_214": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "self.p1(x)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x)",
                            "Call"
                        ],
                        [
                            "self.p2(x)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x)",
                            "Call"
                        ],
                        [
                            "self.p3(x)",
                            "Call"
                        ],
                        [
                            "self.classifier3(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global22(x)",
                            "Call"
                        ],
                        [
                            "self.classifier22(x)",
                            "Call"
                        ],
                        [
                            "self.p4(x)",
                            "Call"
                        ],
                        [
                            "self.classifier4(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global8(x)",
                            "Call"
                        ],
                        [
                            "self.classifier8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local9(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global9(x)",
                            "Call"
                        ],
                        [
                            "self.classifier9(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_221": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "self.p1(x)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x)",
                            "Call"
                        ],
                        [
                            "self.p2(x)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x)",
                            "Call"
                        ],
                        [
                            "self.p3(x)",
                            "Call"
                        ],
                        [
                            "self.classifier3(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global22(x)",
                            "Call"
                        ],
                        [
                            "self.classifier22(x)",
                            "Call"
                        ],
                        [
                            "self.p4(x)",
                            "Call"
                        ],
                        [
                            "self.classifier4(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global8(x)",
                            "Call"
                        ],
                        [
                            "self.classifier8(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local9(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global9(x)",
                            "Call"
                        ],
                        [
                            "self.classifier9(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "partnet/models/pn2_ssg.py": {
        "torch": {
            "ModuleList_70": {
                "variable": {
                    "value": "self.sa_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.fp_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "partnet/models/pn2_ssg_cls.py": {
        "torch": {
            "randn_120": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.sa_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_93": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.narrow(1, 3, points.size(1) - 3)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "partnet/models/sampler.py": {
        "torch": {
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "partnet/test.py": {
        "torch": {
            "zeros_86": {
                "variable": {
                    "value": "parts_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3, sample_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "parts_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_113": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_114": {
                "variable": {
                    "value": "model_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PointNetCls(in_channels=3, out_channels=128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_148": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_89": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "index[i].unsqueeze(0).byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "parts_mean[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(pc.squeeze(), mask=index[i].unsqueeze(0).byte()).reshape(3, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_106": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_194": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds['ins_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, num_points)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, 200)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "purity_pred_float",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_225": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_227": {
                "variable": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.reshape(batch_size, num_centroids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_228": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.reshape(batch_size, num_centroids), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.array(0)).cuda().unsqueeze(0), cumsum_box_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_463": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - cur_mask_pool.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_466": {
                "variable": {
                    "value": "final_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_468": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "final_idx.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_470": {
                "variable": {
                    "value": "pred_ins_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['points'].shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_481": {
                "variable": {
                    "value": "cur_mask_pool_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, num_points]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pred, p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "purity_pred_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pred_float, logits_purity.squeeze()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_count_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_201": {
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_221": {
                "input": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0]).type(torch.LongTensor).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_pred, p])",
                            "Call"
                        ],
                        [
                            "purity_pred_float > p_thresh",
                            "Compare"
                        ],
                        [
                            "purity_pred_float > p_thresh",
                            "Compare"
                        ]
                    ]
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_255": {
                "variable": {
                    "value": "zero_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_257": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_259": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "score_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "purity_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_464": {
                "n": {
                    "value": "t1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_473": {
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_474": {
                "input": {
                    "value": "1 - valid_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_484": {
                "variable": {
                    "value": "cur_mask_pool_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_mask_pool_new, (pred_ins_label == k + 1).float().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_97": {
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "part_pc.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "np.array(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_229": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_264": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[k * bsp:(k + 1) * bsp]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.arange(pair_idx.shape[0]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_265": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_266": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_267": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pool, logits_purity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_pool, policy_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_308": {
                "variable": {
                    "value": "(highest_score, rank_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_matrix[pair_idx[:, 0], pair_idx[:, 1]]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_312": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:bs]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "rank_idx",
                            "variable"
                        ]
                    ]
                }
            },
            "index_select_320": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_321": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_322": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_329": {
                "variable": {
                    "value": "part_mask11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_330": {
                "variable": {
                    "value": "part_mask22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_331": {
                "variable": {
                    "value": "context_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inter_matrix_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ],
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_332": {
                "variable": {
                    "value": "context_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inter_matrix_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ],
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_355": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1), torch.cat([context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])], dim=-1)], dim=1), 'head2')",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_369": {
                "variable": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_370": {
                "variable": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_371": {
                "variable": {
                    "value": "merge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([merge_idx1, merge_idx2], dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_372": {
                "variable": {
                    "value": "nonmerge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_373": {
                "variable": {
                    "value": "nonmerge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_374": {
                "variable": {
                    "value": "part_mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 0], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_375": {
                "variable": {
                    "value": "part_mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 1], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_426": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_mask_pool, new_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "subpart_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subpart_mask_pool, new_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_428": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_xyz_pool, new_part_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "subpart_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subpart_pool, new_part_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_431": {
                "variable": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_434": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_435": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_436": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_439": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size, cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_443": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_444": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_450": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_451": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_452": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_453": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_454": {
                "variable": {
                    "value": "score_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "purity_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_483": {
                "input": {
                    "value": "pred_ins_label == k + 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "eye_253": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_268": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_268": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_323": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_324": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_324": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_325": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_325": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_357": {
                "input": {
                    "value": "siamese_label == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_358": {
                "input": {
                    "value": "siamese_label == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_382": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "merge_idx1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_386": {
                "variable": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (1 - part_mask11) * (1 - part_mask22)",
                            "BinOp"
                        ],
                        [
                            "1 - (1 - part_mask1) * (1 - part_mask2)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_mask, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "flag.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_276": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_276": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_277": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_277": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_371": {
                "tensors": {
                    "value": "[merge_idx1, merge_idx2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_378": {
                "input": {
                    "value": "1 - new_part_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_379": {
                "n": {
                    "value": "equal_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_396": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "overlap_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(torch.matmul(cur_mask_pool, new_part_mask.transpose(0, 1)) > minimum_overlap_pc_num).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "overlap_idx.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_398": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_412": {
                "variable": {
                    "value": "tmp_purity_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[purity_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_413": {
                "variable": {
                    "value": "tmp_policy_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[policy_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_416": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, tmp_purity_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, tmp_policy_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_418": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_419": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_423": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_447": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_240": {
                "input": {
                    "value": "cur_mask_pool.nonzero()[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_343": {
                "tensors": {
                    "value": "[logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_399": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_399": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_333": {
                "input": {
                    "value": "context_idx1.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_334": {
                "input": {
                    "value": "context_idx2.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_348": {
                "tensors": {
                    "value": "[logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_353": {
                "tensors": {
                    "value": "[context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_364": {
                "input": {
                    "value": "part_mask11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_365": {
                "input": {
                    "value": "part_mask22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_404": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_404": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_405": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_405": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_363": {
                "input": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (1 - part_mask11) * (1 - part_mask22)",
                            "BinOp"
                        ],
                        [
                            "1 - (1 - part_mask1) * (1 - part_mask2)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_mask, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_418": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_418": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_419": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_419": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_421": {
                "*size": {
                    "value": "purity_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_421": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_422": {
                "*size": {
                    "value": "policy_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_422": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_423": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_423": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_424": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_424": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_410": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_392": {
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/test_gentree.py": {
        "torch": {
            "zeros_81": {
                "variable": {
                    "value": "parts_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3, sample_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "parts_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_108": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "model_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PointNetCls(in_channels=3, out_channels=128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_145": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_84": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "index[i].unsqueeze(0).byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_88": {
                "variable": {
                    "value": "parts_mean[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(pc.squeeze(), mask=index[i].unsqueeze(0).byte()).reshape(3, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_101": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_169": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds['ins_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, num_points)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, 200)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_182": {
                "variable": {
                    "value": "(maximum_label_num, maximum_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask_tree.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask_tree).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_184": {
                "variable": {
                    "value": "total_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask_tree.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask_tree).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "purity_score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_249": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_250": {
                "variable": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_251": {
                "variable": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0]).type(torch.FloatTensor).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_pred, logits_purity.squeeze()])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_pred, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_253": {
                "variable": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.reshape(batch_size, num_centroids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_254": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.reshape(batch_size, num_centroids), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.array(0)).cuda().unsqueeze(0), cumsum_box_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_260": {
                "variable": {
                    "value": "valid_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['gt_valid']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_261": {
                "variable": {
                    "value": "cumsum_valid_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(gt_valid, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "cumsum_valid_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.array(0)).cuda().unsqueeze(0), cumsum_valid_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "parts_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 10000]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_513": {
                "variable": {
                    "value": "pred_ins_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['points'].shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_518": {
                "variable": {
                    "value": "rank_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(new_part_xyz, 'purity').squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_524": {
                "variable": {
                    "value": "tree_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_mask_pool, pred_ins_label.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "purity_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_score, logits_purity.squeeze()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pred, logits_purity.squeeze()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_220": {
                "variable": {
                    "value": "purity_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p.float() == cur_label.float()).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_221": {
                "variable": {
                    "value": "purity_pos_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(purity_acc_arr, dim=0, index=(cur_label == 1).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "tree_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 10000]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_count_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_176": {
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_224": {
                "variable": {
                    "value": "purity_neg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(purity_acc_arr, dim=0, index=(cur_label == 0).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_227": {
                "variable": {
                    "value": "purity_neg_valid_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(purity_acc_arr, dim=0, index=((cur_label == 0).long() * cur_valid.long()).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_231": {
                "variable": {
                    "value": "purity_nonvalid_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(purity_acc_arr, dim=0, index=(1 - cur_valid).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_235": {
                "variable": {
                    "value": "purity_valid_pos_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(purity_acc_arr, dim=0, index=((cur_label == 1).long() * cur_centroid_valid_mask).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_238": {
                "variable": {
                    "value": "purity_valid_neg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(purity_acc_arr, dim=0, index=((cur_label == 0).long() * cur_centroid_valid_mask).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_241": {
                "variable": {
                    "value": "purity_nonvalid_pos_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(purity_acc_arr, dim=0, index=((cur_label == 1).long() * (1 - cur_centroid_valid_mask)).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_244": {
                "variable": {
                    "value": "purity_nonvalid_neg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(purity_acc_arr, dim=0, index=((cur_label == 0).long() * (1 - cur_centroid_valid_mask)).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_293": {
                "variable": {
                    "value": "tree_num_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "tree_num - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_296": {
                "variable": {
                    "value": "purity_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_score, logits_purity.squeeze()])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_score, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "purity_matrix[sub_part_idx[:, 0], sub_part_idx[:, 1]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_311": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_314": {
                "variable": {
                    "value": "zero_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_320": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_523": {
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_92": {
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "part_pc.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_191": {
                "input": {
                    "value": "box_purity < 0.6",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "index_select_221": {
                "input": {
                    "value": "purity_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p.float() == cur_label.float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(cur_label == 1).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_223": {
                "input": {
                    "value": "cur_label == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_226": {
                "input": {
                    "value": "(cur_label == 0).long() * cur_valid.long()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_230": {
                "input": {
                    "value": "1 - cur_valid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_234": {
                "input": {
                    "value": "(cur_label == 1).long() * cur_centroid_valid_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_237": {
                "input": {
                    "value": "(cur_label == 0).long() * cur_centroid_valid_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_240": {
                "input": {
                    "value": "(cur_label == 1).long() * (1 - cur_centroid_valid_mask)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_243": {
                "input": {
                    "value": "(cur_label == 0).long() * (1 - cur_centroid_valid_mask)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_255": {
                "ndarray": {
                    "value": "np.array(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_255": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_262": {
                "ndarray": {
                    "value": "np.array(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_262": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_324": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[k * bsp:(k + 1) * bsp]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.arange(pair_idx.shape[0]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_325": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_326": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_327": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pool, logits_purity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_345": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_pool, policy_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_352": {
                "variable": {
                    "value": "(highest_score, rank_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_matrix[pair_idx[:, 0], pair_idx[:, 1]]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_355": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:bs]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "rank_idx",
                            "variable"
                        ]
                    ]
                }
            },
            "index_select_359": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_360": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_361": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_368": {
                "variable": {
                    "value": "part_label1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_369": {
                "variable": {
                    "value": "part_label2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_376": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_384": {
                "variable": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_385": {
                "variable": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_386": {
                "variable": {
                    "value": "merge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([merge_idx1, merge_idx2], dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_387": {
                "variable": {
                    "value": "nonmerge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_388": {
                "variable": {
                    "value": "nonmerge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_390": {
                "variable": {
                    "value": "part_mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 0], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_391": {
                "variable": {
                    "value": "part_mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 1], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_393": {
                "variable": {
                    "value": "new_part_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "part_label1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(centroid_label, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_394": {
                "variable": {
                    "value": "new_part_label_invalid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "siamese_label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(part_label1 == part_label2) * (1 - (part_label1 == -1)) * (1 - (part_label2 == -1))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_mask_pool, new_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "subpart_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subpart_mask_pool, new_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_450": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_xyz_pool, new_part_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "subpart_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subpart_pool, new_part_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_452": {
                "variable": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[centroid_label, new_part_label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_455": {
                "variable": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_458": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_459": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_460": {
                "variable": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_462": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_465": {
                "variable": {
                    "value": "part_num1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tree_num_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.range(0, tree_num - 0.5).type(torch.LongTensor).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([tree_num_arr, torch.Tensor([tree_num]).long().cuda()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(tree_num_arr, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_466": {
                "variable": {
                    "value": "part_num2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tree_num_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.range(0, tree_num - 0.5).type(torch.LongTensor).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([tree_num_arr, torch.Tensor([tree_num]).long().cuda()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(tree_num_arr, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_493": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_494": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_495": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_496": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_500": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size, cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_504": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_505": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_190": {
                "input": {
                    "value": "box_purity_valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (box_purity < 0.8) * (box_purity > 0.6)",
                            "BinOp"
                        ],
                        [
                            "box_purity_valid_mask * gtmin_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_193": {
                "input": {
                    "value": "1 - centroid_valid_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_224": {
                "input": {
                    "value": "purity_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p.float() == cur_label.float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(cur_label == 0).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_227": {
                "input": {
                    "value": "purity_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p.float() == cur_label.float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "((cur_label == 0).long() * cur_valid.long()).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_231": {
                "input": {
                    "value": "purity_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p.float() == cur_label.float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - cur_valid).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_235": {
                "input": {
                    "value": "purity_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p.float() == cur_label.float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "((cur_label == 1).long() * cur_centroid_valid_mask).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_238": {
                "input": {
                    "value": "purity_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p.float() == cur_label.float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "((cur_label == 0).long() * cur_centroid_valid_mask).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_241": {
                "input": {
                    "value": "purity_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p.float() == cur_label.float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "((cur_label == 1).long() * (1 - cur_centroid_valid_mask)).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_244": {
                "input": {
                    "value": "purity_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p.float() == cur_label.float()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "((cur_label == 0).long() * (1 - cur_centroid_valid_mask)).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_263": {
                "input": {
                    "value": "valid_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(gt_valid, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_312": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_328": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_328": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_362": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_362": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_363": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_363": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_364": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_364": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_379": {
                "input": {
                    "value": "siamese_label == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_380": {
                "input": {
                    "value": "siamese_label == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_402": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "merge_idx1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_406": {
                "variable": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (1 - part_mask1) * (1 - part_mask2)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_mask, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "flag.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_407": {
                "variable": {
                    "value": "new_part_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_part_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(part_label1, dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "new_part_label * new_part_label_invalid + -1 * (1 - new_part_label_invalid)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_label, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "flag.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_473": {
                "variable": {
                    "value": "tree_num_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_num_arr, torch.Tensor([tree_num]).long().cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_474": {
                "variable": {
                    "value": "tree_num_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tree_num_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.range(0, tree_num - 0.5).type(torch.LongTensor).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([tree_num_arr, torch.Tensor([tree_num]).long().cuda()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(tree_num_arr, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_480": {
                "variable": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_part_mask_tree.shape[0], 200)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_483": {
                "variable": {
                    "value": "(maximum_label_num, maximum_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask_tree.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask_tree).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_484": {
                "variable": {
                    "value": "total_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask_tree.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask_tree).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_336": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_336": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_337": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_337": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_375": {
                "tensors": {
                    "value": "[logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_386": {
                "tensors": {
                    "value": "[merge_idx1, merge_idx2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_398": {
                "input": {
                    "value": "1 - new_part_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_399": {
                "n": {
                    "value": "equal_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_418": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "overlap_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(torch.matmul(cur_mask_pool, new_part_mask.transpose(0, 1)) > minimum_overlap_pc_num).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "overlap_idx.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_420": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_434": {
                "variable": {
                    "value": "tmp_purity_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[purity_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "variable": {
                    "value": "tmp_policy_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[policy_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_438": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, tmp_purity_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_439": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, tmp_policy_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "tree_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_mask_pool, old_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "tree_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_mask_pool, new_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_508": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_284": {
                "input": {
                    "value": "cur_mask_pool.nonzero()[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_421": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_421": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_193": {
                "input": {
                    "value": "box_purity_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_purity > 0.8",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - centroid_valid_mask).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_342": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_426": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_426": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_427": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_427": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_440": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_440": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_441": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_441": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_443": {
                "*size": {
                    "value": "purity_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_443": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_444": {
                "*size": {
                    "value": "policy_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_444": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_445": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_445": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_446": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_432": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_414": {
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/test_remote.py": {
        "torch": {
            "zeros_86": {
                "variable": {
                    "value": "parts_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3, sample_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "parts_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_113": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_114": {
                "variable": {
                    "value": "model_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PointNetCls(in_channels=3, out_channels=128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_148": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_89": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "index[i].unsqueeze(0).byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "parts_mean[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(pc.squeeze(), mask=index[i].unsqueeze(0).byte()).reshape(3, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_106": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_194": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds['ins_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, num_points)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, 200)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "purity_pred_float",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_225": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_227": {
                "variable": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.reshape(batch_size, num_centroids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_228": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.reshape(batch_size, num_centroids), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.array(0)).cuda().unsqueeze(0), cumsum_box_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_511": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - cur_mask_pool.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_514": {
                "variable": {
                    "value": "final_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_516": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "final_idx.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_518": {
                "variable": {
                    "value": "pred_ins_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['points'].shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_529": {
                "variable": {
                    "value": "cur_mask_pool_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, num_points]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pred, p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "purity_pred_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pred_float, logits_purity.squeeze()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_count_566": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_201": {
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_221": {
                "input": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0]).type(torch.LongTensor).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_pred, p])",
                            "Call"
                        ],
                        [
                            "purity_pred_float > p_thresh",
                            "Compare"
                        ],
                        [
                            "purity_pred_float > p_thresh",
                            "Compare"
                        ]
                    ]
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_255": {
                "variable": {
                    "value": "zero_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_257": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_259": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "score_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "purity_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_512": {
                "n": {
                    "value": "t1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_521": {
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_522": {
                "input": {
                    "value": "1 - valid_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_532": {
                "variable": {
                    "value": "cur_mask_pool_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_mask_pool_new, (pred_ins_label == k + 1).float().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_97": {
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "part_pc.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "np.array(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_229": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_264": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[k * bsp:(k + 1) * bsp]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.arange(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.arange(pair_idx.shape[0]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_265": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_266": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_267": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pool, logits_purity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_pool, policy_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_350": {
                "variable": {
                    "value": "(highest_score, rank_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_matrix[pair_idx[:, 0], pair_idx[:, 1]]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_354": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:bs]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "rank_idx",
                            "variable"
                        ]
                    ]
                }
            },
            "index_select_362": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_363": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_364": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_371": {
                "variable": {
                    "value": "part_mask11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_372": {
                "variable": {
                    "value": "part_mask22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_373": {
                "variable": {
                    "value": "context_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inter_matrix_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ],
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_374": {
                "variable": {
                    "value": "context_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inter_matrix_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ],
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_397": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1), torch.cat([context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])], dim=-1)], dim=1), 'head2')",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_415": {
                "variable": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_416": {
                "variable": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_417": {
                "variable": {
                    "value": "merge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([merge_idx1, merge_idx2], dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_418": {
                "variable": {
                    "value": "nonmerge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_419": {
                "variable": {
                    "value": "nonmerge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_420": {
                "variable": {
                    "value": "part_mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 0], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_421": {
                "variable": {
                    "value": "part_mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 1], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_472": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_mask_pool, new_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_473": {
                "variable": {
                    "value": "subpart_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subpart_mask_pool, new_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_474": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_xyz_pool, new_part_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "subpart_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subpart_pool, new_part_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_477": {
                "variable": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_480": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_481": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_482": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_487": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size, cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_491": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_492": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_498": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_499": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_500": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_501": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_502": {
                "variable": {
                    "value": "score_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "purity_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_531": {
                "input": {
                    "value": "pred_ins_label == k + 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "eye_253": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_268": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_268": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_313": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_314": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_316": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_344": {
                "variable": {
                    "value": "score_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "purity_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_365": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_365": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_366": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_366": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_367": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_367": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_403": {
                "input": {
                    "value": "siamese_label == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_404": {
                "input": {
                    "value": "siamese_label == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_428": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "merge_idx1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_432": {
                "variable": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (1 - part_mask11) * (1 - part_mask22)",
                            "BinOp"
                        ],
                        [
                            "1 - (1 - part_mask1) * (1 - part_mask2)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_mask, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "flag.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_276": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_276": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_277": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_277": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_320": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[k * bsp:(k + 1) * bsp]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.arange(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.arange(pair_idx.shape[0]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_321": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_322": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_323": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pool, logits_purity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_pool, policy_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_417": {
                "tensors": {
                    "value": "[merge_idx1, merge_idx2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_424": {
                "input": {
                    "value": "1 - new_part_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_425": {
                "n": {
                    "value": "equal_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_442": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_xyz_pool / (cur_xyz_pool + 1e-06).norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "overlap_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(torch.matmul(cur_mask_pool, new_part_mask.transpose(0, 1)) > minimum_overlap_pc_num).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "overlap_idx.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_444": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_458": {
                "variable": {
                    "value": "tmp_purity_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[purity_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "variable": {
                    "value": "tmp_policy_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[policy_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, tmp_purity_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_463": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, tmp_policy_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_467": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_468": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_470": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_495": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_240": {
                "input": {
                    "value": "cur_mask_pool.nonzero()[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_307": {
                "*size": {
                    "value": "[cur_mask_pool.shape[0], cur_mask_pool.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_309": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_324": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_324": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_385": {
                "tensors": {
                    "value": "[logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_445": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_445": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_485": {
                "*size": {
                    "value": "[cur_mask_pool.shape[0], cur_mask_pool.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_332": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_332": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_333": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_333": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_375": {
                "input": {
                    "value": "context_idx1.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_376": {
                "input": {
                    "value": "context_idx2.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_390": {
                "tensors": {
                    "value": "[logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_395": {
                "tensors": {
                    "value": "[context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_410": {
                "input": {
                    "value": "part_mask11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_411": {
                "input": {
                    "value": "part_mask22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_450": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_450": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_451": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_451": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_409": {
                "input": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (1 - part_mask11) * (1 - part_mask22)",
                            "BinOp"
                        ],
                        [
                            "1 - (1 - part_mask1) * (1 - part_mask2)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_mask, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_464": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_464": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_465": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_465": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "purity_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_467": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_468": {
                "*size": {
                    "value": "policy_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_468": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_469": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_469": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_470": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_470": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_338": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_456": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_438": {
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=final_idx.nonzero().squeeze().cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/train_consumer.py": {
        "torch": {
            "zeros_88": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "purity_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "parts_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3, sample_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "parts_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Softmax_135": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_355": {
                "variable": {
                    "value": "model_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PointNetCls(in_channels=3, out_channels=128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_68": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "index[i].unsqueeze(0).byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_72": {
                "variable": {
                    "value": "parts_mean[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(pc.squeeze(), mask=index[i].unsqueeze(0).byte()).reshape(3, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_85": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_191": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "cur_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_pool1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "context_xyz_pool1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "purity_purity_pool.shape[0]",
                            "Subscript"
                        ],
                        [
                            "policy_xyz_pool1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "logits1_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_193": {
                "variable": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, 3, 1024]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['xyz_pool1']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_194": {
                "variable": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, 3, 1024]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['xyz_pool2']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_195": {
                "variable": {
                    "value": "sub_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['label_pool']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_196": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cur_train_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN_policy if cur_len > TRAIN_LEN_policy else cur_len",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randperm_236": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "cur_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_pool1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "context_xyz_pool1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "purity_purity_pool.shape[0]",
                            "Subscript"
                        ],
                        [
                            "policy_xyz_pool1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "logits1_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_238": {
                "variable": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_xyz_pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, 3, 1024]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['context_xyz_pool1']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_239": {
                "variable": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_xyz_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, 3, 1024]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['context_xyz_pool2']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_240": {
                "variable": {
                    "value": "sub_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_label_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['context_label_pool']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_241": {
                "variable": {
                    "value": "sub_context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, 3, 2048]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['context_context_xyz_pool']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_242": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cur_train_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN_policy if cur_len > TRAIN_LEN_policy else cur_len",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randperm_285": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "cur_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_pool1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "context_xyz_pool1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "purity_purity_pool.shape[0]",
                            "Subscript"
                        ],
                        [
                            "policy_xyz_pool1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_286": {
                "variable": {
                    "value": "sub_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_purity_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['purity_purity_pool']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_287": {
                "variable": {
                    "value": "sub_purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, 3, 1024]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['purity_xyz_pool']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_288": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cur_train_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN_policy if cur_len > TRAIN_LEN_policy else cur_len",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randperm_306": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "cur_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_pool1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "context_xyz_pool1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "purity_purity_pool.shape[0]",
                            "Subscript"
                        ],
                        [
                            "policy_xyz_pool1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "logits1_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_308": {
                "variable": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, policy_update_bs, 3, 1024]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['policy_xyz_pool1']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_309": {
                "variable": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, policy_update_bs, 3, 1024]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['policy_xyz_pool2']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_310": {
                "variable": {
                    "value": "sub_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_purity_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, policy_update_bs]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['policy_purity_pool']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_311": {
                "variable": {
                    "value": "sub_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_reward_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([0, policy_update_bs]).float()",
                            "Call"
                        ],
                        [
                            "rbuffer['policy_reward_pool']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:cur_train_len]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_312": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cur_train_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN if cur_len > TRAIN_LEN else cur_len",
                            "IfExp"
                        ],
                        [
                            "TRAIN_LEN_policy if cur_len > TRAIN_LEN_policy else cur_len",
                            "IfExp"
                        ]
                    ]
                }
            },
            "index_select_199": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(xyz_pool1, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(context_xyz_pool1, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_xyz_pool1, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs2:(i + 1) * bs2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_200": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(xyz_pool2, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(context_xyz_pool2, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_xyz_pool2, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs2:(i + 1) * bs2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_201": {
                "variable": {
                    "value": "siamese_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_label_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(context_label_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs2:(i + 1) * bs2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_212": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.detach().unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.detach().unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1), torch.cat([context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])], dim=-1)], dim=1), 'head2')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_213": {
                "variable": {
                    "value": "logits1_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits1_all, p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_245": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(xyz_pool1, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(context_xyz_pool1, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_xyz_pool1, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs2:(i + 1) * bs2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_246": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(xyz_pool2, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(context_xyz_pool2, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_xyz_pool2, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs2:(i + 1) * bs2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_247": {
                "variable": {
                    "value": "siamese_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_label_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(context_label_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs2:(i + 1) * bs2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_248": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_257": {
                "variable": {
                    "value": "context_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(context_context_xyz_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs2:(i + 1) * bs2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_260": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.detach().unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.detach().unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1), torch.cat([context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])], dim=-1)], dim=1), 'head2')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_261": {
                "variable": {
                    "value": "logits1_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits1_all, p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_291": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_purity_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(purity_xyz_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs2:(i + 1) * bs2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_293": {
                "variable": {
                    "value": "siamese_label_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_purity_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(purity_purity_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_purity_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs2:(i + 1) * bs2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_315": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(xyz_pool1, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(context_xyz_pool1, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_xyz_pool1, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs_policy:(i + 1) * bs_policy]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_316": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(xyz_pool2, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(context_xyz_pool2, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_xyz_pool2, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs_policy:(i + 1) * bs_policy]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_317": {
                "variable": {
                    "value": "purity_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_purity_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(purity_purity_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_purity_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs_policy:(i + 1) * bs_policy]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_318": {
                "variable": {
                    "value": "reward_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_reward_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(policy_reward_pool, dim=0, index=perm_idx[:cur_train_len])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[i * bs_policy:(i + 1) * bs_policy]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ],
                        [
                            "torch.randperm(cur_len)",
                            "Call"
                        ],
                        [
                            "torch.arange(cur_train_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_324": {
                "variable": {
                    "value": "loss_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(score_arr * reward_arr, dim=1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_159": {
                "variable": {
                    "value": "rbuffer",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir_merge, 'buffer', '%s.pt' % cur_buffer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_203": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_xyz.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(sub_purity_xyz_pool, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_203": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_204": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_xyz_pool1, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(sub_xyz_pool1, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(sub_xyz_pool1, dim=0, index=perm_idx[i * bs_policy:(i + 1) * bs_policy]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_204": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_205": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_xyz_pool2, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(sub_xyz_pool2, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(sub_xyz_pool2, dim=0, index=perm_idx[i * bs_policy:(i + 1) * bs_policy]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_205": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_217": {
                "variable": {
                    "value": "merge_pos_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(merge_acc_arr, dim=0, index=(siamese_label == 1).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_220": {
                "variable": {
                    "value": "merge_neg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(merge_acc_arr, dim=0, index=(siamese_label == 0).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_249": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_xyz.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(sub_purity_xyz_pool, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_249": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_250": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_xyz_pool1, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "part_xyz1 / part_xyz1.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(sub_xyz_pool1, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(sub_xyz_pool1, dim=0, index=perm_idx[i * bs_policy:(i + 1) * bs_policy]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_250": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_251": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_xyz_pool2, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "part_xyz2 / part_xyz2.norm(dim=1).max(dim=-1)[0].unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(sub_xyz_pool2, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(sub_xyz_pool2, dim=0, index=perm_idx[i * bs_policy:(i + 1) * bs_policy]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_251": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_265": {
                "variable": {
                    "value": "merge_pos_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(merge_acc_arr, dim=0, index=(siamese_label == 1).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_268": {
                "variable": {
                    "value": "merge_neg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(merge_acc_arr, dim=0, index=(siamese_label == 0).nonzero().squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__330": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "[logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_216": {
                "input": {
                    "value": "siamese_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_label_pool, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(sub_label_pool, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_219": {
                "input": {
                    "value": "1 - siamese_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_259": {
                "tensors": {
                    "value": "[context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_264": {
                "input": {
                    "value": "siamese_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_label_pool, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(sub_label_pool, dim=0, index=perm_idx[i * bs2:(i + 1) * bs2]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_267": {
                "input": {
                    "value": "1 - siamese_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_76": {
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "part_pc.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_215": {
                "input": {
                    "value": "merge_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ],
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_217": {
                "input": {
                    "value": "merge_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ],
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(siamese_label == 1).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_220": {
                "input": {
                    "value": "merge_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ],
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(siamese_label == 0).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_263": {
                "input": {
                    "value": "merge_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ],
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_265": {
                "input": {
                    "value": "merge_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ],
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(siamese_label == 1).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_268": {
                "input": {
                    "value": "merge_acc_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ],
                        [
                            "(p == siamese_label.long()).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(siamese_label == 0).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_324": {
                "input": {
                    "value": "score_arr * reward_arr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_321": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/train_ins_seg.py": {
        "torch": {
            "DataParallel_167": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__87": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "partnet/train_producer.py": {
        "torch": {
            "zeros_88": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "purity_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "parts_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3, sample_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "parts_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Softmax_141": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_634": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_636": {
                "variable": {
                    "value": "model_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PointNetCls(in_channels=3, out_channels=128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_68": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "index[i].unsqueeze(0).byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_72": {
                "variable": {
                    "value": "parts_mean[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(pc.squeeze(), mask=index[i].unsqueeze(0).byte()).reshape(3, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_85": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "sub_context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "sub_context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "sub_context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "sub_context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "sub_context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "sub_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "sub_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "sub_purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "variable": {
                    "value": "sub_policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "sub_policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "sub_policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "sub_policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_210": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds['ins_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, num_points)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, 200)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_224": {
                "variable": {
                    "value": "(maximum_label_num, maximum_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_226": {
                "variable": {
                    "value": "total_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_239": {
                "variable": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_240": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_242": {
                "variable": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.reshape(batch_size, num_centroids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_243": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.reshape(batch_size, num_centroids), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.array(0)).cuda().unsqueeze(0), cumsum_box_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_541": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz_pool1, sub_xyz_pool1.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz_pool2, sub_xyz_pool2.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_543": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label_pool, sub_label_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_544": {
                "variable": {
                    "value": "context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_context_xyz_pool, sub_context_context_xyz_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_xyz_pool1, sub_context_xyz_pool1.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_546": {
                "variable": {
                    "value": "context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_xyz_pool2, sub_context_xyz_pool2.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_547": {
                "variable": {
                    "value": "context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_label_pool, sub_context_label_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_548": {
                "variable": {
                    "value": "context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_purity_pool, sub_context_purity_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_549": {
                "variable": {
                    "value": "purity_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_purity_pool, sub_purity_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_550": {
                "variable": {
                    "value": "purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_xyz_pool, sub_purity_xyz_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_551": {
                "variable": {
                    "value": "policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_purity_pool, sub_policy_purity_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_552": {
                "variable": {
                    "value": "policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_reward_pool, sub_policy_reward_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_553": {
                "variable": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_xyz_pool1, sub_policy_xyz_pool1.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_xyz_pool2, sub_policy_xyz_pool2.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_263": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_267": {
                "variable": {
                    "value": "zero_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_582": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_583": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_584": {
                "variable": {
                    "value": "context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_585": {
                "variable": {
                    "value": "context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_586": {
                "variable": {
                    "value": "context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_587": {
                "variable": {
                    "value": "context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_588": {
                "variable": {
                    "value": "context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_589": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_590": {
                "variable": {
                    "value": "purity_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_591": {
                "variable": {
                    "value": "purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_592": {
                "variable": {
                    "value": "policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_593": {
                "variable": {
                    "value": "policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_594": {
                "variable": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_595": {
                "variable": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_574": {
                "obj": {
                    "value": "rbuffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir_merge, 'buffer', '%d_%d.pt' % (cur_epoch, iteration))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_731": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_233": {
                "input": {
                    "value": "box_purity < 0.6",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_244": {
                "ndarray": {
                    "value": "np.array(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_244": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_265": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_369": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:bs]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "rank_idx",
                            "variable"
                        ],
                        [
                            "perm_idx[rank_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([perm_idx[:policy_total_bs - rnum], perm_idx_rnd[:rnum]], dim=0)",
                            "Call"
                        ],
                        [
                            "perm_idx.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "perm_idx[:policy_total_bs]",
                            "Subscript"
                        ],
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "perm_idx[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_370": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_371": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_372": {
                "variable": {
                    "value": "part_mask11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_373": {
                "variable": {
                    "value": "part_mask22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_374": {
                "variable": {
                    "value": "part_label1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_375": {
                "variable": {
                    "value": "part_label2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_377": {
                "variable": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_part_mask.shape[0], 200)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_380": {
                "variable": {
                    "value": "(maximum_label_num, maximum_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_381": {
                "variable": {
                    "value": "total_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "sub_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_purity_pool, box_purity.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "sub_purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_purity_xyz_pool, purity_xyz.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_394": {
                "variable": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_xyz_pool1, part_xyz1.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_xyz_pool2, part_xyz2.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "sub_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_label_pool, siamese_label_gt.clone().float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_444": {
                "variable": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_445": {
                "variable": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_446": {
                "variable": {
                    "value": "merge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([merge_idx1, merge_idx2], dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_447": {
                "variable": {
                    "value": "nonmerge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_448": {
                "variable": {
                    "value": "nonmerge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_449": {
                "variable": {
                    "value": "part_mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 0], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_450": {
                "variable": {
                    "value": "part_mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 1], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_452": {
                "variable": {
                    "value": "new_part_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "part_label1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(centroid_label, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_453": {
                "variable": {
                    "value": "new_part_label_invalid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "siamese_label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(part_label1 == part_label2) * (1 - (part_label1 == -1)) * (1 - (part_label2 == -1)) * (logits_purity > 0.8)",
                            "BinOp"
                        ],
                        [
                            "(part_label1 == part_label2) * (1 - (part_label1 == -1)) * (1 - (part_label2 == -1)) * (box_purity > 0.8)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_508": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_mask_pool, new_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_509": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_xyz_pool, new_part_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_510": {
                "variable": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[centroid_label, new_part_label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_512": {
                "variable": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_515": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_516": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_517": {
                "variable": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_518": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_521": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size, cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_525": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_526": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_76": {
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "part_pc.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_232": {
                "input": {
                    "value": "box_purity_valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (box_purity < 0.8) * (box_purity > 0.6)",
                            "BinOp"
                        ],
                        [
                            "box_purity_valid_mask * gtmin_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_235": {
                "input": {
                    "value": "1 - centroid_valid_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_280": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "variable": {
                    "value": "score_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "purity_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_315": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_317": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:int(BS)]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "rank_idx",
                            "variable"
                        ],
                        [
                            "perm_idx[rank_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([perm_idx[:policy_total_bs - rnum], perm_idx_rnd[:rnum]], dim=0)",
                            "Call"
                        ],
                        [
                            "perm_idx.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "perm_idx[:policy_total_bs]",
                            "Subscript"
                        ],
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "perm_idx[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_318": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_319": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_320": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "sub_policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_policy_purity_pool, logits_purity.detach().unsqueeze(0).clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "sub_policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_policy_xyz_pool1, part_xyz11.unsqueeze(0).clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "sub_policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_policy_xyz_pool2, part_xyz22.unsqueeze(0).clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_343": {
                "variable": {
                    "value": "part_label1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_344": {
                "variable": {
                    "value": "part_label2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_346": {
                "variable": {
                    "value": "sub_policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_policy_reward_pool, siamese_label_gt.unsqueeze(0).float().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_351": {
                "variable": {
                    "value": "(_, rank_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_matrix[pair_idx[:, 0], pair_idx[:, 1]]",
                            "Subscript"
                        ],
                        [
                            "softmax(logits_purity * policy_scores)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy_total_bs",
                            "variable"
                        ]
                    ]
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[perm_idx[:policy_total_bs - rnum], perm_idx_rnd[:rnum]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_359": {
                "variable": {
                    "value": "(_, rank_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_matrix[pair_idx[:, 0], pair_idx[:, 1]]",
                            "Subscript"
                        ],
                        [
                            "softmax(logits_purity * policy_scores)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_390": {
                "input": {
                    "value": "siamese_label_gt == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_391": {
                "input": {
                    "value": "siamese_label_gt == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_400": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_400": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_409": {
                "variable": {
                    "value": "context_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inter_matrix_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ],
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_410": {
                "variable": {
                    "value": "context_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inter_matrix_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ],
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_417": {
                "variable": {
                    "value": "sub_context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_context_xyz_pool, context_xyz.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_418": {
                "variable": {
                    "value": "sub_context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_xyz_pool1, part_xyz1.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_419": {
                "variable": {
                    "value": "sub_context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_xyz_pool2, part_xyz2.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_420": {
                "variable": {
                    "value": "sub_context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_label_pool, siamese_label_gt.clone().float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "sub_context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_purity_pool, box_purity.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_462": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "equal_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_466": {
                "variable": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (1 - part_mask11) * (1 - part_mask22)",
                            "BinOp"
                        ],
                        [
                            "1 - (1 - part_mask1) * (1 - part_mask2)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_mask, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "flag.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_467": {
                "variable": {
                    "value": "new_part_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_part_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(part_label1, dim=0, index=siamese_label.nonzero().squeeze()).long()",
                            "Call"
                        ],
                        [
                            "new_part_label * new_part_label_invalid + -1 * (1 - new_part_label_invalid)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_label, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "flag.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_532": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_533": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_534": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_535": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_536": {
                "variable": {
                    "value": "score_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "purity_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_255": {
                "input": {
                    "value": "cur_mask_pool.nonzero()[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_284": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[k * bsp:(k + 1) * bsp]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.arange(pair_idx.shape[0]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_285": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_286": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_287": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pool, logits_purity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_pool, policy_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_321": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_321": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_xyz_pool1, sub_policy_xyz_pool1.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_xyz_pool2, sub_policy_xyz_pool2.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_339": {
                "variable": {
                    "value": "sub_policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_340": {
                "variable": {
                    "value": "sub_policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randperm_355": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_365": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_401": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_401": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_402": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_402": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_431": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1), torch.cat([context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])], dim=-1)], dim=1), 'head2')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_439": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1), torch.cat([context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])], dim=-1)], dim=1), 'head2')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_446": {
                "tensors": {
                    "value": "[merge_idx1, merge_idx2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_458": {
                "input": {
                    "value": "1 - new_part_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_459": {
                "n": {
                    "value": "equal_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_477": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "overlap_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(torch.matmul(cur_mask_pool, new_part_mask.transpose(0, 1)) > minimum_overlap_pc_num).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "overlap_idx.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_479": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_493": {
                "variable": {
                    "value": "tmp_purity_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[purity_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "variable": {
                    "value": "tmp_policy_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[policy_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_497": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, tmp_purity_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_498": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, tmp_policy_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_499": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_502": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_503": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_504": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_505": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_529": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_288": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_288": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_327": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_327": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_328": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_328": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_347": {
                "input": {
                    "value": "score * siamese_label_gt.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_480": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_480": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_memory_allocated_614": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_235": {
                "input": {
                    "value": "box_purity_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_purity > 0.8",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - centroid_valid_mask).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_296": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_296": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_297": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_297": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_430": {
                "tensors": {
                    "value": "[logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_438": {
                "tensors": {
                    "value": "[context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_485": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_485": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_486": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_486": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_333": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_411": {
                "input": {
                    "value": "context_idx1.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_412": {
                "input": {
                    "value": "context_idx2.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_499": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_499": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_500": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_500": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_502": {
                "*size": {
                    "value": "purity_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_502": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_503": {
                "*size": {
                    "value": "policy_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_503": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_504": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_504": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_505": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_505": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_491": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_473": {
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/train_producer_remote.py": {
        "torch": {
            "zeros_88": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "purity_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "parts_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3, sample_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "parts_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[parts_num, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Softmax_141": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_648": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_650": {
                "variable": {
                    "value": "model_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PointNetCls(in_channels=3, out_channels=128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_68": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "index[i].unsqueeze(0).byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_72": {
                "variable": {
                    "value": "parts_mean[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "part_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(pc.squeeze(), mask=index[i].unsqueeze(0).byte()).reshape(3, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_85": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "sub_context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "sub_context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "sub_context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "sub_context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "sub_context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "sub_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "sub_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "sub_purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "variable": {
                    "value": "sub_policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "sub_policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "sub_policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "sub_policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_211": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds['ins_logit']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, num_points)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size * num_centroids, 200)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_225": {
                "variable": {
                    "value": "(maximum_label_num, maximum_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_227": {
                "variable": {
                    "value": "total_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "purity_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_241": {
                "variable": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_242": {
                "variable": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "valid_mask.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_244": {
                "variable": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.reshape(batch_size, num_centroids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_245": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.reshape(batch_size, num_centroids), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "cumsum_box_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(np.array(0)).cuda().unsqueeze(0), cumsum_box_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_555": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz_pool1, sub_xyz_pool1.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_556": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz_pool2, sub_xyz_pool2.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label_pool, sub_label_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_558": {
                "variable": {
                    "value": "context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_context_xyz_pool, sub_context_context_xyz_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_559": {
                "variable": {
                    "value": "context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_xyz_pool1, sub_context_xyz_pool1.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_560": {
                "variable": {
                    "value": "context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_xyz_pool2, sub_context_xyz_pool2.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_561": {
                "variable": {
                    "value": "context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_label_pool, sub_context_label_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_purity_pool, sub_context_purity_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_563": {
                "variable": {
                    "value": "purity_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_purity_pool, sub_purity_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_564": {
                "variable": {
                    "value": "purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_xyz_pool, sub_purity_xyz_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_565": {
                "variable": {
                    "value": "policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_purity_pool, sub_policy_purity_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_566": {
                "variable": {
                    "value": "policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_reward_pool, sub_policy_reward_pool.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_567": {
                "variable": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_xyz_pool1, sub_policy_xyz_pool1.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_568": {
                "variable": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_xyz_pool2, sub_policy_xyz_pool2.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_269": {
                "variable": {
                    "value": "zero_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_596": {
                "variable": {
                    "value": "xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_597": {
                "variable": {
                    "value": "xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_598": {
                "variable": {
                    "value": "context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_599": {
                "variable": {
                    "value": "context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_600": {
                "variable": {
                    "value": "context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_601": {
                "variable": {
                    "value": "context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_602": {
                "variable": {
                    "value": "context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_603": {
                "variable": {
                    "value": "label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_604": {
                "variable": {
                    "value": "purity_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_605": {
                "variable": {
                    "value": "purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_606": {
                "variable": {
                    "value": "policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_607": {
                "variable": {
                    "value": "policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_608": {
                "variable": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_609": {
                "variable": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "box_index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, num_points)).cuda()",
                            "Call"
                        ],
                        [
                            "box_index_expand.scatter_(dim=1, index=data_batch['neighbour_index'].reshape([-1, num_neighbours]), src=p.reshape([-1, num_neighbours]).float())",
                            "Call"
                        ],
                        [
                            "torch.index_select(box_index_expand, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_588": {
                "obj": {
                    "value": "rbuffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir_merge, 'buffer', '%d_%d.pt' % (cur_epoch, iteration))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_745": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_234": {
                "input": {
                    "value": "box_purity < 0.6",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "ndarray": {
                    "value": "np.array(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_246": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_267": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_381": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:bs]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "rank_idx",
                            "variable"
                        ],
                        [
                            "perm_idx[rank_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([perm_idx[:policy_total_bs - rnum], perm_idx_rnd[:rnum]], dim=0)",
                            "Call"
                        ],
                        [
                            "perm_idx.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "perm_idx[:policy_total_bs]",
                            "Subscript"
                        ],
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "perm_idx[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_382": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_383": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_384": {
                "variable": {
                    "value": "part_mask11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_385": {
                "variable": {
                    "value": "part_mask22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_386": {
                "variable": {
                    "value": "part_label1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_387": {
                "variable": {
                    "value": "part_label2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_389": {
                "variable": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_part_mask.shape[0], 200)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_392": {
                "variable": {
                    "value": "(maximum_label_num, maximum_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_393": {
                "variable": {
                    "value": "total_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_label_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size * num_centroids, 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=box_index_expand).float()",
                            "Call"
                        ],
                        [
                            "torch.zeros((new_part_mask.shape[0], 200)).cuda()",
                            "Call"
                        ],
                        [
                            "box_label_expand.scatter_add_(dim=1, index=box_idx_expand, src=new_part_mask).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "sub_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_purity_pool, box_purity.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "sub_purity_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_purity_xyz_pool, purity_xyz.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "sub_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_xyz_pool1, part_xyz1.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "sub_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_xyz_pool2, part_xyz2.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "sub_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_label_pool, siamese_label_gt.clone().float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_456": {
                "variable": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_457": {
                "variable": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_458": {
                "variable": {
                    "value": "merge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([merge_idx1, merge_idx2], dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_459": {
                "variable": {
                    "value": "nonmerge_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_460": {
                "variable": {
                    "value": "nonmerge_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - siamese_label).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_461": {
                "variable": {
                    "value": "part_mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 0], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_462": {
                "variable": {
                    "value": "part_mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "merge_idx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(sub_part_idx[:, 1], dim=0, index=siamese_label.nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_464": {
                "variable": {
                    "value": "new_part_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "part_label1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(centroid_label, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_465": {
                "variable": {
                    "value": "new_part_label_invalid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "siamese_label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(part_label1 == part_label2) * (1 - (part_label1 == -1)) * (1 - (part_label2 == -1)) * (logits_purity > 0.8)",
                            "BinOp"
                        ],
                        [
                            "(part_label1 == part_label2) * (1 - (part_label1 == -1)) * (1 - (part_label2 == -1)) * (box_purity > 0.8)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "siamese_label.nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_520": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_mask_pool, new_part_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_521": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_xyz_pool, new_part_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_522": {
                "variable": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[centroid_label, new_part_label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_524": {
                "variable": {
                    "value": "new_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_527": {
                "variable": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_528": {
                "variable": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_529": {
                "variable": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_530": {
                "variable": {
                    "value": "inter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cur_mask_pool.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_535": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[cur_pool_size, cur_pool_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_539": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_540": {
                "variable": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([cur_pool_size, cur_pool_size])",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=0, index=new_idx.cpu())",
                            "Call"
                        ],
                        [
                            "torch.index_select(zero_matrix, dim=1, index=new_idx.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_76": {
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "part_pc.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_233": {
                "input": {
                    "value": "box_purity_valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (box_purity < 0.8) * (box_purity > 0.6)",
                            "BinOp"
                        ],
                        [
                            "box_purity_valid_mask * gtmin_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_236": {
                "input": {
                    "value": "1 - centroid_valid_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inter_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_292": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_293": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "score_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "purity_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_327": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_329": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "perm_idx[:int(BS)]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "rank_idx",
                            "variable"
                        ],
                        [
                            "perm_idx[rank_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([perm_idx[:policy_total_bs - rnum], perm_idx_rnd[:rnum]], dim=0)",
                            "Call"
                        ],
                        [
                            "perm_idx.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "perm_idx[:policy_total_bs]",
                            "Subscript"
                        ],
                        [
                            "torch.randperm(pair_idx.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "perm_idx[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_330": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_331": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_332": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "sub_policy_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_policy_purity_pool, logits_purity.detach().unsqueeze(0).clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "sub_policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_policy_xyz_pool1, part_xyz11.unsqueeze(0).clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "sub_policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_policy_xyz_pool2, part_xyz22.unsqueeze(0).clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_355": {
                "variable": {
                    "value": "part_label1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_356": {
                "variable": {
                    "value": "part_label2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centroid_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['centroid_label'].reshape(-1)",
                            "Call"
                        ],
                        [
                            "maximum_label",
                            "variable"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=valid_mask.nonzero().squeeze())",
                            "Call"
                        ],
                        [
                            "centroid_label_all[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([centroid_label, new_part_label], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(centroid_label, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_358": {
                "variable": {
                    "value": "sub_policy_reward_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_policy_reward_pool, siamese_label_gt.unsqueeze(0).float().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_363": {
                "variable": {
                    "value": "(_, rank_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_matrix[pair_idx[:, 0], pair_idx[:, 1]]",
                            "Subscript"
                        ],
                        [
                            "softmax(logits_purity * policy_scores)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy_total_bs",
                            "variable"
                        ]
                    ]
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[perm_idx[:policy_total_bs - rnum], perm_idx_rnd[:rnum]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_371": {
                "variable": {
                    "value": "(_, rank_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_matrix[pair_idx[:, 0], pair_idx[:, 1]]",
                            "Subscript"
                        ],
                        [
                            "softmax(logits_purity * policy_scores)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_402": {
                "input": {
                    "value": "siamese_label_gt == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_403": {
                "input": {
                    "value": "siamese_label_gt == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_412": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_412": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_421": {
                "variable": {
                    "value": "context_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inter_matrix_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ],
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_422": {
                "variable": {
                    "value": "context_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inter_matrix_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ],
                        [
                            "inter_matrix.clone() > minimum_overlap_pc_num",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_429": {
                "variable": {
                    "value": "sub_context_context_xyz_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_context_xyz_pool, context_xyz.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_430": {
                "variable": {
                    "value": "sub_context_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_xyz_pool1, part_xyz1.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "sub_context_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_xyz_pool2, part_xyz2.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "sub_context_label_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_label_pool, siamese_label_gt.clone().float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_433": {
                "variable": {
                    "value": "sub_context_purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_context_purity_pool, box_purity.clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_474": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "equal_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_478": {
                "variable": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_part_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - (1 - part_mask11) * (1 - part_mask22)",
                            "BinOp"
                        ],
                        [
                            "1 - (1 - part_mask1) * (1 - part_mask2)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_mask, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "flag.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_479": {
                "variable": {
                    "value": "new_part_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_part_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(part_label1, dim=0, index=siamese_label.nonzero().squeeze()).long()",
                            "Call"
                        ],
                        [
                            "new_part_label * new_part_label_invalid + -1 * (1 - new_part_label_invalid)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(new_part_label, dim=0, index=flag.nonzero().squeeze().cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "flag.nonzero().squeeze().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_546": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_547": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, tmp_purity_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(purity_matrix, dim=1, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_548": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_549": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inter_matrix.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, tmp_policy_arr.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=0, index=new_idx)",
                            "Call"
                        ],
                        [
                            "torch.index_select(policy_matrix, dim=1, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mask.nonzero().squeeze().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_550": {
                "variable": {
                    "value": "score_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "purity_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_257": {
                "input": {
                    "value": "cur_mask_pool.nonzero()[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_296": {
                "variable": {
                    "value": "sub_part_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ],
                        [
                            "(inter_matrix.triu() > minimum_overlap_pc_num).nonzero()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx[k * bsp:(k + 1) * bsp]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.arange(pair_idx.shape[0]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_297": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_298": {
                "variable": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sub_part_idx[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:int(BS)])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=idx[k * bsp:(k + 1) * bsp])",
                            "Call"
                        ],
                        [
                            "torch.index_select(pair_idx, dim=0, index=perm_idx[:bs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_299": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "purity_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_pool, logits_purity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_317": {
                "variable": {
                    "value": "policy_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_pool, policy_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_333": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_333": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_xyz_pool1, sub_policy_xyz_pool1.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_350": {
                "variable": {
                    "value": "policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_xyz_pool2, sub_policy_xyz_pool2.cpu().clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_351": {
                "variable": {
                    "value": "sub_policy_xyz_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_352": {
                "variable": {
                    "value": "sub_policy_xyz_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, policy_update_bs, 3, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randperm_367": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_377": {
                "variable": {
                    "value": "perm_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "pair_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_413": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_413": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_414": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_414": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_444": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1), torch.cat([context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])], dim=-1)], dim=1), 'head2')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_451": {
                "variable": {
                    "value": "(_, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1), torch.cat([context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])], dim=-1)], dim=1), 'head2')",
                            "Call"
                        ],
                        [
                            "model_merge(torch.cat([part_xyz, torch.cat([logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])], dim=-1)], dim=1), 'head')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_458": {
                "tensors": {
                    "value": "[merge_idx1, merge_idx2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_470": {
                "input": {
                    "value": "1 - new_part_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_471": {
                "n": {
                    "value": "equal_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_489": {
                "variable": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_xyz_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([cur_xyz_pool, new_part_xyz], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "overlap_idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(torch.matmul(cur_mask_pool, new_part_mask.transpose(0, 1)) > minimum_overlap_pc_num).nonzero().squeeze()",
                            "Call"
                        ],
                        [
                            "overlap_idx.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_491": {
                "variable": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[part_xyz1, part_xyz2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_505": {
                "variable": {
                    "value": "tmp_purity_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[purity_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "variable": {
                    "value": "tmp_policy_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[policy_matrix.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_509": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, tmp_purity_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_510": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, tmp_policy_arr.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_514": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[0]).cuda().unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "purity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[purity_matrix, torch.zeros(purity_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "policy_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_matrix, torch.zeros(policy_matrix.shape[1]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_543": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_280": {
                "*size": {
                    "value": "[cur_mask_pool.shape[0], cur_mask_pool.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_282": {
                "n": {
                    "value": "inter_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_300": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_300": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_339": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_339": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_340": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_340": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_359": {
                "input": {
                    "value": "score * siamese_label_gt.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_492": {
                "input": {
                    "value": "part_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "part_xyz / part_norm",
                            "BinOp"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([part_xyz1, part_xyz2], -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_492": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_533": {
                "*size": {
                    "value": "[cur_mask_pool.shape[0], cur_mask_pool.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_memory_allocated_628": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_236": {
                "input": {
                    "value": "box_purity_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_purity > 0.8",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "(1 - centroid_valid_mask).nonzero().squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_308": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_308": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_309": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_309": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_443": {
                "tensors": {
                    "value": "[context_logits.unsqueeze(-1).expand(-1, -1, part_xyz.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_450": {
                "tensors": {
                    "value": "[logits1.unsqueeze(-1).expand(-1, -1, part_xyz1.shape[-1]), logits2.unsqueeze(-1).expand(-1, -1, part_xyz2.shape[-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_497": {
                "input": {
                    "value": "part_xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=overlap_idx[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_497": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_498": {
                "input": {
                    "value": "part_xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_xyz_pool, dim=0, index=sub_part_idx[:, 1])",
                            "Call"
                        ],
                        [
                            "tile(new_part_xyz, 0, overlap_idx.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_498": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_345": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_423": {
                "input": {
                    "value": "context_idx1.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_424": {
                "input": {
                    "value": "context_idx2.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_511": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_511": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_512": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_512": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_514": {
                "*size": {
                    "value": "purity_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_514": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_515": {
                "*size": {
                    "value": "policy_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_515": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_516": {
                "*size": {
                    "value": "purity_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_516": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_517": {
                "*size": {
                    "value": "policy_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_517": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_503": {
                "tensors": {
                    "value": "[logits11, logits22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_485": {
                "input": {
                    "value": "cur_mask_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_index_expand[cumsum_box_num[i]:cumsum_box_num[i + 1]].clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_mask_pool, new_part_mask], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(cur_mask_pool, dim=0, index=new_idx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_part_mask.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "partnet/utils/torch_pc.py": {
        "torch": {}
    },
    "shaper/data/build.py": {
        "torch": {
            "DataLoader_26": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_cls_dataset(cfg, mode)",
                            "Call"
                        ],
                        [
                            "build_part_seg_dataset(cfg, mode)",
                            "Call"
                        ],
                        [
                            "D.ModelNet40H5(root_dir=cfg.DATASET.ROOT_DIR, split=split, num_points=cfg.INPUT.NUM_POINTS, transform=transform)",
                            "Call"
                        ],
                        [
                            "D.ModelNet40(root_dir=cfg.DATASET.ROOT_DIR, split=split, num_points=cfg.INPUT.NUM_POINTS, normalize=True, with_normal=cfg.INPUT.USE_NORMAL, transform=transform)",
                            "Call"
                        ],
                        [
                            "D.ShapeNetPartH5(root_dir=cfg.DATASET.ROOT_DIR, split=split, transform=transform, num_points=cfg.INPUT.NUM_POINTS, load_seg=True)",
                            "Call"
                        ],
                        [
                            "D.ShapeNetPart(root_dir=cfg.DATASET.ROOT_DIR, split=split, transform=transform, num_points=cfg.INPUT.NUM_POINTS, load_seg=True)",
                            "Call"
                        ],
                        [
                            "D.ShapeNetPartNormal(root_dir=cfg.DATASET.ROOT_DIR, split=split, transform=transform, num_points=cfg.INPUT.NUM_POINTS, with_normal=True, load_seg=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.BATCH_SIZE if mode == 'train' else cfg.TEST.BATCH_SIZE",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode == 'train'",
                            "Compare"
                        ],
                        [
                            "mode == 'train'",
                            "Compare"
                        ],
                        [
                            "mode == 'train'",
                            "Compare"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "is_train and cfg.DATALOADER.DROP_LAST",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "shaper/data/datasets/modelnet.py": {
        "torch": {}
    },
    "shaper/data/datasets/shapenet_part.py": {
        "torch": {}
    },
    "shaper/data/transforms.py": {
        "torch": {
            "cos_63": {
                "variable": {
                    "value": "cos_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1).item() * (2 * np.pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_64": {
                "variable": {
                    "value": "sin_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1).item() * (2 * np.pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_65": {
                "variable": {
                    "value": "cross_product_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.expand(3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.eye(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_168": {
                "variable": {
                    "value": "self.rotation_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rotation_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_193": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.angle_sigma * torch.randn(3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.angle_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.angle_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_269": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "points.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_304": {
                "variable": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "points.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.num_points,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_61": {
                "input": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(axis)",
                            "Call"
                        ],
                        [
                            "self._AXES[axis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_65": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_100": {
                "data": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(points)",
                            "Call"
                        ],
                        [
                            "t(points)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_122": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_284": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_285": {
                "input": {
                    "value": "torch.rand(points.size(0)) <= dropout_ratio",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "eye_67": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_285": {
                "*size": {
                    "value": "points.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_193": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "shaper/models/dgcnn/dgcnn_cls.py": {
        "torch": {
            "randn_171": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "conv_channels[-1]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.in_channels * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_56": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_conv(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "edge_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_60": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.edge_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_conv(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "edge_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_conv(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "edge_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "shaper/models/dgcnn/dgcnn_part_seg.py": {
        "torch": {
            "rand_142": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "conv_channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randint_144": {
                "variable": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "high": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.edge_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_78": {
                "variable": {
                    "value": "self.seg_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seg_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_seg_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "inter_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_101": {
                "variable": {
                    "value": "(global_feature, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "edge_conv(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local(inter_feature)",
                            "Call"
                        ],
                        [
                            "torch.cat((inter_feature, global_feature_expand, label_feature), dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_seg(x)",
                            "Call"
                        ],
                        [
                            "self.conv_seg(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inter_feature, global_feature_expand, label_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "edge_conv(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_local(inter_feature)",
                            "Call"
                        ],
                        [
                            "torch.cat((inter_feature, global_feature_expand, label_feature), dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_seg(x)",
                            "Call"
                        ],
                        [
                            "self.conv_seg(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shaper/models/dgcnn/functions.py": {
        "torch": {
            "arange_37": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_38": {
                "variable": {
                    "value": "feature_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "edge_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_central, feature_neighbour - feature_central)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_61": {
                "variable": {
                    "value": "feature_neighbour",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.unsqueeze(2).expand(batch_size, channels, num_nodes, num_nodes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "knn_inds_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knn_inds.unsqueeze(1).expand(batch_size, channels, num_nodes, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "edge_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_central, feature_neighbour - feature_central)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "edge_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_central, feature_neighbour - feature_central)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_22": {
                "variable": {
                    "value": "(_, knn_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "topk_25": {
                "variable": {
                    "value": "(_, knn_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knn_inds.size(-1)",
                            "Call"
                        ],
                        [
                            "knn_inds.size(-1)",
                            "Call"
                        ],
                        [
                            "knn_inds.size(-1)",
                            "Call"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shaper/models/dgcnn/modules.py": {
        "torch": {
            "max_23": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_edge_feature(x, self.k)",
                            "Call"
                        ],
                        [
                            "super(EdgeConvBlock, self).forward(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "shaper/models/loss.py": {
        "torch": {
            "cross_entropy_39": {
                "variable": {
                    "value": "seg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg_logit']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['seg_label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_26": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['cls_logit']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['cls_label']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "shaper/models/pointnet/pointnet_cls.py": {
        "torch": {
            "randn_222": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_49": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_162": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_200": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['cls_logit']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['cls_label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "x.add(I)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "self.mlp_local(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_global(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_208": {
                "variable": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_209": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "trans_norm.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "trans_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "trans_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_210": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_feature.transpose(2, 1), trans_feature)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "I.unsqueeze(0).expand_as(trans_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "shaper/models/pointnet/pointnet_part_seg.py": {
        "torch": {
            "randn_253": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randint_254": {
                "variable": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "high": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_135": {
                "variable": {
                    "value": "self.seg_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seg_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_seg_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_166": {
                "variable": {
                    "value": "(global_feature, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "stem_feature",
                            "variable"
                        ],
                        [
                            "mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(seg_features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_seg(x)",
                            "Call"
                        ],
                        [
                            "self.conv_seg(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_cls(global_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_180": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_features + local_features + [global_feature_expand]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_224": {
                "variable": {
                    "value": "seg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.seg_logit(x)",
                            "Call"
                        ],
                        [
                            "preds['seg_logit']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['seg_label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "stem_feature",
                            "variable"
                        ],
                        [
                            "mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(seg_features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_seg(x)",
                            "Call"
                        ],
                        [
                            "self.conv_seg(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_cls(global_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_input, x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.bmm(trans_feature, x)",
                            "Call"
                        ],
                        [
                            "data_batch['points']",
                            "Subscript"
                        ],
                        [
                            "stem_feature",
                            "variable"
                        ],
                        [
                            "mlp(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(seg_features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_seg(x)",
                            "Call"
                        ],
                        [
                            "self.conv_seg(x)",
                            "Call"
                        ],
                        [
                            "self.mlp_cls(global_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.cls_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cls_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_232": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_logit(x)",
                            "Call"
                        ],
                        [
                            "preds['cls_logit']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(num_classes, (batch_size,))",
                            "Call"
                        ],
                        [
                            "data_batch['cls_label']",
                            "Subscript"
                        ],
                        [
                            "labels['cls_label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_238": {
                "variable": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_feature.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_feature(x)",
                            "Call"
                        ],
                        [
                            "preds['trans_feature']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_239": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "trans_norm.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "trans_norm.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "trans_norm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_240": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(trans_feature.transpose(2, 1), trans_feature)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "I.unsqueeze(0).expand_as(trans_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shaper/models/pointnet2/functions.py": {
        "torch": {}
    },
    "shaper/models/pointnet2/modules.py": {
        "torch": {
            "max_167": {
                "variable": {
                    "value": "(new_feature, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([interpolated_feature, dense_feature], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feature",
                            "variable"
                        ],
                        [
                            "self.mlp(group_feature)",
                            "Call"
                        ],
                        [
                            "mlp(group_feature)",
                            "Call"
                        ],
                        [
                            "self.interpolator(dense_xyz, sparse_xyz, dense_feature, sparse_feature)",
                            "Call"
                        ],
                        [
                            "torch.cat([sparse_feature_expand, dense_feature], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_198": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_204": {
                "variable": {
                    "value": "self.grouper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.clamp(distance, min=self._eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feature, dense_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_239": {
                "variable": {
                    "value": "(new_feature, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([interpolated_feature, dense_feature], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feature",
                            "variable"
                        ],
                        [
                            "self.mlp(group_feature)",
                            "Call"
                        ],
                        [
                            "mlp(group_feature)",
                            "Call"
                        ],
                        [
                            "self.interpolator(dense_xyz, sparse_xyz, dense_feature, sparse_feature)",
                            "Call"
                        ],
                        [
                            "torch.cat([sparse_feature_expand, dense_feature], dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_276": {
                "variable": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sparse_feature_expand, dense_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "group_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[group_xyz, group_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "group_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[group_xyz, group_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "new_feature_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_81": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "self._eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "shaper/models/pointnet2/pn2_msg_cls.py": {
        "torch": {
            "randn_115": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.sa_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_88": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point.narrow(1, 3, point.size(1) - 3)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "shaper/models/pointnet2/pn2_msg_part_seg.py": {
        "torch": {
            "randn_168": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "points.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_170": {
                "variable": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "high": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.sa_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.fp_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_96": {
                "variable": {
                    "value": "self.seg_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seg_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_seg_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "inter_feature[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inter_feature[0], one_hot_expand)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shaper/models/pointnet2/pn2_ssg_cls.py": {
        "torch": {
            "randn_120": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.sa_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_93": {
                "variable": {
                    "value": "(x, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.narrow(1, 3, points.size(1) - 3)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "shaper/models/pointnet2/pn2_ssg_part_seg.py": {
        "torch": {
            "randn_179": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "points.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_181": {
                "variable": {
                    "value": "cls_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "high": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.sa_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.fp_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_107": {
                "variable": {
                    "value": "self.seg_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seg_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_seg_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "inter_feature[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inter_feature[0], one_hot_expand)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shaper/models/pointnet2/setup.py": {
        "torch": {}
    },
    "shaper/test_cls.py": {
        "torch": {
            "DataParallel_126": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "tmp_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataloader.dataset",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "points_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t(points.copy()) for t in transform_list]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(points_batch, dim=0)",
                            "Call"
                        ],
                        [
                            "points_batch.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shaper/test_part_seg.py": {
        "torch": {
            "DataParallel_153": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_205": {
                "variable": {
                    "value": "tmp_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataloader.dataset",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_220": {
                "variable": {
                    "value": "points_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t(points.copy()) for t in transform_list]",
                            "ListComp"
                        ],
                        [
                            "[points[index] for (points, index) in zip(points_batch, index_batch)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(points_batch, dim=0)",
                            "Call"
                        ],
                        [
                            "points_batch.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "cls_label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[cls_label] * cfg.TEST.VOTE.NUM_VOTE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_218": {
                "n": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "shaper/train_cls.py": {
        "torch": {
            "DataParallel_174": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__91": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shaper/train_part_seg.py": {
        "torch": {
            "device_count_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shaper/unittest/test_dgcnn.py": {
        "torch": {
            "randn_10": {
                "variable": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_13": {
                "variable": {
                    "value": "(_, knn_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bpdist(feature_tensor)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_23": {
                "use_cuda": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_25": {
                "input": {
                    "value": "edge_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn(feature, knn_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shaper/unittest/test_pn2.py": {
        "torch": {
            "from_numpy_49": {
                "variable": {
                    "value": "point_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(batch_size, channels, num_points)",
                            "Call"
                        ],
                        [
                            "np.random.randn(batch_size, 3, num_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_68": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_inst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "randint_69": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_inst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "size": {
                    "value": "[batch_size, num_select, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_71": {
                "variable": {
                    "value": "feature_gather",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, channels, num_inst).cuda()",
                            "Call"
                        ],
                        [
                            "np.random.randn(batch_size, channels, num_key)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "feature_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, channels, num_inst).cuda()",
                            "Call"
                        ],
                        [
                            "np.random.randn(batch_size, channels, num_key)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_79": {
                "variable": {
                    "value": "out_gather",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_gather.unsqueeze(2).expand(batch_size, channels, num_select, num_inst)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.unsqueeze(1).expand(batch_size, channels, num_select, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "points_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(batch_size, channels, num_points)",
                            "Call"
                        ],
                        [
                            "np.random.randn(batch_size, 3, num_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "centroids_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([p[:, np.random.choice(num_points, [num_centroids], replace=False)] for p in points])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_203": {
                "variable": {
                    "value": "sparse_xyz_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, 3, 2048).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_204": {
                "variable": {
                    "value": "dense_xyz_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dense_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, 3, 512).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "features_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, channels, num_inst).cuda()",
                            "Call"
                        ],
                        [
                            "np.random.randn(batch_size, channels, num_key)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_270": {
                "variable": {
                    "value": "index_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "farthest_point_sample_np(points, num_centroids)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, num_inst, [batch_size, num_select, k]).long().cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(index)",
                            "Call"
                        ],
                        [
                            "np.random.randint(num_key, size=(batch_size, num_query, num_neighbors))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_271": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(1e-10, 1, [batch_size, num_query, num_neighbors])",
                            "Call"
                        ],
                        [
                            "weight / weight.sum(axis=2, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradcheck_278": {
                "func": {
                    "value": "feature_interpolate",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(features_tensor, index_tensor, weight_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_84": {
                "input": {
                    "value": "out_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(feature_expand, 3, index_expand)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_85": {
                "input": {
                    "value": "out_cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_points(feature_cuda, index)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "shaper/unittest/test_transforms.py": {
        "torch": {
            "tensor_54": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_36": {
                "data": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1.0, (3,)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/convert_weights.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "checkpoint_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_53": {
                "obj": {
                    "value": "checkpoint_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}