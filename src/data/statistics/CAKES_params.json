{
    "I3D.py": {
        "torch": {
            "Conv3d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_102": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_103": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_142": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_144": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_146": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_151": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=(1, stride, stride), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv3d_165": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_167": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_279": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 2, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 3, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 7, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(v, dim=3, keepdim=True), dim=4, keepdim=True).repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(v, dim=3, keepdim=True), dim=4, keepdim=True).repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(7)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_284": {
                "input": {
                    "value": "v[cout2d:cout2d + cout1d, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_295": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 2, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 3, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 7, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(v, dim=3, keepdim=True), dim=4, keepdim=True).repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(v, dim=3, keepdim=True), dim=4, keepdim=True).repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(7)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_306": {
                "input": {
                    "value": "v[cout3d + cout2d:cout3d + cout2d + cout1d, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_324": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 2, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 3, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 7, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(v, dim=3, keepdim=True), dim=4, keepdim=True).repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(v, dim=3, keepdim=True), dim=4, keepdim=True).repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(7)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_329": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 2, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 3, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "v.repeat(1, 7, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "v.repeat(2)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(v, dim=3, keepdim=True), dim=4, keepdim=True).repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(v, dim=3, keepdim=True), dim=4, keepdim=True).repeat(1, 1, 3, 1, 1) / 3.0",
                            "BinOp"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(3)",
                            "Call"
                        ],
                        [
                            "v.repeat(7)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {}
    },
    "datasets_video.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "DataLoader_108": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataSet(root_path, train_list, num_segments=args.num_segments, image_tmpl=prefix, transform=torchvision.transforms.Compose([train_augmentation, Stack(roll=args.arch in ['BNInception', 'InceptionV3']), ToTorchFormatTensor(div=args.arch not in ['BNInception', 'InceptionV3']), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataSet(root_path, val_list, num_segments=args.num_segments, image_tmpl=prefix, random_shift=False, transform=torchvision.transforms.Compose([GroupScale(int(scale_size)), GroupCenterCrop(crop_size), Stack(roll=args.arch in ['BNInception', 'InceptionV3']), ToTorchFormatTensor(div=args.arch not in ['BNInception', 'InceptionV3']), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_135": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "policies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_optim_policies(model)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_200": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_65": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TemporalModel(num_class, args.num_segments, model=args.type, backbone=args.arch, alpha=args.alpha, beta=args.beta, dropout=args.dropout, target_transforms=target_transforms, search=args.search, op_code=args.op_code, conv_config=conv_config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "load_state_dict_supernet(model, checkpoint['state_dict'], conv_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_355": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_checkpoint.pth.tar' % (os.path.join(args.checkpoint_dir, 'checkpoint'), store_name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_91": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.finetune",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_271": {
                "input": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_262": {
                "input": {
                    "value": "m.weight.data[:c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_263": {
                "input": {
                    "value": "m.weight.data[c:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_267": {
                "input": {
                    "value": "m.weight.data[:c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_268": {
                "input": {
                    "value": "m.weight.data[c:2 * c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_269": {
                "input": {
                    "value": "m.weight.data[2 * c:3 * c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.new_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "operations.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(C_in, C_out, kernel_size, stride=(1, stride, stride), padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(C_in, C_out, (1, kernel_size, kernel_size), stride=(1, stride, stride), padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(C_in, C_in, kernel_size=(1, kernel_size, kernel_size), stride=(1, stride, stride), padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PruneBN(C_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_96": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_124": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_229": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.norm.running_mean[keep_channels_norm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.norm.running_var[keep_channels_norm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "norm_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm.weight",
                            "Attribute"
                        ],
                        [
                            "self.norm.weight[keep_channels_norm]",
                            "Subscript"
                        ],
                        [
                            "self.norm.weight[keep_channels]",
                            "Subscript"
                        ],
                        [
                            "self.norm.weight[keep_channels]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "norm_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm.bias",
                            "Attribute"
                        ],
                        [
                            "self.norm.bias[keep_channels_norm]",
                            "Subscript"
                        ],
                        [
                            "self.norm.bias[keep_channels]",
                            "Subscript"
                        ],
                        [
                            "self.norm.bias[keep_channels]",
                            "Subscript"
                        ]
                    ]
                },
                "training": {
                    "value": "self.norm.training or not self.norm.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.norm.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.norm.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_239": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_272": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PruneBN(C_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_310": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_343": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_364": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PruneBN(C_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_381": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_421": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_468": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PruneBN(C_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_486": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_519": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_534": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PruneBN(C_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_551": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_583": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_598": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PruneBN(C_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_606": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_615": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_651": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_671": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PruneBN(C_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_679": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_688": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_722": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_739": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_774": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_775": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.norm.running_mean[keep_channels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.norm.running_var[keep_channels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "norm_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm.weight",
                            "Attribute"
                        ],
                        [
                            "self.norm.weight[keep_channels_norm]",
                            "Subscript"
                        ],
                        [
                            "self.norm.weight[keep_channels]",
                            "Subscript"
                        ],
                        [
                            "self.norm.weight[keep_channels]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "norm_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm.bias",
                            "Attribute"
                        ],
                        [
                            "self.norm.bias[keep_channels_norm]",
                            "Subscript"
                        ],
                        [
                            "self.norm.bias[keep_channels]",
                            "Subscript"
                        ],
                        [
                            "self.norm.bias[keep_channels]",
                            "Subscript"
                        ]
                    ]
                },
                "training": {
                    "value": "self.norm.training or not self.norm.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.norm.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.norm.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_785": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_820": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_842": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_887": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_888": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.norm.running_mean[keep_channels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.norm.running_var[keep_channels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "norm_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm.weight",
                            "Attribute"
                        ],
                        [
                            "self.norm.weight[keep_channels_norm]",
                            "Subscript"
                        ],
                        [
                            "self.norm.weight[keep_channels]",
                            "Subscript"
                        ],
                        [
                            "self.norm.weight[keep_channels]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "norm_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm.bias",
                            "Attribute"
                        ],
                        [
                            "self.norm.bias[keep_channels_norm]",
                            "Subscript"
                        ],
                        [
                            "self.norm.bias[keep_channels]",
                            "Subscript"
                        ],
                        [
                            "self.norm.bias[keep_channels]",
                            "Subscript"
                        ]
                    ]
                },
                "training": {
                    "value": "self.norm.training or not self.norm.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.norm.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.norm.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_898": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ],
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_220": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight0[keep_channels0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight0[keep_channels0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight0[keep_channels0, :, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.convs[0][0].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.convs[0][0].stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.convs[0][0].padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.convs[0][0].dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.convs[0][0].groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_224": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight1[keep_channels1, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight1[keep_channels1, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight1[keep_channels1, :, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.convs[1][0].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.convs[1][0].stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.convs[1][0].padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.convs[1][0].dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.convs[1][0].groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_766": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight0[keep_channels0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight0[keep_channels0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight0[keep_channels0, :, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.convs[0][0].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.convs[0][0].stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.convs[0][0].padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.convs[0][0].dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.convs[0][0].groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_770": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight1[keep_channels1, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight1[keep_channels1, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight1[keep_channels1, :, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.convs[1][0].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.convs[1][0].stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.convs[1][0].padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.convs[1][0].dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.convs[1][0].groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_875": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight0[keep_channels0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight0[keep_channels0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[0][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight0[keep_channels0, :, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.convs[0][0].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.convs[0][0].stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.convs[0][0].padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.convs[0][0].dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.convs[0][0].groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_879": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight1[keep_channels1, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight1[keep_channels1, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs[1][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight1[keep_channels1, :, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.convs[1][0].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.convs[1][0].stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.convs[1][0].padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.convs[1][0].dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.convs[1][0].groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_883": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels_norm], self.norm.running_var[keep_channels_norm], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, self.norm.running_mean[keep_channels], self.norm.running_var[keep_channels], norm_weight, norm_bias, self.norm.training or not self.norm.track_running_stats, self.norm.momentum, self.norm.eps)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convs[2][0].weight",
                            "Attribute"
                        ],
                        [
                            "weight2[keep_channels2, :, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.convs[2][0].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.convs[2][0].stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.convs[2][0].padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.convs[2][0].dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.convs[2][0].groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_13": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_14": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_25": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_26": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_38": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_40": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_295": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_366": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_470": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_536": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_600": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_673": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_740": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_843": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kxkxk'], kernel_size=kernel_size, stride=(1, stride, stride), padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkxk'], kernel_size=(1, kernel_size, kernel_size), stride=(1, stride, stride), padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kxkxk'], kernel_size=kernel_size, stride=(1, stride, stride), padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkxk'], kernel_size=(1, kernel_size, kernel_size), stride=(1, stride, stride), padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kx1x1'], kernel_size=(kernel_size, 1, 1), stride=(1, stride, stride), padding=(padding, 0, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkx1'], kernel_size=(1, kernel_size, 1), stride=(1, stride, stride), padding=(0, padding, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_286": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1x1xk'], kernel_size=(1, 1, kernel_size), stride=(1, stride, stride), padding=(0, 0, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_345": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kxkx1'], kernel_size=(kernel_size, kernel_size, 1), stride=stride, padding=(padding, padding, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_351": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkxk'], kernel_size=(1, kernel_size, kernel_size), stride=stride, padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kx1xk'], kernel_size=(kernel_size, 1, kernel_size), stride=stride, padding=(padding, 0, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_424": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kxkxk'], kernel_size=kernel_size, stride=stride, padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkxk'], kernel_size=(1, kernel_size, kernel_size), stride=stride, padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_436": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kx1xk'], kernel_size=(kernel_size, 1, kernel_size), stride=stride, padding=(padding, 0, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_442": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kxkx1'], kernel_size=(kernel_size, kernel_size, 1), stride=stride, padding=(padding, padding, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_448": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kx1x1'], kernel_size=(kernel_size, 1, 1), stride=1, padding=(padding, 0, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_454": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkx1'], kernel_size=(1, kernel_size, 1), stride=1, padding=(0, padding, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_460": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1x1xk'], kernel_size=(1, 1, kernel_size), stride=1, padding=(0, 0, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_521": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkxk'], kernel_size=(1, kernel_size, kernel_size), stride=(1, stride, stride), padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_527": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kx1x1'], kernel_size=(kernel_size, 1, 1), stride=(1, stride, stride), padding=(padding, 0, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_585": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kxkxk'], kernel_size=kernel_size, stride=(1, stride, stride), padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_591": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkxk'], kernel_size=(1, kernel_size, kernel_size), stride=(1, stride, stride), padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_653": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kxkxk'], kernel_size=kernel_size, stride=(1, stride, stride), padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_659": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkxk'], kernel_size=(1, kernel_size, kernel_size), stride=(1, stride, stride), padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_664": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kx1x1'], kernel_size=(kernel_size, 1, 1), stride=(1, stride, stride), padding=(padding, 0, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_724": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkxk'], kernel_size=(1, kernel_size, kernel_size), stride=(1, stride, stride), padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_730": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kx1x1'], kernel_size=(kernel_size, 1, 1), stride=(1, stride, stride), padding=(padding, 0, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_822": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kxkxk'], kernel_size=kernel_size, stride=(1, stride, stride), padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_828": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['1xkxk'], kernel_size=(1, kernel_size, kernel_size), stride=(1, stride, stride), padding=(0, padding, padding), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_833": {
                "*args": {
                    "value": "nn.Conv3d(C_in, self.C_per_convs['kx1x1'], kernel_size=(kernel_size, 1, 1), stride=(1, stride, stride), padding=(padding, 0, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_67": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kxkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_73": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_162": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kxkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_168": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_275": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kx1x1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_281": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkx1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_287": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1x1xk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_346": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kxkx1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_352": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_358": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kx1xk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_425": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kxkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_431": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_437": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kx1xk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_443": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kxkx1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_449": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kx1x1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_455": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkx1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_461": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1x1xk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_522": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_528": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kx1x1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_586": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kxkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_592": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_654": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kxkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_660": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_665": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kx1x1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_725": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_731": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kx1x1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_823": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kxkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_829": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['1xkxk']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_834": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.C_per_convs['kx1x1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "transforms.py": {
        "torch": {
            "stack_312": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[crop for crop in image]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "permute_328": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_303": {
                "ndarray": {
                    "value": "pic",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "permute_303": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_303": {
                "input": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}