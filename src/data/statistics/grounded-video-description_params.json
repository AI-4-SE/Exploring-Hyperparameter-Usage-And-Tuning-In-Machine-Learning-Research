{
    "main.py": {
        "torch": {
            "max_55": {
                "variable": {
                    "value": "(sim_mat_val, sim_mat_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_557": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataLoader(opt, split=opt.train_split, seq_per_img=opt.seq_per_img)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_561": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataLoader(opt, split=opt.val_split, seq_per_img=opt.seq_per_img)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_602": {
                "variable": {
                    "value": "opt.glove_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.glove_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_603": {
                "variable": {
                    "value": "opt.glove_vg_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.glove_vg_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_604": {
                "variable": {
                    "value": "opt.glove_clss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.glove_clss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_59": {
                "variable": {
                    "value": "(max_att2_weight, top_k_alpha_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att2_weights[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "pnt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_ppls.new(mask_ppls.size(0), 1).fill_(0), mask_ppls)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_130": {
                "variable": {
                    "value": "obj_bbox_att2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ppls.view(-1, opt.num_sampled_frm, opt.num_prop_per_frm, 7).permute(0, 2, 1, 3).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "att2_ind.unsqueeze(-1).expand((att2_ind.size(0), att2_ind.size(1), opt.num_sampled_frm, 7))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_133": {
                "variable": {
                    "value": "obj_bbox_grd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ppls.view(-1, opt.num_sampled_frm, opt.num_prop_per_frm, 7).permute(0, 2, 1, 3).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "grd_ind.unsqueeze(-1).expand((grd_ind.size(0), grd_ind.size(1), opt.num_sampled_frm, 7))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "cls_pred_lst",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_pred_lst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cls_pred_lst, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "cls_accu_lst",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_pred_lst[:, 0:1], (cls_pred_lst[:, 0:1] == cls_pred_lst[:, 1:2]).long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "pnt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_ppls.new(mask_ppls.size(0), 1).fill_(0), mask_ppls)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_539": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_655": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "AttModel.TopDownModel(opt)",
                            "Call"
                        ],
                        [
                            "AttModel.TransformerModel(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_673": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': opt.learning_rate, 'weight_decay': opt.weight_decay, 'betas': (opt.optim_alpha, opt.optim_beta)}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__265": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "pnt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_ppls.new(mask_ppls.size(0), 1).fill_(0), mask_ppls)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_543": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_675": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': opt.learning_rate, 'weight_decay': opt.weight_decay, 'betas': (opt.optim_alpha, opt.optim_beta)}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_366": {
                "variable": {
                    "value": "obj_bbox_att2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ppls.view(-1, opt.num_sampled_frm, opt.num_prop_per_frm, 7).permute(0, 2, 1, 3).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "att2_ind.unsqueeze(-1).expand((batch_size, att2_ind.size(1), opt.num_sampled_frm, input_ppls.size(-1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_638": {
                "f": {
                    "value": "model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(opt.start_from, 'model-best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.start_from, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adamax_677": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': opt.learning_rate, 'weight_decay': opt.weight_decay, 'betas': (opt.optim_alpha, opt.optim_beta)}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_405": {
                "variable": {
                    "value": "att2_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att2_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(att2_weights, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_693": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_711": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.checkpoint_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_713": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.checkpoint_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_364": {
                "input": {
                    "value": "att2_weights.view(batch_size, att2_weights.size(1), opt.num_sampled_frm, opt.num_prop_per_frm)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_737": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.checkpoint_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_739": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.checkpoint_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_407": {
                "input": {
                    "value": "proposals[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "misc/AttModel.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_42": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "Call",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((xt.unsqueeze(1), att_feats), 2)",
                            "Call"
                        ],
                        [
                            "att * att_h.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "att + att_h.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "Call",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((xt.unsqueeze(1), att_feats), 2)",
                            "Call"
                        ],
                        [
                            "att * att_h.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "att + att_h.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_50": {
                "variable": {
                    "value": "att_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "att_feats_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "att_feats.view(-1, att_size, self.rnn_size)",
                            "Call"
                        ],
                        [
                            "att_feats.view(-1, att_size, self.rnn_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "att_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hAflat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(att, att_h.view(batch_size, self.att_hid_size, 1))",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "hAflat.view(-1, att_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_106": {
                "variable": {
                    "value": "att_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "att_feats_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "att_feats.view(-1, att_size, self.rnn_size)",
                            "Call"
                        ],
                        [
                            "att_feats.view(-1, att_size, self.rnn_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "att_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_121": {
                "variable": {
                    "value": "self.att_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "opt.input_encoding_size + opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_123": {
                "variable": {
                    "value": "self.lang_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.i2h_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.h2h_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "att_lstm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fc_feats, xt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_161": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_lang",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_89": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "Call",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((xt.unsqueeze(1), att_feats), 2)",
                            "Call"
                        ],
                        [
                            "att * att_h.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "att + att_h.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "hAflat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p_att_feats.view(-1, att_size, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "p_att_feats.view(-1, att_size, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.attention(h_att, conv_feats, p_conv_feats)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "att_h.view(batch_size, self.att_hid_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.dual_pointer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "lang_lstm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att + att2, h_att]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xt.unsqueeze(1), att_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "lang_lstm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att, h_att]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_162": {
                "tensors": {
                    "value": "[c_att, c_lang]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "lang_lstm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att2, h_att]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "lang_lstm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dual_p * att2 + (1 - dual_p) * att2_dual, h_att]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "misc/CaptionModelBU.py": {
        "torch": {
            "zeros_115": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_45": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logprobs.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_125": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(rnn_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_182": {
                "variable": {
                    "value": "(_, att2_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att2_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_149": {
                "input": {
                    "value": "it >= self.vocab_size",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "misc/bbox_transform.py": {
        "torch": {
            "log_35": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_36": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_38": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_58": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths.view(1, -1).expand_as(gt_widths)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_59": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights.view(1, -1).expand_as(gt_heights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_74": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_75": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_162": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_163": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_166": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_167": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_210": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_211": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_214": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_215": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_249": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_250": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_253": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_254": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "misc/dataloader_anet.py": {
        "torch": {
            "from_numpy_336": {
                "variable": {
                    "value": "input_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_seq",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([self.seq_per_img, self.seq_length + 1, 4])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input_seq).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_337": {
                "variable": {
                    "value": "gt_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_seq",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([10, self.seq_length])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_seq).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_338": {
                "variable": {
                    "value": "pad_proposals",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_proposals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.max_proposal, 7))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_proposals).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_339": {
                "variable": {
                    "value": "pad_pnt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_pnt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones(self.max_proposal)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_pnt_mask).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_340": {
                "variable": {
                    "value": "pad_gt_bboxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_gt_bboxs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.max_gt_box, 6))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_gt_bboxs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_341": {
                "variable": {
                    "value": "pad_box_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_box_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones((self.seq_per_img, self.max_gt_box, self.seq_length + 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_box_mask).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_342": {
                "variable": {
                    "value": "pad_region_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_region_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.max_proposal, self.att_feat_size))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_region_feature).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_345": {
                "variable": {
                    "value": "pad_frm_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_frm_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones((self.max_proposal, self.max_gt_box))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_frm_mask).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_349": {
                "variable": {
                    "value": "sample_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([np.round(num_frm * timestamps[0] * 1.0 / dur), np.round(num_frm * timestamps[1] * 1.0 / dur)])",
                            "Call"
                        ],
                        [
                            "np.clip(np.round(sample_idx), 0, self.t_attn_size).astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sample_idx).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_315": {
                "variable": {
                    "value": "seg_show",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg_show",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.num_sampled_frm, 1280, 720, 3))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(seg_show).type(torch.ByteTensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "misc/model.py": {
        "torch": {
            "Sequential_75": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(5, 300)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(self.vocab_size, self.input_encoding_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.vis_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(self.detect_size + 1, self.vis_encoding_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.fc_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.fc_feat_size, self.rnn_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.seg_info_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4, self.seg_info_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.att_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Linear(2048, self.rnn_size // 2), nn.ReLU(), nn.Dropout(self.drop_prob_lm, inplace=True)), nn.Sequential(nn.Linear(1024, self.rnn_size // 2), nn.ReLU(), nn.Dropout(self.drop_prob_lm, inplace=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.att_embed_aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm1d(self.rnn_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.pool_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pool_feat_size, self.rnn_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.ctx2pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.ctx2pool_grd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.att_feat_size, self.vis_encoding_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Variable(seq.data.new(seq.size(0), 1).fill_(0)), seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_306": {
                "variable": {
                    "value": "fc_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segs_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "fc_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_340": {
                "variable": {
                    "value": "sim_mat_static",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_mat_static",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_508": {
                "variable": {
                    "value": "fc_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segs_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_509": {
                "variable": {
                    "value": "fc_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_535": {
                "variable": {
                    "value": "sim_mat_static",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_mat_static",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_638": {
                "variable": {
                    "value": "fc_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segs_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_639": {
                "variable": {
                    "value": "fc_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_663": {
                "variable": {
                    "value": "sim_mat_static",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_mat_static",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_148": {
                "variable": {
                    "value": "self.context_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.rnn_size",
                    "type": null,
                    "possible_values": []
                },
                "dropout": {
                    "value": "attn_drop",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.2",
                            "Constant"
                        ],
                        [
                            "0.2",
                            "Constant"
                        ],
                        [
                            "0.2",
                            "Constant"
                        ],
                        [
                            "0.2",
                            "Constant"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "fc7_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pickle.load(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_176": {
                "variable": {
                    "value": "fc7_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pickle.load(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "variable": {
                    "value": "sim_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.glove_vg_cls / torch.norm(opt.glove_vg_cls, dim=1).unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(opt.glove_clss / torch.norm(opt.glove_clss, dim=1).unsqueeze(1)).transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_193": {
                "variable": {
                    "value": "(max_sim, matched_cls)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(opt.glove_vg_cls / torch.norm(opt.glove_vg_cls, dim=1).unsqueeze(1), (opt.glove_clss / torch.norm(opt.glove_clss, dim=1).unsqueeze(1)).transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_198": {
                "variable": {
                    "value": "self.vis_classifiers_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "opt.glove_clss.new(self.detect_size + 1).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_260": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "Call",
                    "possible_values": [
                        [
                            "xt.unsqueeze(2) + att_feats.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((xt.unsqueeze(2).expand(B, S, R, self.att_hid_size), att_feats.unsqueeze(1).expand(B, S, R, self.att_hid_size)), 3)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xt, att_feats.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "dot + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed(it)",
                            "Call"
                        ],
                        [
                            "self.embed(Variable(it))",
                            "Call"
                        ],
                        [
                            "self.embed(Variable(it))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "att_feats.permute(0, 2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "pool_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F.layer_norm(pool_feats, [pool_feats.size(-1)]), F.layer_norm(loc_feats, [loc_feats.size(-1)]), F.layer_norm(label_feat, [label_feat.size(-1)]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_394": {
                "variable": {
                    "value": "conv_feats_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "segs_feat",
                            "Name"
                        ],
                        [
                            "torch.cat([m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)], dim=2)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.att_embed_aux(conv_feats)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.context_enc(conv_feats)[0]",
                            "Subscript"
                        ],
                        [
                            "conv_feats.masked_fill(sample_idx_mask, 0)",
                            "Call"
                        ],
                        [
                            "conv_feats.view(batch_size, 1, self.t_attn_size, self.rnn_size).expand(batch_size, self.seq_per_img, self.t_attn_size, self.rnn_size).contiguous().view(-1, self.t_attn_size, self.rnn_size)",
                            "Call"
                        ],
                        [
                            "pool_feats.new(1, 1).fill_(0)",
                            "Call"
                        ],
                        [
                            "segs_feat",
                            "Name"
                        ],
                        [
                            "torch.cat([m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)], dim=2)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.att_embed_aux(conv_feats)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.context_enc(conv_feats)[0]",
                            "Subscript"
                        ],
                        [
                            "conv_feats.masked_fill(sample_idx_mask, 0)",
                            "Call"
                        ],
                        [
                            "pool_feats.new(1, 1).fill_(0)",
                            "Call"
                        ],
                        [
                            "segs_feat",
                            "Name"
                        ],
                        [
                            "torch.cat([m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)], dim=2)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.att_embed_aux(conv_feats)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.context_enc(conv_feats)[0]",
                            "Subscript"
                        ],
                        [
                            "conv_feats.masked_fill(sample_idx_mask, 0)",
                            "Call"
                        ],
                        [
                            "pool_feats.new(1, 1).fill_(0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "conv_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_543": {
                "variable": {
                    "value": "pool_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F.layer_norm(pool_feats, [pool_feats.size(-1)]), F.layer_norm(loc_feats, [loc_feats.size(-1)]), F.layer_norm(label_feat, [label_feat.size(-1)]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_557": {
                "variable": {
                    "value": "conv_feats_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "segs_feat",
                            "Name"
                        ],
                        [
                            "torch.cat([m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)], dim=2)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.att_embed_aux(conv_feats)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.context_enc(conv_feats)[0]",
                            "Subscript"
                        ],
                        [
                            "conv_feats.masked_fill(sample_idx_mask, 0)",
                            "Call"
                        ],
                        [
                            "conv_feats.view(batch_size, 1, self.t_attn_size, self.rnn_size).expand(batch_size, self.seq_per_img, self.t_attn_size, self.rnn_size).contiguous().view(-1, self.t_attn_size, self.rnn_size)",
                            "Call"
                        ],
                        [
                            "pool_feats.new(1, 1).fill_(0)",
                            "Call"
                        ],
                        [
                            "segs_feat",
                            "Name"
                        ],
                        [
                            "torch.cat([m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)], dim=2)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.att_embed_aux(conv_feats)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.context_enc(conv_feats)[0]",
                            "Subscript"
                        ],
                        [
                            "conv_feats.masked_fill(sample_idx_mask, 0)",
                            "Call"
                        ],
                        [
                            "pool_feats.new(1, 1).fill_(0)",
                            "Call"
                        ],
                        [
                            "segs_feat",
                            "Name"
                        ],
                        [
                            "torch.cat([m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)], dim=2)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.att_embed_aux(conv_feats)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.context_enc(conv_feats)[0]",
                            "Subscript"
                        ],
                        [
                            "conv_feats.masked_fill(sample_idx_mask, 0)",
                            "Call"
                        ],
                        [
                            "pool_feats.new(1, 1).fill_(0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_558": {
                "variable": {
                    "value": "conv_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_673": {
                "variable": {
                    "value": "pool_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F.layer_norm(pool_feats, [pool_feats.size(-1)]), F.layer_norm(loc_feats, [loc_feats.size(-1)]), F.layer_norm(label_feat, [label_feat.size(-1)]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_687": {
                "variable": {
                    "value": "conv_feats_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "segs_feat",
                            "Name"
                        ],
                        [
                            "torch.cat([m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)], dim=2)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.att_embed_aux(conv_feats)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.context_enc(conv_feats)[0]",
                            "Subscript"
                        ],
                        [
                            "conv_feats.masked_fill(sample_idx_mask, 0)",
                            "Call"
                        ],
                        [
                            "conv_feats.view(batch_size, 1, self.t_attn_size, self.rnn_size).expand(batch_size, self.seq_per_img, self.t_attn_size, self.rnn_size).contiguous().view(-1, self.t_attn_size, self.rnn_size)",
                            "Call"
                        ],
                        [
                            "pool_feats.new(1, 1).fill_(0)",
                            "Call"
                        ],
                        [
                            "segs_feat",
                            "Name"
                        ],
                        [
                            "torch.cat([m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)], dim=2)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.att_embed_aux(conv_feats)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.context_enc(conv_feats)[0]",
                            "Subscript"
                        ],
                        [
                            "conv_feats.masked_fill(sample_idx_mask, 0)",
                            "Call"
                        ],
                        [
                            "pool_feats.new(1, 1).fill_(0)",
                            "Call"
                        ],
                        [
                            "segs_feat",
                            "Name"
                        ],
                        [
                            "torch.cat([m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)], dim=2)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.att_embed_aux(conv_feats)",
                            "Call"
                        ],
                        [
                            "conv_feats.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.context_enc(conv_feats)[0]",
                            "Subscript"
                        ],
                        [
                            "conv_feats.masked_fill(sample_idx_mask, 0)",
                            "Call"
                        ],
                        [
                            "pool_feats.new(1, 1).fill_(0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_688": {
                "variable": {
                    "value": "conv_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m(c) for (m, c) in zip(self.att_embed, conv_feats_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_79": {
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_93": {
                "num_embeddings": {
                    "value": "self.detect_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.vis_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.seg_info_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_114": {
                "num_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "self.pool_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_153": {
                "variable": {
                    "value": "self.context_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.rnn_size",
                    "type": null,
                    "possible_values": []
                },
                "dropout": {
                    "value": "attn_drop",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.2",
                            "Constant"
                        ],
                        [
                            "0.2",
                            "Constant"
                        ],
                        [
                            "0.2",
                            "Constant"
                        ],
                        [
                            "0.2",
                            "Constant"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vis_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_160": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "cls_score_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pickle.load(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "variable": {
                    "value": "cls_score_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pickle.load(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xt.unsqueeze(2).expand(B, S, R, self.att_hid_size), att_feats.unsqueeze(1).expand(B, S, R, self.att_hid_size))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_348": {
                "variable": {
                    "value": "masked_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_mat_static",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sim_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.sim_mat_target(overlaps, gt_boxes[:, :, 5].data)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_349": {
                "variable": {
                    "value": "masked_sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(sim_mat_static, 1, sim_target)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(masked_sim, sim_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "sim_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sim_target > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_350": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(sim_mat_static, 1, sim_target)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(masked_sim, sim_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "masked_sim.new(masked_sim.size()).fill_(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_353": {
                "variable": {
                    "value": "sim_target_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.sim_mat_target(overlaps, gt_boxes[:, :, 5].data)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "sim_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sim_target > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_354": {
                "variable": {
                    "value": "sim_mat_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(sim_mat_static, dim=1)[1].unsqueeze(1).expand_as(sim_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "sim_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sim_target > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_456": {
                "variable": {
                    "value": "rnn_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in rnn_output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "h_att_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in h_att_output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_458": {
                "variable": {
                    "value": "att2_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in att2_weights]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "max_grd_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in max_grd_output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_464": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta * self.logit(rnn_output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_469": {
                "variable": {
                    "value": "xt_clamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_seq[:, 1:seq_cnt + 1, 0].clone() - self.vocab_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_620": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seq]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_621": {
                "variable": {
                    "value": "seqLogprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seqLogprobs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_622": {
                "variable": {
                    "value": "att2_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in att2_weights]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "nn.Linear(2048, self.rnn_size // 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "*args": {
                    "value": "nn.Linear(1024, self.rnn_size // 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "layer_norm_307": {
                "input": {
                    "value": "fc_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(segs_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size])), dim=-1)",
                            "Call"
                        ],
                        [
                            "fc_feats.view(batch_size, 1, self.fc_feat_size).expand(batch_size, self.seq_per_img, self.fc_feat_size).contiguous().view(-1, self.fc_feat_size)",
                            "Call"
                        ],
                        [
                            "self.fc_embed(fc_feats)",
                            "Call"
                        ],
                        [
                            "torch.mean(segs_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size])), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.fc_embed(fc_feats)",
                            "Call"
                        ],
                        [
                            "torch.mean(segs_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size])), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.fc_embed(fc_feats)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[self.fc_feat_size - self.seg_info_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "layer_norm_308": {
                "input": {
                    "value": "self.seg_info_embed(num[:, 3:7].float())",
                    "type": "Call",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.seg_info_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "frm_mask_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in frm_mask_output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "roi_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in roi_labels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "layer_norm_509": {
                "input": {
                    "value": "fc_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(segs_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size])), dim=-1)",
                            "Call"
                        ],
                        [
                            "fc_feats.view(batch_size, 1, self.fc_feat_size).expand(batch_size, self.seq_per_img, self.fc_feat_size).contiguous().view(-1, self.fc_feat_size)",
                            "Call"
                        ],
                        [
                            "self.fc_embed(fc_feats)",
                            "Call"
                        ],
                        [
                            "torch.mean(segs_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size])), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.fc_embed(fc_feats)",
                            "Call"
                        ],
                        [
                            "torch.mean(segs_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size])), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.fc_embed(fc_feats)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[self.fc_feat_size - self.seg_info_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "layer_norm_510": {
                "input": {
                    "value": "self.seg_info_embed(num[:, 3:7].float())",
                    "type": "Call",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.seg_info_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "layer_norm_639": {
                "input": {
                    "value": "fc_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(segs_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size])), dim=-1)",
                            "Call"
                        ],
                        [
                            "fc_feats.view(batch_size, 1, self.fc_feat_size).expand(batch_size, self.seq_per_img, self.fc_feat_size).contiguous().view(-1, self.fc_feat_size)",
                            "Call"
                        ],
                        [
                            "self.fc_embed(fc_feats)",
                            "Call"
                        ],
                        [
                            "torch.mean(segs_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size])), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.fc_embed(fc_feats)",
                            "Call"
                        ],
                        [
                            "torch.mean(segs_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(fc_feats, [self.fc_feat_size - self.seg_info_size]), F.layer_norm(self.seg_info_embed(num[:, 3:7].float()), [self.seg_info_size])), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.fc_embed(fc_feats)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[self.fc_feat_size - self.seg_info_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "layer_norm_640": {
                "input": {
                    "value": "self.seg_info_embed(num[:, 3:7].float())",
                    "type": "Call",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.seg_info_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_190": {
                "input": {
                    "value": "opt.glove_vg_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_190": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "(vis_classifiers, opt.glove_clss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_354": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_355": {
                "tensors": {
                    "value": "(sim_target_masked, sim_mat_masked)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "layer_norm_363": {
                "input": {
                    "value": "pool_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ppls_feat",
                            "Name"
                        ],
                        [
                            "self.ctx2pool_grd(pool_feats)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(pool_feats, [pool_feats.size(-1)]), F.layer_norm(loc_feats, [loc_feats.size(-1)]), F.layer_norm(label_feat, [label_feat.size(-1)])), 2)",
                            "Call"
                        ],
                        [
                            "pool_feats.view(batch_size, 1, rois_num, self.pool_feat_size).expand(batch_size, self.seq_per_img, rois_num, self.pool_feat_size).contiguous().view(-1, rois_num, self.pool_feat_size)",
                            "Call"
                        ],
                        [
                            "self.pool_embed(pool_feats)",
                            "Call"
                        ],
                        [
                            "self.obj_interact(pool_feats)",
                            "Call"
                        ],
                        [
                            "ppls_feat",
                            "Name"
                        ],
                        [
                            "self.ctx2pool_grd(pool_feats)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(pool_feats, [pool_feats.size(-1)]), F.layer_norm(loc_feats, [loc_feats.size(-1)]), F.layer_norm(label_feat, [label_feat.size(-1)])), 2)",
                            "Call"
                        ],
                        [
                            "self.pool_embed(pool_feats)",
                            "Call"
                        ],
                        [
                            "self.obj_interact(pool_feats)",
                            "Call"
                        ],
                        [
                            "ppls_feat",
                            "Name"
                        ],
                        [
                            "self.ctx2pool_grd(pool_feats)",
                            "Call"
                        ],
                        [
                            "torch.cat((F.layer_norm(pool_feats, [pool_feats.size(-1)]), F.layer_norm(loc_feats, [loc_feats.size(-1)]), F.layer_norm(label_feat, [label_feat.size(-1)])), 2)",
                            "Call"
                        ],
                        [
                            "self.pool_embed(pool_feats)",
                            "Call"
                        ],
                        [
                            "self.obj_interact(pool_feats)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[pool_feats.size(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "layer_norm_364": {
                "input": {
                    "value": "label_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sim_mat_static.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "sim_mat_static.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "sim_mat_static.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[label_feat.size(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "layer_norm_543": {
                "input": {
                    "value": "loc_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.loc_fc(Variable(loc_input))",
                            "Call"
                        ],
                        [
                            "self.loc_fc(Variable(loc_input))",
                            "Call"
                        ],
                        [
                            "self.loc_fc(Variable(loc_input))",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[loc_feats.size(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "layer_norm_544": {
                "input": {
                    "value": "label_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sim_mat_static.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "sim_mat_static.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "sim_mat_static.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[label_feat.size(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_615": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta * self.logit(rnn_output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "layer_norm_673": {
                "input": {
                    "value": "loc_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.loc_fc(Variable(loc_input))",
                            "Call"
                        ],
                        [
                            "self.loc_fc(Variable(loc_input))",
                            "Call"
                        ],
                        [
                            "self.loc_fc(Variable(loc_input))",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[loc_feats.size(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "layer_norm_674": {
                "input": {
                    "value": "label_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sim_mat_static.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "sim_mat_static.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "sim_mat_static.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[label_feat.size(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_733": {
                "input": {
                    "value": "att2_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_590": {
                "variable": {
                    "value": "(sampleLogprobs_tmp, it_tmp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_601": {
                "variable": {
                    "value": "it",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(logprobs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_191": {
                "input": {
                    "value": "opt.glove_clss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_191": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_438": {
                "input": {
                    "value": "1 - (box_mask | frm_mask)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_439": {
                "tensors": {
                    "value": "(frm_mask_on_prop.new(batch_size, 1).fill_(0.0), frm_mask_on_prop)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_487": {
                "input": {
                    "value": "att2_weights.view(seq_batch_size, seq_cnt, self.num_sampled_frm, self.num_prop_per_frm)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_488": {
                "input": {
                    "value": "ground_weights.view(seq_batch_size, seq_cnt, self.num_sampled_frm, self.num_prop_per_frm)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_597": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_600": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_600": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_700": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "beam_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 1)",
                            "Call"
                        ],
                        [
                            "opt.get('beam_size', 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_701": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "beam_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 1)",
                            "Call"
                        ],
                        [
                            "opt.get('beam_size', 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_354": {
                "input": {
                    "value": "sim_mat_static",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ],
                        [
                            "self._grounder(p_vis_word_embed, g_pool_feats, pnt_mask[:, 1:], bias)",
                            "Call"
                        ],
                        [
                            "F.softmax(sim_mat_static, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "misc/transformer.py": {
        "torch": {
            "zeros_38": {
                "variable": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*x.size()[1:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.selfattn(x, x, x)",
                            "Call"
                        ],
                        [
                            "x + positional_encodings_like(x)",
                            "BinOp"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "F.embedding(x, self.out.weight * math.sqrt(self.d_model))",
                            "Call"
                        ],
                        [
                            "x + positional_encodings_like(x)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "layer(x, enc)",
                            "Call"
                        ],
                        [
                            "hiddens[l][:, :t + 1]",
                            "Subscript"
                        ],
                        [
                            "self.layers[l].selfattn(hiddens[l][:, t], x, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_ratio",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_95": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_ratio",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_key",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_key",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_key",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_key",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_key",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_hidden",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_hidden, n_heads, drop_ratio) for i in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_ratio",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_197": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(d_model, d_hidden, n_heads, drop_ratio) for i in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_201": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_ratio",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "embedding_207": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.selfattn(x, x, x)",
                            "Call"
                        ],
                        [
                            "x + positional_encodings_like(x)",
                            "BinOp"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "F.embedding(x, self.out.weight * math.sqrt(self.d_model))",
                            "Call"
                        ],
                        [
                            "x + positional_encodings_like(x)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "layer(x, enc)",
                            "Call"
                        ],
                        [
                            "hiddens[l][:, :t + 1]",
                            "Subscript"
                        ],
                        [
                            "self.layers[l].selfattn(hiddens[l][:, t], x, x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.out.weight * math.sqrt(self.d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_45": {
                "variable": {
                    "value": "encodings[:, channel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "positions / 10000 ** (channel / x.size(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_48": {
                "variable": {
                    "value": "encodings[:, channel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "positions / 10000 ** ((channel - 1) / x.size(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.selfattn(x, x, x)",
                            "Call"
                        ],
                        [
                            "x + positional_encodings_like(x)",
                            "BinOp"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "F.embedding(x, self.out.weight * math.sqrt(self.d_model))",
                            "Call"
                        ],
                        [
                            "x + positional_encodings_like(x)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "layer(x, enc)",
                            "Call"
                        ],
                        [
                            "hiddens[l][:, :t + 1]",
                            "Subscript"
                        ],
                        [
                            "self.layers[l].selfattn(hiddens[l][:, t], x, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "input": {
                    "value": "x.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_280": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder.out(out)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "[self.attention(q, k, v) for (q, k, v) in zip(query, key, value)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_133": {
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_101": {
                "*size": {
                    "value": "key.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "key.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_101": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "input": {
                    "value": "dot_products / self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_227": {
                "input": {
                    "value": "Variable(encoding[0].data.new(B).long().fill_(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "embedW",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.out.weight * math.sqrt(self.d_model)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "embedding_231": {
                "input": {
                    "value": "prediction[:, t - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "embedW",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.out.weight * math.sqrt(self.d_model)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "misc/utils.py": {
        "torch": {
            "max_316": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps_copy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "overlaps.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_342": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_350": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "txt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[txt_mask.new(txt_mask.size(0), 1).fill_(1), txt_mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_130": {
                "variable": {
                    "value": "txt_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "txt_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_136": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "txt_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-torch.masked_select(txt_select, txt_mask.view(-1, 1))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_125": {
                "input": {
                    "value": "target >= self.vocab_size",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "masked_select_133": {
                "input": {
                    "value": "txt_select",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(txt_input, 1, target)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "txt_mask.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "txt_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_139": {
                "input": {
                    "value": "torch.masked_select(F.log_softmax(att2_weights, dim=2), att2_target.byte())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_142": {
                "input": {
                    "value": "torch.masked_select(F.log_softmax(ground_weights, dim=2), att2_target.byte())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_139": {
                "input": {
                    "value": "F.log_softmax(att2_weights, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "att2_target.byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_142": {
                "input": {
                    "value": "F.log_softmax(ground_weights, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "att2_target.byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_139": {
                "input": {
                    "value": "att2_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_142": {
                "input": {
                    "value": "ground_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "prepro/prepro_dic_anet.py": {
        "torch": {}
    }
}