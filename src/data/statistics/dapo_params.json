{
    "darl/learner/learner.py": {
        "tensorflow": {
            "placeholder_59": {
                "variable": {
                    "value": "self.lr_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_61": {
                "variable": {
                    "value": "trainer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_73": {
                "session": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "darl/learner/ppo.py": {
        "tensorflow": {
            "maximum_107": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "WEIGHT",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "CLIPRANGE",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "mean_return",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "R / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.head.pd.entropy() / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_122": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(OLDNEGLOGPAC - neglogpac, -10.0, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_123": {
                "variable": {
                    "value": "static_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stop_gradient(ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "variable": {
                    "value": "pi_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(pg_losses + reg_losses) / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_234": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pi_loss - entropy * FLAGS.ent_coef + vf_loss * FLAGS.vf_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_99": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stop_gradient_137": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_to_batch(V, flat=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_138": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_to_batch(Q, flat=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_148": {
                "variable": {
                    "value": "adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FLAGS.adv_coef * (adv - FLAGS.adv_off)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_156": {
                "variable": {
                    "value": "vf_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_219": {
                "variable": {
                    "value": "reg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reg_losses1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-augadv * ratio",
                            "BinOp"
                        ],
                        [
                            "-augadv * tf.stop_gradient(tf.minimum(ratio, FLAGS.acer_c)) * -neglogpac",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "reg_losses2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-augadv * tf.clip_by_value(ratio, 1.0 - CLIPRANGE, 1.0 + CLIPRANGE)",
                            "BinOp"
                        ],
                        [
                            "-augadv * tf.stop_gradient(tf.maximum(0.0, (ratio - FLAGS.acer_c) / ratio)) * -neglogpac",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_233": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_236": {
                "variable": {
                    "value": "(grads, _grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "FLAGS.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_86": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_93": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_122": {
                "t": {
                    "value": "OLDNEGLOGPAC - neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_123": {
                "input": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(tf.clip_by_value(OLDNEGLOGPAC - neglogpac, -10.0, 10.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_151": {
                "variable": {
                    "value": "adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FLAGS.adv_coef * (adv - FLAGS.adv_off)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_160": {
                "variable": {
                    "value": "vf_losses1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_161": {
                "variable": {
                    "value": "vf_losses2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpredclipped - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_229": {
                "input_tensor": {
                    "value": "tf.square(neglogpac - OLDNEGLOGPAC) / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "input_tensor": {
                    "value": "static_ratio * vf_losses / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_164": {
                "variable": {
                    "value": "vf_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred - V",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_176": {
                "variable": {
                    "value": "pg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pg_losses1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-adv * ratio",
                            "BinOp"
                        ],
                        [
                            "-adv * tf.stop_gradient(tf.minimum(ratio, FLAGS.acer_c)) * -neglogpac",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pg_losses2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-adv * tf.clip_by_value(ratio, 1.0 - CLIPRANGE, 1.0 + CLIPRANGE)",
                            "BinOp"
                        ],
                        [
                            "-adv * tf.stop_gradient(tf.maximum(0.0, (ratio - FLAGS.acer_c) / ratio)) * -neglogpac",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_218": {
                "t": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(tf.clip_by_value(OLDNEGLOGPAC - neglogpac, -10.0, 10.0))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_147": {
                "x": {
                    "value": "tf.maximum(tf.reduce_mean(tf.square(ADV)), 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_159": {
                "t": {
                    "value": "train_model.head.vf - OLDVPRED",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-CLIPRANGE",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIPRANGE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_162": {
                "input_tensor": {
                    "value": "static_ratio * tf.maximum(vf_losses1, vf_losses2) / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_216": {
                "input": {
                    "value": "reg",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-neglogpac",
                            "UnaryOp"
                        ],
                        [
                            "OLDNEGLOGPAC - neglogpac",
                            "BinOp"
                        ],
                        [
                            "truncIS(batch_to_seq(reg, nrollout, rollout_len, flat=True), seq_ratio, MS, gam=FLAGS.gamma, cbar=FLAGS.cbarD, rhobar=1.0)",
                            "Call"
                        ],
                        [
                            "seq_to_batch(reg, flat=True)",
                            "Call"
                        ],
                        [
                            "1 - tf.exp(tf.clip_by_value(neglogpac - OLDNEGLOGPAC, -3.0, 3.0))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.clip_by_value(0.5 * OLDNEGLOGPAC, -3.0, 3.0)) - tf.exp(tf.clip_by_value(0.5 * neglogpac, -3.0, 3.0))",
                            "BinOp"
                        ],
                        [
                            "1 - tf.exp(tf.clip_by_value(0.5 * (neglogpac - OLDNEGLOGPAC), -3.0, 3.0))",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.exp(tf.clip_by_value(-OLDNEGLOGPAC, -3.0, 3.0)) * tf.sign(ratio - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_226": {
                "input": {
                    "value": "reg",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-neglogpac",
                            "UnaryOp"
                        ],
                        [
                            "OLDNEGLOGPAC - neglogpac",
                            "BinOp"
                        ],
                        [
                            "truncIS(batch_to_seq(reg, nrollout, rollout_len, flat=True), seq_ratio, MS, gam=FLAGS.gamma, cbar=FLAGS.cbarD, rhobar=1.0)",
                            "Call"
                        ],
                        [
                            "seq_to_batch(reg, flat=True)",
                            "Call"
                        ],
                        [
                            "1 - tf.exp(tf.clip_by_value(neglogpac - OLDNEGLOGPAC, -3.0, 3.0))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.clip_by_value(0.5 * OLDNEGLOGPAC, -3.0, 3.0)) - tf.exp(tf.clip_by_value(0.5 * neglogpac, -3.0, 3.0))",
                            "BinOp"
                        ],
                        [
                            "1 - tf.exp(tf.clip_by_value(0.5 * (neglogpac - OLDNEGLOGPAC), -3.0, 3.0))",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.exp(tf.clip_by_value(-OLDNEGLOGPAC, -3.0, 3.0)) * tf.sign(ratio - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_229": {
                "x": {
                    "value": "neglogpac - OLDNEGLOGPAC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_147": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(ADV))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_150": {
                "x": {
                    "value": "tf.maximum(tf.reduce_mean(tf.square(Q - vpred)), 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "input_tensor": {
                    "value": "static_ratio * vf_losses / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_175": {
                "t": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(tf.clip_by_value(OLDNEGLOGPAC - neglogpac, -10.0, 10.0))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_201": {
                "x": {
                    "value": "tf.clip_by_value(neglogpac - OLDNEGLOGPAC, -3.0, 3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_221": {
                "input": {
                    "value": "reg",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-neglogpac",
                            "UnaryOp"
                        ],
                        [
                            "OLDNEGLOGPAC - neglogpac",
                            "BinOp"
                        ],
                        [
                            "truncIS(batch_to_seq(reg, nrollout, rollout_len, flat=True), seq_ratio, MS, gam=FLAGS.gamma, cbar=FLAGS.cbarD, rhobar=1.0)",
                            "Call"
                        ],
                        [
                            "seq_to_batch(reg, flat=True)",
                            "Call"
                        ],
                        [
                            "1 - tf.exp(tf.clip_by_value(neglogpac - OLDNEGLOGPAC, -3.0, 3.0))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.clip_by_value(0.5 * OLDNEGLOGPAC, -3.0, 3.0)) - tf.exp(tf.clip_by_value(0.5 * neglogpac, -3.0, 3.0))",
                            "BinOp"
                        ],
                        [
                            "1 - tf.exp(tf.clip_by_value(0.5 * (neglogpac - OLDNEGLOGPAC), -3.0, 3.0))",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.exp(tf.clip_by_value(-OLDNEGLOGPAC, -3.0, 3.0)) * tf.sign(ratio - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_222": {
                "input": {
                    "value": "tf.minimum(ratio, FLAGS.acer_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_223": {
                "input": {
                    "value": "tf.maximum(0.0, (ratio - FLAGS.acer_c) / ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "input_tensor": {
                    "value": "tf.square(ADV)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_150": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(Q - vpred))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_201": {
                "t": {
                    "value": "neglogpac - OLDNEGLOGPAC",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-3.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_203": {
                "x": {
                    "value": "tf.clip_by_value(0.5 * neglogpac, -3.0, 3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_222": {
                "x": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(tf.clip_by_value(OLDNEGLOGPAC - neglogpac, -10.0, 10.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FLAGS.acer_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_223": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "(ratio - FLAGS.acer_c) / ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_147": {
                "x": {
                    "value": "ADV",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_150": {
                "input_tensor": {
                    "value": "tf.square(Q - vpred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_162": {
                "x": {
                    "value": "vf_losses1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.square(vpred - R)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vf_losses2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.square(vpredclipped - R)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_203": {
                "t": {
                    "value": "0.5 * neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-3.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_205": {
                "x": {
                    "value": "tf.clip_by_value(0.5 * (neglogpac - OLDNEGLOGPAC), -3.0, 3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_150": {
                "x": {
                    "value": "Q - vpred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_180": {
                "input": {
                    "value": "tf.minimum(ratio, FLAGS.acer_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_181": {
                "input": {
                    "value": "tf.maximum(0.0, (ratio - FLAGS.acer_c) / ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_205": {
                "t": {
                    "value": "0.5 * (neglogpac - OLDNEGLOGPAC)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-3.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sign_207": {
                "x": {
                    "value": "ratio - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_180": {
                "x": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(tf.clip_by_value(OLDNEGLOGPAC - neglogpac, -10.0, 10.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FLAGS.acer_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_181": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "(ratio - FLAGS.acer_c) / ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_186": {
                "x": {
                    "value": "adv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ADV / (tf.sqrt(tf.maximum(tf.reduce_mean(tf.square(ADV)), 1e-08)) + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(FLAGS.adv_coef * (adv - FLAGS.adv_off))",
                            "Call"
                        ],
                        [
                            "(Q - vpred) / (tf.sqrt(tf.maximum(tf.reduce_mean(tf.square(Q - vpred)), 1e-08)) + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(FLAGS.adv_coef * (adv - FLAGS.adv_off))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_207": {
                "x": {
                    "value": "tf.clip_by_value(-OLDNEGLOGPAC, -3.0, 3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_188": {
                "x": {
                    "value": "tf.clip_by_value(adv, -3.0, 3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_207": {
                "t": {
                    "value": "-OLDNEGLOGPAC",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-3.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_188": {
                "t": {
                    "value": "adv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ADV / (tf.sqrt(tf.maximum(tf.reduce_mean(tf.square(ADV)), 1e-08)) + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(FLAGS.adv_coef * (adv - FLAGS.adv_off))",
                            "Call"
                        ],
                        [
                            "(Q - vpred) / (tf.sqrt(tf.maximum(tf.reduce_mean(tf.square(Q - vpred)), 1e-08)) + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(FLAGS.adv_coef * (adv - FLAGS.adv_off))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-3.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_190": {
                "x": {
                    "value": "tf.clip_by_value(adv, -3.0, 3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_190": {
                "t": {
                    "value": "adv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ADV / (tf.sqrt(tf.maximum(tf.reduce_mean(tf.square(ADV)), 1e-08)) + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(FLAGS.adv_coef * (adv - FLAGS.adv_off))",
                            "Call"
                        ],
                        [
                            "(Q - vpred) / (tf.sqrt(tf.maximum(tf.reduce_mean(tf.square(Q - vpred)), 1e-08)) + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(FLAGS.adv_coef * (adv - FLAGS.adv_off))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-3.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "darl/model/policies.py": {
        "tensorflow": {
            "cast_25": {
                "x": {
                    "value": "unscaled_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "scaled_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scaled_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(unscaled_images, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(scaled_images, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nrollout, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_72": {
                "variable": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "input_data.M",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_73": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "input_data.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_94": {
                "variable": {
                    "value": "self.wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "1 + tf.exp(fc(h, 'w', 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_94": {
                "x": {
                    "value": "fc(h, 'w', 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "darl/model/tf_model.py": {
        "tensorflow": {
            "convert_variables_to_constants_33": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(graph=graph, target=session_target, config=session_config)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "input_graph_def": {
                    "value": "sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "[name.split(':', 1)[0] for name in node_names]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_44": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "session_target",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "config": {
                    "value": "session_config",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GraphDef_41": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_88": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Graph_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_43": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), [name.split(':', 1)[0] for name in node_names])",
                            "Call"
                        ],
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prefix",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_97": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_105": {
                "name": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_110": {
                "name": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "dtype": {
                    "value": "p.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "p.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "darl/run_learner.py": {
        "tensorflow": {
            "Session_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "darl/utils/device.py": {
        "tensorflow": {
            "reduce_mean_57": {
                "variable": {
                    "value": "losses[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "variable": {
                    "value": "expanded_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "input_tensor": {
                    "value": "tf.squared_difference(t, params[0][j])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_55": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "params[0][j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "darl/utils/distributions.py": {
        "tensorflow": {
            "scalar_mul_62": {
                "variable": {
                    "value": "pdparam",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(1.0)",
                            "MethodArgument"
                        ]
                    ]
                },
                "x": {
                    "value": "pdparam",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fc(latent_vector, 'pi', self.ncat, init_scale=init_scale, init_bias=init_bias)",
                            "Call"
                        ],
                        [
                            "tf.scalar_mul(temperature, pdparam)",
                            "Call"
                        ],
                        [
                            "tf.concat([mean, mean * 0.0 + logstd], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "pdparam",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_197": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.w * self.h])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.logits.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_204": {
                "variable": {
                    "value": "ea0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.vec_logits - tf.reduce_max(self.vec_logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_205": {
                "variable": {
                    "value": "ea1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "other.logits - tf.reduce_max(other.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_206": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_207": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(a1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_212": {
                "variable": {
                    "value": "ea0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.vec_logits - tf.reduce_max(self.vec_logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_213": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "self.vec_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nvec, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.w * self.h])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.w * self.h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_253": {
                "variable": {
                    "value": "neglogp",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.vec_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.w * self.h])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_257": {
                "variable": {
                    "value": "ea0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.vec_logits - tf.reduce_max(self.vec_logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_258": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_260": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_264": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vec_logits - tf.log(-tf.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(self.vec_logits - tf.log(-tf.log(u)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, self.w, self.h])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.w, self.h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_274": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_277": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='logstd', shape=[1, self.size], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_300": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_324": {
                "variable": {
                    "value": "self.flat_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.param_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_329": {
                "variable": {
                    "value": "x_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.w * self.h])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.sample_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_49": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_60": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_192": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_198": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_209": {
                "input_tensor": {
                    "value": "p0 * (a0 - tf.log(z0) - a1 + tf.log(z1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_215": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_218": {
                "x": {
                    "value": "tf.argmax(self.logits - tf.log(-tf.log(u)), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_230": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_232": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x, axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_234": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_236": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cast_238": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_254": {
                "input_tensor": {
                    "value": "neglogp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=self.vec_logits, labels=x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_261": {
                "input_tensor": {
                    "value": "pixel_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(p0 * (tf.log(z0) - a0), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_288": {
                "input_tensor": {
                    "value": "other.logstd - self.logstd + (tf.square(self.std) + tf.square(self.mean - other.mean)) / (2.0 * tf.square(other.std)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_290": {
                "input_tensor": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_304": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_306": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.to_float(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_310": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_313": {
                "x": {
                    "value": "math_ops.less(u, self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_330": {
                "values": {
                    "value": "[pd.neglogp(x) for (pd, x) in zip(self.pd_list, x_list)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_332": {
                "values": {
                    "value": "[pd.entropy() for pd in self.pd_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_335": {
                "x": {
                    "value": "tf.concat([sample if len(sample.shape) == 2 else tf.reshape(sample, (-1, 1)) for sample in samples], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_202": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_203": {
                "input_tensor": {
                    "value": "other.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_211": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_217": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_218": {
                "input": {
                    "value": "self.logits - tf.log(-tf.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_230": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_238": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_256": {
                "input_tensor": {
                    "value": "self.vec_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_263": {
                "input": {
                    "value": "self.vec_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_285": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_306": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_308": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_310": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_312": {
                "input": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_313": {
                "x": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.vec_logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_335": {
                "values": {
                    "value": "[sample if len(sample.shape) == 2 else tf.reshape(sample, (-1, 1)) for sample in samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_368": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_226": {
                "value": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nvec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w * h",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_264": {
                "x": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.vec_logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_308": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_209": {
                "x": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_215": {
                "x": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_218": {
                "x": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.vec_logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_260": {
                "x": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_283": {
                "input_tensor": {
                    "value": "tf.square((x - self.mean) / self.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_284": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_292": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_306": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.w * self.h])",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_232": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.w * self.h])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_283": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_336": {
                "tensor": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_284": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.w * self.h])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_288": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "darl/utils/input.py": {
        "tensorflow": {
            "to_float_29": {
                "variable": {
                    "value": "processed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(input_x, ob_space.n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'Ob'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_46": {
                "variable": {
                    "value": "processed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None if input_data is None else input_data.X",
                            "IfExp"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size,), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=input_shape, dtype=ob_space.dtype, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_29": {
                "indices": {
                    "value": "input_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None if input_data is None else input_data.X",
                            "IfExp"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size,), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=input_shape, dtype=ob_space.dtype, name=name)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "ob_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(batch_size,) + ob_space.shape",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "ob_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'Ob'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "darl/utils/logger.py": {
        "tensorflow": {
            "summary_iterator_448": {
                "path": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fnames",
                            "Name"
                        ]
                    ]
                }
            },
            "as_bytes_154": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "darl/utils/tf_data.py": {
        "tensorflow": {
            "range_30": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_30": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parallel_interleave_31": {
                "map_func": {
                    "value": "lambda x: tf.data.Dataset.from_generator(generator_func, self.dtypes, self.shapes)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "n_worker",
                    "type": "Variable",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_dtype_27": {
                "type_value": {
                    "value": "each",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "prefetch_to_device_36": {
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "darl/utils/utils.py": {
        "tensorflow": {
            "exp_25": {
                "variable": {
                    "value": "ea0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits - tf.reduce_max(logits, 1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_26": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_105": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "sum(self.episode_rewards[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_118": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_137": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rhobar",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ratios[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_174": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rhobar",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ratio",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "moments_187": {
                "variable": {
                    "value": "(u, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_209": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "sum(self.episode_rewards[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_222": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_227": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_339": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(x, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx_flattened",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, x.shape[0]) * x.shape[1] + idx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "moments_363": {
                "variable": {
                    "value": "(_, vary)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u if u.shape == flat_shape else v",
                            "IfExp"
                        ],
                        [
                            "q.reshape(shape)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_364": {
                "variable": {
                    "value": "(_, varpred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q - qpred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_21": {
                "input": {
                    "value": "logits - tf.log(-tf.log(noise))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_28": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "wshape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[rf, rf, nin, nf]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "bias_var_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[nf] if one_dim_bias else [1, nf, 1, 1]",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(init_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbatch, nsteps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbatch, nsteps, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "wx",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_102": {
                "variable": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_110": {
                "variable": {
                    "value": "(i, f, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(x, wx) + tf.matmul(h, wh) + b",
                            "BinOp"
                        ],
                        [
                            "_ln(tf.matmul(x, wx), gx, bx) + _ln(tf.matmul(h, wh), gh, bh) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_111": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "range(nenvs)",
                            "Call"
                        ],
                        [
                            "range(0, self.nenvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_113": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_114": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tanh(u)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_146": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rhobar",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ratio",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_148": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ratio",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_180": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ratio",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_181": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rhobar",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ratio",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx]",
                            "Subscript"
                        ],
                        [
                            "ratios[idx - 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_variable_196": {
                "variable": {
                    "value": "wx",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_197": {
                "variable": {
                    "value": "gx",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gx",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "bx",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bx",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_200": {
                "variable": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_201": {
                "variable": {
                    "value": "gh",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gh",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_202": {
                "variable": {
                    "value": "bh",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bh",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_204": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_206": {
                "variable": {
                    "value": "gc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_207": {
                "variable": {
                    "value": "bc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_214": {
                "variable": {
                    "value": "(i, f, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(x, wx) + tf.matmul(h, wh) + b",
                            "BinOp"
                        ],
                        [
                            "_ln(tf.matmul(x, wx), gx, bx) + _ln(tf.matmul(h, wh), gh, bh) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_215": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "range(nenvs)",
                            "Call"
                        ],
                        [
                            "range(0, self.nenvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_216": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_217": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_218": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tanh(u)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_350": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(t), axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_24": {
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "p0 * tf.log(p0 + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_34": {
                "x": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('b', bias_var_shape, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, bshape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh], initializer=tf.constant_initializer(init_bias))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh * 4], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh * 4], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "bshape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 1, 1, nf]",
                            "List"
                        ],
                        [
                            "[1, nf, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "tf.concat(axis=1, values=h)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "tf.stack(values=h, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_188": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_339": {
                "tensor": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_350": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(t), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_21": {
                "x": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_72": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('w', wshape, initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_79": {
                "a": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('w', wshape, initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_86": {
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nsteps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(xs)",
                            "Call"
                        ],
                        [
                            "len(xs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "h",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_93": {
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "h",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_95": {
                "values": {
                    "value": "h",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_116": {
                "x": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "c * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(cbar, ratio)",
                            "Call"
                        ],
                        [
                            "tf.minimum(cbar, ratio)",
                            "Call"
                        ],
                        [
                            "c * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_132": {
                "tensor": {
                    "value": "ms[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "tensor": {
                    "value": "ms[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_220": {
                "x": {
                    "value": "_ln(c, gc, bc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_350": {
                "input_tensor": {
                    "value": "tf.square(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_28": {
                "x": {
                    "value": "z0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_31": {
                "x": {
                    "value": "p0 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_69": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_78": {
                "value": {
                    "value": "init_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "a": {
                    "value": "h",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "wh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_144": {
                "tensor": {
                    "value": "ms[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "tensor": {
                    "value": "ms[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_197": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_198": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_201": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_202": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_204": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_206": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_207": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_350": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_213": {
                "a": {
                    "value": "h",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "wh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}