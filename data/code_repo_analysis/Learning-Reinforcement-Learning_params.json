{
    "Experimental/IDK_DQN.py": {
        "torch": {
            "Normal_10": {
                "loc": {
                    "value": "output.loc.gather(1, action_b.unsqueeze(1)).squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "output.scale.gather(1, action_b.unsqueeze(1)).squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_28": {
                "loc": {
                    "value": "self.mu_head(state)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.sigma_head(state) + 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_62": {
                "loc": {
                    "value": "reward_b + self.config.gamma ** self.config.replay_buffer_nsteps * next_q_values.loc * (1 - done_b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "(self.config.gamma ** self.config.replay_buffer_nsteps) ** 0.5 * next_q_values.scale * (1 - done_b)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "LRL/PPO.py": {
        "torch": {
            "BatchSampler_59": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(range(self.env.num_envs * self.config.rollout))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_59": {
                "indices": {
                    "value": "range(self.env.num_envs * self.config.rollout)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LRL/TRPO.py": {
        "torch": {
            "parameters_to_vector_160": {
                "variable": {
                    "value": "policy_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[v.grad for v in self.policy.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "squeeze_160": {
                "variable": {
                    "value": "policy_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "vector_to_parameters_135": {
                "vec": {
                    "value": "Tensor(xnew)",
                    "type": "Call",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parameters_to_vector_171": {
                "parameters": {
                    "value": "self.policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vector_to_parameters_177": {
                "vec": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linesearch(parameters_to_vector(self.policy.parameters()), fullstep, gdotstepdir / lm)",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "self.policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LRL/utils.py": {
        "torch": {
            "is_available_18": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}