{
    "models/ssl.py": {
        "sklearn": {
            "train_test_split_520": {
                "variable": {
                    "value": "(idxs, unlabeled_idxs)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "np.arange(len(self.trainset))",
                    "possible_values": []
                },
                "train_size": {
                    "value": "self.hparams.train_size",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.hparams.data_split_seed",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "BaseSSL_23": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.hparams": {
                    "value": "hparams",
                    "possible_values": [
                        [
                            "parser.parse_args([], namespace=ckpt['hparams'])",
                            "Call"
                        ],
                        [
                            "parser.parse_args([], namespace=Namespace(**kwargs))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "possible_values": [
                        [
                            "datautils.ContinousSampler(train_batch_sampler, iters)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "test_batch_sampler",
                    "possible_values": []
                }
            },
            "cross_entropy_351": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "self.encoder.parameters()",
                            "Call"
                        ],
                        [
                            "self.model(h)",
                            "Call"
                        ],
                        [
                            "self.model(h)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "possible_values": []
                }
            },
            "BatchSampler_421": {
                "variable": {
                    "value": "trainsampler",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.object_trainsampler",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "DataLoader_428": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "trainsampler",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(self.trainset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.RandomSampler(self.trainset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(self.trainset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(self.trainset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.BatchSampler(self.object_trainsampler, batch_size=self.hparams.batch_size, drop_last=False)",
                            "Call"
                        ],
                        [
                            "datautils.ContinousSampler(trainsampler, iters)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_434": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "testsampler",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(self.testset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.RandomSampler(self.testset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(self.testset, shuffle=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(self.testset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.test_bs",
                    "possible_values": []
                }
            },
            "cross_entropy_579": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "self.encoder.parameters()",
                            "Call"
                        ],
                        [
                            "self.model(h)",
                            "Call"
                        ],
                        [
                            "self.model(h)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "possible_values": []
                }
            },
            "SGD_630": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "possible_values": [
                        [
                            "[{'params': [p for (name, p) in model.named_parameters() if not exclude_from_wd_and_adaptation(name)], 'weight_decay': args.weight_decay, 'layer_adaptation': True}, {'params': [p for (name, p) in model.named_parameters() if exclude_from_wd_and_adaptation(name)], 'weight_decay': 0.0, 'layer_adaptation': False}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "DistributedSampler_216": {
                "variable": {
                    "value": "trainsampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "possible_values": []
                }
            },
            "DistributedSampler_218": {
                "variable": {
                    "value": "testsampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "possible_values": []
                }
            },
            "RandomSampler_221": {
                "variable": {
                    "value": "trainsampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.trainset",
                    "possible_values": []
                }
            },
            "RandomSampler_222": {
                "variable": {
                    "value": "testsampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.testset",
                    "possible_values": []
                }
            },
            "load_304": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "f": {
                    "value": "hparams.encoder_ckpt",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hdim",
                    "possible_values": [
                        [
                            "self.encode(torch.ones(10, 3, 32, 32).to(device)).shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.encode(torch.ones(10, 3, 224, 224).to(device)).shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_383": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(embs), torch.LongTensor(labels))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.hparams.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.precompute_emb_bs",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "TensorDataset_398": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(embs)",
                    "possible_values": []
                }
            },
            "DistributedSampler_414": {
                "variable": {
                    "value": "trainsampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "possible_values": []
                }
            },
            "DistributedSampler_415": {
                "variable": {
                    "value": "testsampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "RandomSampler_417": {
                "variable": {
                    "value": "trainsampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.trainset",
                    "possible_values": []
                }
            },
            "SequentialSampler_418": {
                "variable": {
                    "value": "testsampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.testset",
                    "possible_values": []
                }
            },
            "ConcatDataset_559": {
                "variable": {
                    "value": "self.testset",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[datautils.DummyOutputWrapper(self.testset, 0), datautils.DummyOutputWrapper(self.trainset_unlabeled, 1)]",
                    "possible_values": []
                }
            },
            "Adam_636": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "possible_values": [
                        [
                            "[{'params': [p for (name, p) in model.named_parameters() if not exclude_from_wd_and_adaptation(name)], 'weight_decay': args.weight_decay, 'layer_adaptation': True}, {'params': [p for (name, p) in model.named_parameters() if exclude_from_wd_and_adaptation(name)], 'weight_decay': 0.0, 'layer_adaptation': False}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_156": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "models.encoder.EncodeProject(hparams)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.Linear(hdim, n_classes).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_547": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "any_594": {
                "input": {
                    "value": "d == didx",
                    "possible_values": []
                }
            },
            "SGD_641": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "possible_values": [
                        [
                            "[{'params': [p for (name, p) in model.named_parameters() if not exclude_from_wd_and_adaptation(name)], 'weight_decay': args.weight_decay, 'layer_adaptation': True}, {'params': [p for (name, p) in model.named_parameters() if exclude_from_wd_and_adaptation(name)], 'weight_decay': 0.0, 'layer_adaptation': False}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "LR",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_404": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_601": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "ones_324": {
                "*size": {
                    "value": "10",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "device_392": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "ones_327": {
                "*size": {
                    "value": "10",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "possible_values": []
                }
            }
        }
    },
    "models/encoder.py": {
        "torch": {
            "BatchNorm1dNoBias_10": {
                "base_class_0": {
                    "value": "torch.nn.BatchNorm1d",
                    "possible_values": []
                }
            },
            "EncodeProject_16": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_43": {
                    "variable": {
                        "value": "self.projection",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "OrderedDict(projection_layers)",
                        "possible_values": []
                    }
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "self.encoder_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.encoder_dim",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_37": {
                "num_features": {
                    "value": "self.encoder_dim",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "self.encoder_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/losses.py": {
        "torch": {
            "NTXent_39": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.tau": {
                    "value": "tau",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.multiplier": {
                    "value": "multiplier",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.distributed": {
                    "value": "distributed",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_12": {
                "variable": {
                    "value": "gather_z",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gather_z",
                    "possible_values": [
                        [
                            "[torch.zeros_like(z) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(gather_z, z)",
                            "Call"
                        ],
                        [
                            "torch.cat(gather_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "argsort_33": {
                "variable": {
                    "value": "argsort",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "z @ z.t()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "log_softmax_76": {
                "variable": {
                    "value": "logprob",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "z @ z.t()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_10": {
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "F.normalize(z, p=2, dim=1) / np.sqrt(self.tau)",
                            "BinOp"
                        ],
                        [
                            "torch.cat(z_sorted, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_18": {
                "input": {
                    "value": "logits.topk(k, dim=1)[1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sort_19": {
                "input": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.sort(labels, 1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.sort(labels, 1)[0]",
                            "Subscript"
                        ],
                        [
                            "(np.repeat(np.arange(n), m) + np.tile(np.arange(m) * n // m, n)) % n",
                            "BinOp"
                        ],
                        [
                            "labels.reshape(n, m)[:, 1:].reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sort_25": {
                "input": {
                    "value": "logits.topk(k, dim=1)[1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sort_26": {
                "input": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.sort(labels, 1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.sort(labels, 1)[0]",
                            "Subscript"
                        ],
                        [
                            "(np.repeat(np.arange(n), m) + np.tile(np.arange(m) * n // m, n)) % n",
                            "BinOp"
                        ],
                        [
                            "labels.reshape(n, m)[:, 1:].reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_sorted",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sort_34": {
                "input": {
                    "value": "torch.gather(torch.argsort(argsort, dim=1), 1, labels)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "k",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "possible_values": []
                }
            },
            "normalize_56": {
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "F.normalize(z, p=2, dim=1) / np.sqrt(self.tau)",
                            "BinOp"
                        ],
                        [
                            "torch.cat(z_sorted, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_34": {
                "input": {
                    "value": "torch.argsort(argsort, dim=1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.sort(labels, 1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.sort(labels, 1)[0]",
                            "Subscript"
                        ],
                        [
                            "(np.repeat(np.arange(n), m) + np.tile(np.arange(m) * n // m, n)) % n",
                            "BinOp"
                        ],
                        [
                            "labels.reshape(n, m)[:, 1:].reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "F.normalize(z, p=2, dim=1) / np.sqrt(self.tau)",
                            "BinOp"
                        ],
                        [
                            "torch.cat(z_sorted, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "argsort_34": {
                "input": {
                    "value": "argsort",
                    "possible_values": [
                        [
                            "torch.argsort(logits, dim=1, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Flatten_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_50": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "flatten_20": {
                "input": {
                    "value": "feat",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "self.dim",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_count_86": {
                "variable": {
                    "value": "ngpus",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_117": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % args.gpu",
                    "possible_values": []
                }
            },
            "set_device_114": {
                "device": {
                    "value": "gpu",
                    "possible_values": []
                }
            },
            "load_139": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda:%d' % args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_248": {
                "obj": {
                    "value": "ckpt",
                    "possible_values": [
                        [
                            "torch.load(args.ckpt, map_location=device)",
                            "Call"
                        ],
                        [
                            "model.get_ckpt()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "possible_values": [
                        [
                            "os.path.join(path, 'checkpoint.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoint-%d.pth.tar' % cur_iter)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils/datautils.py": {
        "torch": {
            "MultiplyBatchSampler_115": {
                "base_class_0": {
                    "value": "torch.utils.data.BatchSampler",
                    "possible_values": []
                }
            },
            "ContinousSampler_123": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.base_sampler": {
                    "value": "sampler",
                    "possible_values": []
                },
                "self.n_iterations": {
                    "value": "n_iterations",
                    "possible_values": []
                }
            },
            "DummyOutputWrapper_155": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.dummy": {
                    "value": "dummy",
                    "possible_values": []
                },
                "self.dataset": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "[kernel_size // 2, 0]",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "conv1.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(np.tile(blur_filter.reshape(kernel_size, 1, 1, 1), 3).transpose([3, 2, 0, 1]))",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, kernel_size // 2]",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "conv2.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(np.tile(blur_filter.reshape(kernel_size, 1, 1, 1), 3).transpose([3, 2, 1, 0]))",
                    "possible_values": []
                }
            },
            "clamp_112": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.arange(-radius, radius + 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils/lars_optimizer.py": {
        "torch": {
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "norm_61": {
                "variable": {
                    "value": "param_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "norm_62": {
                "variable": {
                    "value": "grad_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "p.grad.data",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "v_all",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v_all",
                    "possible_values": [
                        [
                            "[torch.zeros_like(v) for _ in range(dist.get_world_size())]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(v_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_37": {
                "input": {
                    "value": "v",
                    "possible_values": [
                        [
                            "v[None]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}