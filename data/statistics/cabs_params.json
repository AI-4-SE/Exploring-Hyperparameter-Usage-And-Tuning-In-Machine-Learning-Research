{
    "cabs.py": {
        "tensorflow": {
            "Variable_107": {
                "variable": {
                    "value": "xi_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_108": {
                "variable": {
                    "value": "loss_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_112": {
                "variable": {
                    "value": "input_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather(tf.shape(losses), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "convert_to_tensor_115": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._running_avg_constant",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "convert_to_tensor_116": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "convert_to_tensor_117": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "convert_to_tensor_118": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "convert_to_tensor_119": {
                "variable": {
                    "value": "bs_min",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._bs_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "convert_to_tensor_120": {
                "variable": {
                    "value": "bs_max",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._bs_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_132": {
                "variable": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(gv) for gv in grad_variances]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "round_141": {
                "variable": {
                    "value": "bs_new_rounded",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bs_new_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * lr * tf.divide(xi_avg, loss_avg + eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_142": {
                "variable": {
                    "value": "bs_new",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "bs_new_rounded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.round(bs_new_raw)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "bs_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(self._bs_min, dtype=input_dtype)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "bs_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(self._bs_max, dtype=input_dtype)",
                            "Call"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_143": {
                "variable": {
                    "value": "bs_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bs_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(bs_new_rounded, bs_min, bs_max)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(bs_new)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_106": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_154": {
                "variable": {
                    "value": "sgd_step",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*sgd_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "gather_112": {
                "params": {
                    "value": "tf.shape(losses)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_128": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "update_avgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[loss_avg.assign(mu * loss_avg + (1.0 - mu) * loss)]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_152": {
                "control_inputs": {
                    "value": "deps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bs_new]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_112": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_132": {
                "input_tensor": {
                    "value": "gv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "divide_138": {
                "x": {
                    "value": "xi_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_avg + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/cifar10_adaptive_batchsize.py": {
        "tensorflow": {
            "FixedLengthRecordReader_97": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_101": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "variable": {
                    "value": "result.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[result.depth, result.height, result.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_112": {
                "variable": {
                    "value": "result.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(record_bytes, [label_bytes], [image_bytes]), [result.depth, result.height, result.width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_input_producer_170": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_174": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_crop_183": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_186": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(reshaped_image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_190": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(reshaped_image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_192": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(reshaped_image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "per_image_standardization_196": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(reshaped_image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "string_input_producer_234": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_238": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "per_image_standardization_249": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(reshaped_image, width, height)",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_batch_135": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 2 * max_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN * min_fraction_of_examples_in_queue)",
                            "Call"
                        ],
                        [
                            "int(num_examples_per_epoch * min_fraction_of_examples_in_queue)",
                            "Call"
                        ],
                        [
                            "min_queue_examples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_142": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 2 * max_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_149": {
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.shuffle_batch([image, label], batch_size=batch_size, num_threads=num_preprocess_threads, capacity=min_queue_examples + 2 * max_batch_size, min_after_dequeue=min_queue_examples)",
                            "Call"
                        ],
                        [
                            "tf.train.batch([image, label], batch_size=batch_size, num_threads=num_preprocess_threads, capacity=min_queue_examples + 2 * max_batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_105": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_109": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.shuffle_batch([image, label], batch_size=batch_size, num_threads=num_preprocess_threads, capacity=min_queue_examples + 2 * max_batch_size, min_after_dequeue=min_queue_examples)",
                            "Call"
                        ],
                        [
                            "tf.train.batch([image, label], batch_size=batch_size, num_threads=num_preprocess_threads, capacity=min_queue_examples + 2 * max_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Exists_166": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "variable"
                        ],
                        [
                            "filenames",
                            "variable"
                        ]
                    ]
                }
            },
            "Exists_230": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "variable"
                        ],
                        [
                            "filenames",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "examples/models/cifar10_2conv_3dense.py": {
        "tensorflow": {
            "truncated_normal_11": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_15": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(images, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv1_pool, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_36": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.shape(images)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_3x3(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batch_size, 2304])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(reshape, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_fc1, W_fc2) + b_fc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_52": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "h_fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc2, W_fc3) + b_fc3",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(val, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_16": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(val, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_36": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_37": {
                "values": {
                    "value": "[batch_size, 2304]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "a": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_fc1, W_fc2) + b_fc2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([192, 10], 1 / 192.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_41": {
                "a": {
                    "value": "reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv2_pool, tf.stack([batch_size, 2304]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([dim, 384], 0.04)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_45": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(reshape, W_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([384, 192], 0.04)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/models/mnist_2conv_2dense.py": {
        "tensorflow": {
            "truncated_normal_9": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_13": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "X_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 784])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(X_image, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_fc1, W_fc2) + b_fc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_10": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.05, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_14": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.05, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_17": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "y * tf.log(h_fc2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([7 * 7 * 64, 1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_42": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1024, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_43": {
                "x": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.matmul(h_fc1, W_fc2) + b_fc2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/run_cabs_cifar10.py": {
        "tensorflow": {
            "Variable_28": {
                "variable": {
                    "value": "global_bs",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(initial_batch_size, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_37": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_38": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_40": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_28": {
                "value": {
                    "value": "initial_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/run_cabs_mnist.py": {
        "tensorflow": {
            "Session_36": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gradient_moment.py": {
        "tensorflow": {
            "gradients_100": {
                "variable": {
                    "value": "all_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "vs + consumer_outs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_154": {
                "variable": {
                    "value": "out_grad_pow",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_grad",
                            "Method Argument"
                        ],
                        [
                            "out_grad",
                            "Method Argument"
                        ],
                        [
                            "out_grad",
                            "Method Argument"
                        ],
                        [
                            "out_grad",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_155": {
                "variable": {
                    "value": "A_pow",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_182": {
                "variable": {
                    "value": "inp_pow",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_184": {
                "variable": {
                    "value": "f_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_185": {
                "variable": {
                    "value": "out_grad_pow",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_grad",
                            "Method Argument"
                        ],
                        [
                            "out_grad",
                            "Method Argument"
                        ],
                        [
                            "out_grad",
                            "Method Argument"
                        ],
                        [
                            "out_grad",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_backprop_filter_187": {
                "variable": {
                    "value": "raw_moment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_pow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(inp, mom)",
                            "Call"
                        ]
                    ]
                },
                "filter_sizes": {
                    "value": "f_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(f)",
                            "Call"
                        ]
                    ]
                },
                "out_backprop": {
                    "value": "out_grad_pow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ],
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ],
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.get_attr('strides')",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.get_attr('padding')",
                            "Call"
                        ]
                    ]
                },
                "use_cudnn_on_gpu": {
                    "value": "use_cudnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.get_attr('use_cudnn_on_gpu')",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.get_attr('data_format')",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_209": {
                "variable": {
                    "value": "out_grad_pow",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_grad",
                            "Method Argument"
                        ],
                        [
                            "out_grad",
                            "Method Argument"
                        ],
                        [
                            "out_grad",
                            "Method Argument"
                        ],
                        [
                            "out_grad",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_156": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.matmul(A_pow, out_grad_pow, transpose_a=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_189": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "raw_moment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_backprop_filter(inp_pow, f_shape, out_grad_pow, strides, padding, use_cudnn, data_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_213": {
                "variable": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_214": {
                "variable": {
                    "value": "sy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "raw_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(out_grad_pow, rx)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(b)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_223": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "raw_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(out_grad_pow, rx), sx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(out_grad_pow, ry), sy)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_82": {
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs",
                            "variable"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_105": {
                "name": {
                    "value": "grad_moms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_122": {
                "name": {
                    "value": "op.name + '_grad_mom'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_156": {
                "a": {
                    "value": "A_pow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(A, mom)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "out_grad_pow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ],
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ],
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_219": {
                "variable": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.inputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_220": {
                "variable": {
                    "value": "sy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_222": {
                "variable": {
                    "value": "raw_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(out_grad_pow, ry)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "sy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(y)",
                            "Call"
                        ],
                        [
                            "tf.shape(b)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_216": {
                "input_tensor": {
                    "value": "out_grad_pow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ],
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ],
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_array_ops._broadcast_gradient_args(sx, sy)",
                            "Call"
                        ],
                        [
                            "gen_array_ops._broadcast_gradient_args(sx, sy)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_222": {
                "input_tensor": {
                    "value": "out_grad_pow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ],
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ],
                        [
                            "tf.pow(out_grad, mom)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_array_ops._broadcast_gradient_args(sx, sy)",
                            "Call"
                        ],
                        [
                            "gen_array_ops._broadcast_gradient_args(sx, sy)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}