{
    "learn_edge.py": {
        "sklearn": {
            "average_precision_score_114": {
                "y_true": {
                    "value": "true_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([pos_prob.cpu().detach().numpy(), neg_prob.cpu().detach().numpy()])",
                            "Call"
                        ],
                        [
                            "np.concatenate([pos_prob.cpu().numpy(), neg_prob.cpu().numpy()])",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_116": {
                "y_true": {
                    "value": "true_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([pos_prob.cpu().detach().numpy(), neg_prob.cpu().detach().numpy()])",
                            "Call"
                        ],
                        [
                            "np.concatenate([pos_prob.cpu().numpy(), neg_prob.cpu().numpy()])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_272": {
                "y_true": {
                    "value": "true_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([pos_prob.cpu().detach().numpy(), neg_prob.cpu().detach().numpy()])",
                            "Call"
                        ],
                        [
                            "np.concatenate([pos_prob.cpu().numpy(), neg_prob.cpu().numpy()])",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_275": {
                "y_true": {
                    "value": "true_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([pos_prob.cpu().detach().numpy(), neg_prob.cpu().detach().numpy()])",
                            "Call"
                        ],
                        [
                            "np.concatenate([pos_prob.cpu().numpy(), neg_prob.cpu().numpy()])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_215": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(GPU)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "tgan.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BCELoss_220": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_316": {
                "obj": {
                    "value": "tgan.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "MODEL_SAVE_PATH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./saved_models/{args.prefix}-{args.agg_method}-{args.attn_mode}-{args.data}.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_253": {
                "variable": {
                    "value": "pos_label",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(src_l_cut)",
                            "Call"
                        ],
                        [
                            "len(src_l_cut)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(GPU))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_254": {
                "variable": {
                    "value": "neg_label",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(src_l_cut)",
                            "Call"
                        ],
                        [
                            "len(src_l_cut)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(GPU))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_301": {
                "obj": {
                    "value": "tgan.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "get_checkpoint_path(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_296": {
                "f": {
                    "value": "best_model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_checkpoint_path(early_stopper.best_epoch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "learn_node.py": {
        "sklearn": {
            "roc_auc_score_227": {
                "variable": {
                    "value": "auc_roc",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_df.label.values",
                            "Attribute"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(src_l))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_174": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(GPU)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_198": {
                "variable": {
                    "value": "lr_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "lr_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_202": {
                "variable": {
                    "value": "lr_criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_203": {
                "variable": {
                    "value": "lr_criterion_eval",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "222",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "80",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "80",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_192": {
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./saved_models/{args.prefix}-{args.agg_method}-{args.attn_mode}-{DATA}.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "src_label",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_l_cut",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_label_l[s_idx:e_idx]",
                            "Subscript"
                        ],
                        [
                            "label_l[s_idx:e_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_222": {
                "variable": {
                    "value": "src_label",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_l_cut",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_label_l[s_idx:e_idx]",
                            "Subscript"
                        ],
                        [
                            "label_l[s_idx:e_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph.py": {
        "torch": {}
    },
    "module.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim1 + dim2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim3",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim3",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim4",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_34": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_38": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.wq_node_transform(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(q, dim=2)",
                            "Call"
                        ],
                        [
                            "q.expand(q.shape[0], q.shape[1], len_k, q.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.cat([src_ext, src_e_ph, src_t], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -10000000000.0)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.weight_map(q_k).squeeze(dim=3)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask, -10000000000.0)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.wv_node_transform(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_69": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.wq_node_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.wk_node_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.wv_node_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_124": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LeakyReLU_128": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.weight_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_133": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_134": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_136": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_157": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.wq_node_transform(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(q, dim=2)",
                            "Call"
                        ],
                        [
                            "q.expand(q.shape[0], q.shape[1], len_k, q.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.cat([src_ext, src_e_ph, src_t], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w_ks(k).view(sz_b, len_k, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "k.permute(2, 0, 1, 3).contiguous().view(-1, len_k, d_k)",
                            "Call"
                        ],
                        [
                            "self.wk_node_transform(k).view(sz_b, len_k, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "k.permute(2, 0, 1, 3).contiguous().view(-1, len_k, d_k)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(k, dim=1)",
                            "Call"
                        ],
                        [
                            "k.expand(k.shape[0], len_q, k.shape[2], k.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.cat([seq, seq_e, seq_t], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "q_k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_180": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -10000000000.0)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.weight_map(q_k).squeeze(dim=3)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask, -10000000000.0)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.wv_node_transform(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_204": {
                "variable": {
                    "value": "self.basis_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(1 / 10 ** np.linspace(0, 9, time_dim)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "self.phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(time_dim).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_220": {
                "variable": {
                    "value": "harmonic",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "map_ts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ts * self.basis_freq.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "map_ts + self.phase.view(1, 1, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_230": {
                "variable": {
                    "value": "self.pos_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ts.size(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "expand_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_245": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ts.view(batch_size, seq_len, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_246": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(ts).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "out.expand(out.shape[0], out.shape[1], self.expand_dim)",
                            "Call"
                        ],
                        [
                            "self.merger.forward(hn, src)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_262": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.att_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "seq_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seq, seq_e, seq_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_286": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "seq_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seq, seq_e]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_366": {
                "variable": {
                    "value": "src_ext",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_367": {
                "variable": {
                    "value": "src_e_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src_ext",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(src, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_368": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_ext, src_e_ph, src_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_369": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seq, seq_e, seq_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_371": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask.repeat(n_head, 1, 1)",
                            "Call"
                        ],
                        [
                            "mask.repeat(n_head, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, dim=2)",
                            "Call"
                        ],
                        [
                            "mask.permute([0, 2, 1])",
                            "Call"
                        ],
                        [
                            "src_ngh_node_batch_th == 0",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "variable": {
                    "value": "self.n_feat_th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(n_feat.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_394": {
                "variable": {
                    "value": "self.e_feat_th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(e_feat.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_469": {
                "variable": {
                    "value": "src_node_batch_th",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "src_idx_l",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_470": {
                "variable": {
                    "value": "cut_time_l_th",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cut_time_l",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_472": {
                "variable": {
                    "value": "cut_time_l_th",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cut_time_l_th",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(cut_time_l).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(cut_time_l_th, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_409": {
                "variable": {
                    "value": "self.attn_model_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AttnModel(self.feat_dim, self.feat_dim, self.feat_dim, attn_mode=attn_mode, n_head=n_head, drop_out=drop_out) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_491": {
                "variable": {
                    "value": "src_ngh_node_batch_th",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "src_ngh_node_batch",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_492": {
                "variable": {
                    "value": "src_ngh_eidx_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "src_ngh_eidx_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(src_ngh_eidx_batch).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_495": {
                "variable": {
                    "value": "src_ngh_t_batch_th",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "src_ngh_t_batch_delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cut_time_l[:, np.newaxis] - src_ngh_t_batch",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_204": {
                "ndarray": {
                    "value": "1 / 10 ** np.linspace(0, 9, time_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "*size": {
                    "value": "time_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expand_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_393": {
                "ndarray": {
                    "value": "n_feat.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_394": {
                "ndarray": {
                    "value": "e_feat.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_417": {
                "variable": {
                    "value": "self.attn_model_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LSTMPool(self.feat_dim, self.feat_dim, self.feat_dim) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_474": {
                "input": {
                    "value": "cut_time_l_th",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(cut_time_l).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(cut_time_l_th, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_422": {
                "variable": {
                    "value": "self.attn_model_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MeanPool(self.feat_dim, self.feat_dim) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    }
}