{
    "evaluate.py": {
        "torch": {
            "DataLoader_16": {
                "variable": {
                    "value": "self.testloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "helmnet/architectures.py": {
        "torch": {
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "variable": {
                    "value": "self.update_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "variable": {
                    "value": "self.reset_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.out_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "x_in",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_gate(x_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_178": {
                "variable": {
                    "value": "reset",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reset_gate(x_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_179": {
                "variable": {
                    "value": "x_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_gate(torch.cat([input_tensor, h_cur * reset], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0], 2, self.domain_size, self.domain_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_285": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_347": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderBlock(self.features, state_size=self.state_channels, activation_function=self.activation_function, use_state=d < self.state_depth, domain_size=self.states_dimension[d]) for d in range(self.depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_361": {
                "variable": {
                    "value": "self.decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DoubleConv(self.features + self.features * (i < self.depth), self.features, activation_fun=self.activation_function) for i in range(self.depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_373": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ConvTranspose2d(self.features, self.features, kernel_size=8, padding=3, output_padding=0, stride=2) for i in range(self.depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "x_and_state",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], 2, x.shape[2], x.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_429": {
                "tensors": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.unflatten_state(states)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_458": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, inner_signals[d]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CELU_23": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_279": {
                "in_channels": {
                    "value": "inchannels + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_283": {
                "in_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CELU_29": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "[input_tensor, h_cur * reset]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "[output, self.state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_375": {
                "in_channels": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GELU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanhshrink_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "helmnet/dataloaders.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "dataset_path",
                    "type": "Name",
                    "possible_values": []
                },
                "map_location": {
                    "value": "{source_location: destination}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "self._all_sos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.all_sos_numpy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "self._all_sos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "helmnet/hybridnet.py": {
        "torch": {
            "cat_131": {
                "variable": {
                    "value": "self.sigmas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sigmax, sigmay]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sourceval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.source_module.spatial_map(0).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat(sourceval_array, 0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "2 * np.pi * np.random.rand(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "source_location",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(L + dL * torch.cos(theta)), int(L + dL * torch.sin(theta))]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_309": {
                "variable": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.test_loss_function(x) for x in output['residuals']]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(losses, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "wavefields",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack(x['wavefields'], 0) for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_327": {
                "variable": {
                    "value": "wavefields",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_355": {
                "variable": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_355": {
                "variable": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_380": {
                "variable": {
                    "value": "train_loss_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_380": {
                "variable": {
                    "value": "train_loss_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "cat_res",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output['residuals']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_535": {
                "variable": {
                    "value": "wavefield",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "k_sq.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k_sq.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "k_sq.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "k_sq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_566": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wavefield, 1000.0 * residual, sigmas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_638": {
                "variable": {
                    "value": "wavefields",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_iterations] + list(wavefield.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "sourceval",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sourceval_array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_221": {
                "dataset": {
                    "value": "sos_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_dataset(self.hparams.train_data_path)",
                            "Call"
                        ],
                        [
                            "get_dataset(self.hparams.validation_data_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min([self.hparams.batch_size, 32])",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "dataset": {
                    "value": "sos_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_dataset(self.hparams.train_data_path)",
                            "Call"
                        ],
                        [
                            "get_dataset(self.hparams.validation_data_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min([self.hparams.batch_size, 32])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_243": {
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_dataset(self.hparams.test_data_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min([self.hparams.batch_size, 32])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_253": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.95)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_value__174": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "self.hparams.gradient_clip_val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_271": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=self.hparams.learning_rate, betas=(0.9, 0.95), weight_decay=self.hparams.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "self.hparams.minimum_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_346": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.loss_function(output['residuals'][-1]).sqrt()",
                            "Call"
                        ],
                        [
                            "10000.0 * loss_f.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_356": {
                "input": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(x, dim=0).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([x['loss'] for x in outputs]).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "hardtanh_347": {
                "input": {
                    "value": "output['wavefields'][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "hardtanh_508": {
                "input": {
                    "value": "wavefield",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(hardtanh(wavefield) + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(k_sq.shape[0], 2, k_sq.shape[2], k_sq.shape[3], device=k_sq.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_328": {
                "tensors": {
                    "value": "x['wavefields']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cos_188": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(2 * np.pi * np.random.rand(1), device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_188": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(2 * np.pi * np.random.rand(1), device=self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "helmnet/replaybuffer.py": {
        "torch": {
            "stack_41": {
                "variable": {
                    "value": "wavefields",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "wavefields",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stack(wavefields, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "h_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stack(h_states, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "k_sqs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "k_sqs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stack(k_sqs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "residual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stack(residual, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "source",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "source",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stack(source, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "helmnet/source.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "self._abs_spatial_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.abs(complex_spatial_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_74": {
                "variable": {
                    "value": "source",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "helmnet/source_module.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "spatial_map",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.L, self.L)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "model_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dummy_for_device.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "fftshift_72": {
                "variable": {
                    "value": "sp_map_frequency",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.fft2(spatial_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft2_78": {
                "variable": {
                    "value": "complex_spatial_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.ifftshift(sp_map_frequency)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_79": {
                "variable": {
                    "value": "self._abs_spatial_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_spatial_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.fft.ifft2(torch.fft.ifftshift(sp_map_frequency))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "curr_time",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "self.omega * t + self.phase",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self._dummy_for_device.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "blackman_window_74": {
                "variable": {
                    "value": "blackman",
                    "type": "Name",
                    "possible_values": []
                },
                "window_length": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "model_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dummy_for_device.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "outer_75": {
                "variable": {
                    "value": "blackman_2d",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "blackman",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.blackman_window(self.L, device=model_device)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "blackman",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.blackman_window(self.L, device=model_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_115": {
                "variable": {
                    "value": "source",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fft2_72": {
                "input": {
                    "value": "spatial_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((self.L, self.L), device=model_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ifftshift_78": {
                "input": {
                    "value": "sp_map_frequency",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.fft.fftshift(torch.fft.fft2(spatial_map))",
                            "Call"
                        ],
                        [
                            "sp_map_frequency * blackman_2d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cos_113": {
                "input": {
                    "value": "curr_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(self.omega * t + self.phase, device=self._dummy_for_device.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_114": {
                "input": {
                    "value": "curr_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(self.omega * t + self.phase, device=self._dummy_for_device.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "helmnet/spectral.py": {
        "torch": {
            "view_as_real_41": {
                "variable": {
                    "value": "u_fft",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.fftn(torch.view_as_complex(u), dim=(-2, -1), norm='backward')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_60": {
                "variable": {
                    "value": "derivatives",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.ifftn(torch.view_as_complex(torch.stack([dx, dy, ddx, ddy], dim=0)), dim=(-2, -1), norm='backward')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_18": {
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_29": {
                "tensors": {
                    "value": "[rx, -ix]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "k_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * np.pi * np.linspace(-0.5, 0.5, size, endpoint=False)",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((k[size // 2:], k[:size // 2]))",
                            "Call"
                        ],
                        [
                            "kx",
                            "Name"
                        ],
                        [
                            "ky",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_141": {
                "variable": {
                    "value": "k_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "k_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-k_tensor, k_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "k_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(k).unsqueeze(0).unsqueeze(3).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([-k_tensor, k_tensor], dim=3)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "self.gamma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gamma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_188": {
                "variable": {
                    "value": "self.gamma_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gamma_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(gamma_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_224": {
                "variable": {
                    "value": "imag",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(gamma_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_225": {
                "variable": {
                    "value": "gamma_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_225": {
                "variable": {
                    "value": "gamma_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(gamma_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_228": {
                "variable": {
                    "value": "imag",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(gamma_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "gamma_y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_229": {
                "variable": {
                    "value": "gamma_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_283": {
                "variable": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "k",
                            "Name"
                        ],
                        [
                            "ky * 0.0",
                            "BinOp"
                        ],
                        [
                            "self.dx.k_tensor",
                            "Attribute"
                        ],
                        [
                            "torch.cat([zeros, kx], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_284": {
                "variable": {
                    "value": "kx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zeros, kx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "ky",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zeros, ky]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "kx_sq",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-kx_sq, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "ky_sq",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-ky_sq, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_289": {
                "variable": {
                    "value": "self.kx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "k",
                            "Name"
                        ],
                        [
                            "ky * 0.0",
                            "BinOp"
                        ],
                        [
                            "self.dx.k_tensor",
                            "Attribute"
                        ],
                        [
                            "torch.cat([zeros, kx], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_290": {
                "variable": {
                    "value": "self.ky",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ky",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kx * 0.0",
                            "BinOp"
                        ],
                        [
                            "k",
                            "Name"
                        ],
                        [
                            "self.dy.k_tensor",
                            "Attribute"
                        ],
                        [
                            "torch.cat([zeros, ky], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_291": {
                "variable": {
                    "value": "self.kx_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kx_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kx.pow(2)",
                            "Call"
                        ],
                        [
                            "torch.cat([-kx_sq, zeros], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_292": {
                "variable": {
                    "value": "self.ky_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ky_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ky.pow(2)",
                            "Call"
                        ],
                        [
                            "torch.cat([-ky_sq, zeros], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "variable": {
                    "value": "self.sigma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma_x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "variable": {
                    "value": "self.sigma_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma_y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_341": {
                "variable": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(self.ax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_342": {
                "variable": {
                    "value": "imag",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(self.ax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_343": {
                "variable": {
                    "value": "self.ax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_343": {
                "variable": {
                    "value": "self.ax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_345": {
                "variable": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(self.bx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "imag",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(self.bx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_347": {
                "variable": {
                    "value": "self.bx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_347": {
                "variable": {
                    "value": "self.bx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_349": {
                "variable": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(self.ay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "variable": {
                    "value": "imag",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(self.ay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_351": {
                "variable": {
                    "value": "self.ay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_351": {
                "variable": {
                    "value": "self.ay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_353": {
                "variable": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(self.by)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_354": {
                "variable": {
                    "value": "imag",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(self.by)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_355": {
                "variable": {
                    "value": "self.by",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_355": {
                "variable": {
                    "value": "self.by",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_358": {
                "variable": {
                    "value": "self.sigma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.sigma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_359": {
                "variable": {
                    "value": "self.sigma_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.sigma_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_360": {
                "variable": {
                    "value": "self.ax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.ax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_361": {
                "variable": {
                    "value": "self.bx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_362": {
                "variable": {
                    "value": "self.ay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.ay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_363": {
                "variable": {
                    "value": "self.by",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.by",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fftn_42": {
                "input": {
                    "value": "torch.view_as_complex(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "backward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_61": {
                "input": {
                    "value": "torch.view_as_complex(torch.stack([dx, dy, ddx, ddy], dim=0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "backward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_real_150": {
                "input": {
                    "value": "torch.fft.ifftn(torch.view_as_complex(torch.view_as_real(torch.fft.fftn(torch.view_as_complex(x), dim=(-2, -1), norm='backward')).flip(dims=[3]).mul(self.k)), dim=(-2, -1), norm='backward')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_complex_43": {
                "input": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "view_as_complex_62": {
                "input": {
                    "value": "torch.stack([dx, dy, ddx, ddy], dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifftn_150": {
                "input": {
                    "value": "torch.view_as_complex(torch.view_as_real(torch.fft.fftn(torch.view_as_complex(x), dim=(-2, -1), norm='backward')).flip(dims=[3]).mul(self.k))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "backward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "[dx, dy, ddx, ddy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_complex_151": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "view_as_real_151": {
                "input": {
                    "value": "torch.fft.fftn(torch.view_as_complex(x), dim=(-2, -1), norm='backward')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_151": {
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mul_151": {
                "input": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fftn_151": {
                "input": {
                    "value": "torch.view_as_complex(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "backward",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "helmnet/support_functions.py": {
        "torch": {
            "conj_29": {
                "variable": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(reference)",
                            "Call"
                        ],
                        [
                            "reference / reference[:, 82, 48].unsqueeze(1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.conj(reference)",
                            "Call"
                        ],
                        [
                            "reference * mask",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(kwave_results[sample + k * 20]).repeat(iterations, 1, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_results[k]).repeat(11, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_322": {
                "variable": {
                    "value": "sos_map",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "speedofsound",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matlab_variables['sos'].astype(float)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_322": {
                "variable": {
                    "value": "sos_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "variable": {
                    "value": "source",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "src_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10 * matlab_variables['src'].astype(float)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_323": {
                "variable": {
                    "value": "source",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "sos_map_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "sos_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sos",
                            "Name"
                        ],
                        [
                            "sos",
                            "Name"
                        ],
                        [
                            "sos",
                            "Name"
                        ],
                        [
                            "torch.tensor(speedofsound).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_421": {
                "variable": {
                    "value": "kwave_wavefield",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "kwave_solution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loadmat('examples/kwavedata512.mat')['p_kw']",
                            "Subscript"
                        ],
                        [
                            "matfile['p']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_441": {
                "variable": {
                    "value": "kwave_wavefield",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "kwave_solution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loadmat('examples/kwavedata512.mat')['p_kw']",
                            "Subscript"
                        ],
                        [
                            "matfile['p']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_443": {
                "variable": {
                    "value": "gmres_solutions",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "gmres_solution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matfile['p']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_451": {
                "variable": {
                    "value": "sos_map_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "sos_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sos",
                            "Name"
                        ],
                        [
                            "sos",
                            "Name"
                        ],
                        [
                            "sos",
                            "Name"
                        ],
                        [
                            "torch.tensor(speedofsound).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_451": {
                "variable": {
                    "value": "sos_map_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "stream",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "pytorch_wf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stream[:, -1, 0] + 1j * stream[:, -1, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(reference)",
                            "Call"
                        ],
                        [
                            "reference / reference[:, 82, 48].unsqueeze(1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.conj(reference)",
                            "Call"
                        ],
                        [
                            "reference * mask",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(kwave_results[sample + k * 20]).repeat(iterations, 1, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_results[k]).repeat(11, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_26": {
                "input": {
                    "value": "torch.isnan(sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "max_vals",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[x.max() for x in reference.abs()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "max_vals",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "stream",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "gmres_results[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "kwave_results[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "pytorch_wavefield",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x[:, 0] + 1j * x[:, 1]).detach().cpu() for x in output['wavefields']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "variable": {
                    "value": "kwave_wavefield",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "kwave_solution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loadmat('examples/kwavedata512.mat')['p_kw']",
                            "Subscript"
                        ],
                        [
                            "matfile['p']",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "pytorch_wavefield.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_343": {
                "variable": {
                    "value": "max_pt",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(kwave_wavefield)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "pytorch_wavefield",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, 0] + 1j * x[:, 1] for x in output['wavefields']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_467": {
                "variable": {
                    "value": "kwave_wavefield",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "kwave_solution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loadmat('examples/kwavedata512.mat')['p_kw']",
                            "Subscript"
                        ],
                        [
                            "matfile['p']",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "pytorch_wavefield.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_26": {
                "input": {
                    "value": "sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample / sample[:, 82, 48].unsqueeze(1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "sample * mask",
                            "BinOp"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "stream",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "pytorch_tensors[sample + k * 20, :, 0] + 1j * pytorch_tensors[sample + k * 20, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "reference",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "kwave_results[sample + k * 20]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conj_423": {
                "input": {
                    "value": "kwave_wavefield",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "conj_442": {
                "input": {
                    "value": "kwave_wavefield",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_445": {
                "input": {
                    "value": "kwave_field_norm.unsqueeze(0) - gmres_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_27": {
                "input": {
                    "value": "sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample / sample[:, 82, 48].unsqueeze(1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "sample * mask",
                            "BinOp"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "abs_343": {
                "input": {
                    "value": "kwave_wavefield",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "conj_347": {
                "input": {
                    "value": "kwave_wavefield",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_352": {
                "input": {
                    "value": "kwave_field_norm.unsqueeze(0) - model_field_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conj_470": {
                "input": {
                    "value": "kwave_wavefield",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution)",
                            "Call"
                        ],
                        [
                            "torch.tensor(kwave_solution, device=pytorch_wavefield.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_473": {
                "input": {
                    "value": "kwave_field_norm.unsqueeze(0) - model_field_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "sample - reference",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {}
    }
}