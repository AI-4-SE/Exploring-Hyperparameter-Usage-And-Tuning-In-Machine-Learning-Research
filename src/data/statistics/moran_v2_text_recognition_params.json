{
    "demo.py": {
        "torch": {
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./demo.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_36": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./demo.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "is_available_17": {
                "variable": {
                    "value": "self.cuda_flag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_tensors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_26": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_28": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "ConcatDataset_75": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_nips_dataset, train_cvpr_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset([train_nips_dataset, train_cvpr_dataset])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "dataset.randomSequentialSampler(train_dataset, opt.batchSize)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_89": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "MORAN",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MORAN",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MORAN(nc, nclass, opt.nh, opt.targetH, opt.targetW, BidirDecoder=opt.BidirDecoder, CUDA=opt.cuda)",
                            "Call"
                        ],
                        [
                            "MORAN(nc, nclass, opt.nh, opt.targetH, opt.targetW, BidirDecoder=opt.BidirDecoder, inputDataType='torch.FloatTensor', CUDA=opt.cuda)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(MORAN, device_ids=range(opt.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(opt.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "MORAN.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.MORAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.MORAN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adadelta_133": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "MORAN.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "MORAN.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "MORAN.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "[text, text_rev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "MORAN.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0}/{1}_{2}.pth'.format(opt.experiment, epoch, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "[text, text_rev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "MORAN.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0}/{1}_{2}.pth'.format(opt.experiment, i, str(acc)[:6])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_172": {
                "input": {
                    "value": "preds0_prob[text_begin:text_begin + len(sim_preds0[j].split('$')[0] + '$')]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_173": {
                "input": {
                    "value": "preds1_prob[text_begin:text_begin + len(sim_preds1[j].split('$')[0] + '$')]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/asrn_res.py": {
        "torch": {
            "LSTM_15": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nIn",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nHidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_35": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emition",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score(F.tanh(feats_proj + prev_hidden_proj).view(-1, hidden_size)).view(nT, nB)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_classes + 1, num_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_out, c_out, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.block0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_in, 32, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BidirectionalLSTM(512, nh, nh)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, cur_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, cur_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_in, c_out, 3, stride, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_in, c_out, 1, stride, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_84": {
                "*size": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_embeddings",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_in, c_out, 3, stride, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_in, c_out, 3, stride, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "in_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_199": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "num_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "text_length.data.max()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nB",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "nB",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "text_length.data.sum()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "nB",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "nB",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "nB * num_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "*size": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "text_length.data.sum()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_194": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_197": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "input": {
                    "value": "feats_proj + prev_hidden_proj",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "c_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/fracPickup.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.meshgrid(w_list, h_list, indexing='ij')",
                            "Call"
                        ],
                        [
                            "np.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.transpose(grid, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "np.tile(grid, [x_shape[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).type(x.data.type())",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_46": {
                "variable": {
                    "value": "x_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/moran.py": {
        "torch": {}
    },
    "models/morn.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2, 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.meshgrid(w_list, h_list, indexing='ij')",
                            "Call"
                        ],
                        [
                            "np.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.transpose(grid, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "np.tile(grid, [maxBatch, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).type(self.inputDataType)",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ],
                        [
                            "self.grid[:x.size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_62": {
                "variable": {
                    "value": "x_small",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.targetH, self.targetW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "offsets_posi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cnn(x_small)",
                            "Call"
                        ],
                        [
                            "self.cnn(x_rectified)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "offsets_nega",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-offsets",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_70": {
                "variable": {
                    "value": "offsets_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets_pool",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.pool(offsets_posi) - self.pool(offsets_nega)",
                            "BinOp"
                        ],
                        [
                            "self.pool(offsets_posi) - self.pool(offsets_nega)",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.meshgrid(w_list, h_list, indexing='ij')",
                            "Call"
                        ],
                        [
                            "np.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.transpose(grid, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "np.tile(grid, [maxBatch, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).type(self.inputDataType)",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ],
                        [
                            "self.grid[:x.size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_72": {
                "variable": {
                    "value": "offsets_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_x, grid_y + offsets_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_73": {
                "variable": {
                    "value": "x_rectified",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "offsets_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([grid_x, grid_y + offsets_grid], 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([grid_x, grid_y + offsets_grid], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_78": {
                "variable": {
                    "value": "offsets_posi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cnn(x_small)",
                            "Call"
                        ],
                        [
                            "self.cnn(x_rectified)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "offsets_nega",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-offsets",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "offsets_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_x, grid_y + offsets_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_85": {
                "variable": {
                    "value": "x_rectified",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "offsets_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([grid_x, grid_y + offsets_grid], 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([grid_x, grid_y + offsets_grid], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_89": {
                "variable": {
                    "value": "offsets_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets_grid.view(x.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_90": {
                "variable": {
                    "value": "(offsets_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets_grid.view(x.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_91": {
                "variable": {
                    "value": "(offsets_min, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets_grid.view(x.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_52": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.targetH, self.targetW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_82": {
                "input": {
                    "value": "offsets_pool",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.pool(offsets_posi) - self.pool(offsets_nega)",
                            "BinOp"
                        ],
                        [
                            "self.pool(offsets_posi) - self.pool(offsets_nega)",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.meshgrid(w_list, h_list, indexing='ij')",
                            "Call"
                        ],
                        [
                            "np.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.transpose(grid, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "np.tile(grid, [maxBatch, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(grid).type(self.inputDataType)",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ],
                        [
                            "self.grid[:x.size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_82": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "rand_6": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tools/dataset.py": {
        "torch": {
            "arange_103": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_108": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "tail",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self) % self.batch_size",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tools/utils.py": {
        "torch": {}
    }
}