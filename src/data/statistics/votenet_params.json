{
    "utils/tf_logger.py": {
        "tensorflow": {
            "FileWriter_19": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_23": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_46": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_56": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_73": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(demo_dir, 'pretrained_votenet_on_sunrgbd.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(demo_dir, 'pretrained_votenet_on_scannet.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess_point_cloud(point_cloud)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(point_cloud.astype(np.float32), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "DataLoader_93": {
                "variable": {
                    "value": "TEST_DATALOADER",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('val', num_points=NUM_POINT, augment=False, use_color=FLAGS.use_color, use_height=not FLAGS.no_height, use_v1=not FLAGS.use_sunrgbd_v2)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('val', num_points=NUM_POINT, augment=False, use_color=FLAGS.use_color, use_height=not FLAGS.no_height)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "FLAGS.shuffle_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "my_worker_init_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_98": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_122": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CHECKPOINT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/ap_helper.py": {
        "torch": {
            "argmax_62": {
                "variable": {
                    "value": "pred_heading_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_63": {
                "variable": {
                    "value": "pred_heading_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_heading_class.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_66": {
                "variable": {
                    "value": "pred_size_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_67": {
                "variable": {
                    "value": "pred_size_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_size_class.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_70": {
                "variable": {
                    "value": "pred_sem_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['sem_cls_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbone_module.py": {
        "torch": {
            "rand_140": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/boxnet.py": {
        "torch": {
            "from_numpy_110": {
                "variable": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_110": {
                "variable": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "ndarray": {
                    "value": "sample['point_clouds']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/dump_helper.py": {
        "torch": {
            "argmax_49": {
                "variable": {
                    "value": "pred_heading_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_50": {
                "variable": {
                    "value": "pred_heading_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_heading_class.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_53": {
                "variable": {
                    "value": "pred_size_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_54": {
                "variable": {
                    "value": "pred_size_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_size_class.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/loss_helper.py": {
        "torch": {
            "gather_53": {
                "variable": {
                    "value": "seed_gt_votes_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['vote_label_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_55": {
                "variable": {
                    "value": "seed_gt_votes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['vote_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed_inds.view(batch_size, num_seed, 1).repeat(1, 1, 3 * GT_VOTE_FACTOR)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_63": {
                "variable": {
                    "value": "(votes_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_92": {
                "variable": {
                    "value": "euclidean_dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "objectness_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_101": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor(OBJECTNESS_CLS_WEIGHTS).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_146": {
                "variable": {
                    "value": "heading_class_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_class_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ind1",
                            "variable"
                        ],
                        [
                            "end_points['object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_147": {
                "variable": {
                    "value": "criterion_heading_class",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_151": {
                "variable": {
                    "value": "heading_residual_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_residual_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ind1",
                            "variable"
                        ],
                        [
                            "end_points['object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_161": {
                "variable": {
                    "value": "size_class_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_class_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ind1",
                            "variable"
                        ],
                        [
                            "end_points['object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_162": {
                "variable": {
                    "value": "criterion_size_class",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_166": {
                "variable": {
                    "value": "size_residual_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residual_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment.unsqueeze(-1).repeat(1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "predicted_size_residual_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residuals_normalized'] * size_label_one_hot_tiled",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "mean_size_arr_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_size_arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_172": {
                "variable": {
                    "value": "mean_size_arr_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_173": {
                "variable": {
                    "value": "mean_size_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "size_label_one_hot_tiled * mean_size_arr_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "size_residual_normalized_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "huber_loss(predicted_size_residual_normalized - size_residual_label_normalized, delta=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_179": {
                "variable": {
                    "value": "sem_cls_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['sem_cls_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ind1",
                            "variable"
                        ],
                        [
                            "end_points['object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_180": {
                "variable": {
                    "value": "criterion_sem_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_246": {
                "variable": {
                    "value": "obj_pred_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['objectness_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "seed_gt_votes_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "objectness_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_140": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_142": {
                "input": {
                    "value": "box_label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['box_label_mask']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_149": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_158": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_164": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_176": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_182": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_223": {
                "input": {
                    "value": "objectness_label.float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_247": {
                "input": {
                    "value": "objectness_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_157": {
                "input": {
                    "value": "end_points['heading_residuals_normalized'] * heading_label_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_225": {
                "input": {
                    "value": "objectness_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/loss_helper_boxnet.py": {
        "torch": {
            "gather_44": {
                "variable": {
                    "value": "seed_gt_votes_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['vote_label_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_47": {
                "variable": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['seed_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "aggregated_vote_inds.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_48": {
                "variable": {
                    "value": "objectness_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(objectness_label.shape[0], objectness_label.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor(OBJECTNESS_CLS_WEIGHTS).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "variable": {
                    "value": "obj_pred_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['objectness_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "objectness_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((objectness_label.shape[0], objectness_label.shape[1])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_95": {
                "input": {
                    "value": "objectness_label.float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "objectness_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((objectness_label.shape[0], objectness_label.shape[1])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "objectness_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/proposal_module.py": {
        "torch": {
            "Conv1d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_74": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 + 3 + num_heading_bin * 2 + num_size_cluster * 4 + self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_75": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "ndarray": {
                    "value": "mean_size_arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_121": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_122": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_99": {
                "variable": {
                    "value": "sample_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['seed_xyz'].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(batch_size, self.num_proposal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/votenet.py": {
        "torch": {
            "norm_97": {
                "variable": {
                    "value": "features_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['fp2_features']",
                            "Subscript"
                        ],
                        [
                            "features.div(features_norm.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_133": {
                "variable": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "ndarray": {
                    "value": "sample['point_clouds']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_124": {
                "*size": {
                    "value": "(20000, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/voting_module.py": {
        "torch": {
            "Conv1d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "(3 + self.out_dim) * self.vote_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(seed_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_69": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/pointnet2_modules.py": {
        "torch": {
            "ModuleList_111": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_294": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_295": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_439": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_440": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_501": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_502": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_68": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_255": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_346": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_396": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_482": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_496": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_496": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_503": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_504": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_259": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_353": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_features, features2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_265": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * grouped_xyz.pow(2).sum(1, keepdim=False) / self.sigma ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_266": {
                "input": {
                    "value": "new_features * rbf.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/pointnet2_test.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[0, 1, 2], [1, 2, 3]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[1, 1, 1], [2, 2, 2]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradcheck_30": {
                "func": {
                    "value": "interpolate_func",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, feat_dim, m, requires_grad=True).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/pointnet2_utils.py": {
        "torch": {
            "zeros_333": {
                "variable": {
                    "value": "unique_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(idx.shape[0], idx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_140": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_336": {
                "variable": {
                    "value": "unique_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx[i_batch, i_region, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randint_339": {
                "variable": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_unique",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unique_ind.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.nsample - num_unique,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "all_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unique_ind, unique_ind[sample_ind])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/pytorch_utils.py": {
        "torch": {
            "Linear_240": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/setup.py": {
        "torch": {}
    },
    "scannet/scannet_detection_dataset.py": {
        "torch": {}
    },
    "sunrgbd/sunrgbd_detection_dataset.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "DataLoader_141": {
                "variable": {
                    "value": "TRAIN_DATALOADER",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TRAIN_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('train', num_points=NUM_POINT, augment=True, use_color=FLAGS.use_color, use_height=not FLAGS.no_height, use_v1=not FLAGS.use_sunrgbd_v2)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('train', num_points=NUM_POINT, augment=True, use_color=FLAGS.use_color, use_height=not FLAGS.no_height)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "my_worker_init_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_143": {
                "variable": {
                    "value": "TEST_DATALOADER",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('val', num_points=NUM_POINT, augment=False, use_color=FLAGS.use_color, use_height=not FLAGS.no_height, use_v1=not FLAGS.use_sunrgbd_v2)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('val', num_points=NUM_POINT, augment=False, use_color=FLAGS.use_color, use_height=not FLAGS.no_height)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "my_worker_init_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_149": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "BASE_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "FLAGS.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_169": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Detector(num_class=DATASET_CONFIG.num_class, num_heading_bin=DATASET_CONFIG.num_heading_bin, num_size_cluster=DATASET_CONFIG.num_size_cluster, mean_size_arr=DATASET_CONFIG.mean_size_arr, num_proposal=FLAGS.num_target, input_feature_dim=num_input_channel, vote_factor=FLAGS.vote_factor, sampling=FLAGS.cluster_sampling)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_180": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CHECKPOINT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpoint_path if FLAGS.checkpoint_path is not None else DEFAULT_CHECKPOINT_PATH",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_count_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_331": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(LOG_DIR, 'checkpoint.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/metric_util.py": {
        "torch": {
            "is_tensor_41": {
                "obj": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((labels.shape[0], labels.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_42": {
                "obj": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((pred.shape[0], pred.shape[1]))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/nn_distance.py": {
        "torch": {
            "abs_27": {
                "variable": {
                    "value": "abs_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.abs(pc1arr[0, i, :] - pc2arr[0, j, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_29": {
                "variable": {
                    "value": "quadratic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_59": {
                "variable": {
                    "value": "(dist1, idx1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(huber_loss(pc_diff, delta), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(pc_diff), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(pc_diff ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_60": {
                "variable": {
                    "value": "(dist2, idx2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(huber_loss(pc_diff, delta), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(pc_diff), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(pc_diff ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "pc1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc1arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "pc2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc2arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_54": {
                "variable": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "huber_loss(pc_diff, delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pc_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_56": {
                "input": {
                    "value": "pc_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc1_expand_tile - pc2_expand_tile",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}