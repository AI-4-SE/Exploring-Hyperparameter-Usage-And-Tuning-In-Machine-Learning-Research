{
    "preprocess_vctk.py": {
        "sklearn": {
            "train_test_split_48": {
                "variable": {
                    "value": "(train_indices, test_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "indices",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "random_state": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StandardScaler_192": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "speaker_embed.py": {
        "sklearn": {
            "TSNE_172": {
                "variable": {
                    "value": "tsne",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "mc_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(config.model_save_dir, f'{config.resume_iters}-sp.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convert.py": {
        "torch": {
            "device_233": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_248": {
                "f": {
                    "value": "G_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "join(config.model_save_dir, f'{config.resume_iters}-G.ckpt.ema')",
                            "Call"
                        ],
                        [
                            "join(config.model_save_dir, f'{config.resume_iters}-G.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_258": {
                "f": {
                    "value": "sp_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "join(config.model_save_dir, f'{config.resume_iters}-sp.ckpt.ema')",
                            "Call"
                        ],
                        [
                            "join(config.model_save_dir, f'{config.resume_iters}-sp.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "torch": {
            "DataLoader_385": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MyDataset(data_dir, speakers, min_length, few_shot=few_shot)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "mode == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main_stgan_adain.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PairDataset(config.train_data_dir, speakers, config.min_length, config.few_shot)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.mode == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "stgan_adain/model.py": {
        "torch": {
            "InstanceNorm2d_26": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.gamma_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_85": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn1(self.bn_tdnn1(F.relu(self.tdnn1(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn2(self.bn_tdnn2(F.relu(self.tdnn2(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn3(self.bn_tdnn3(F.relu(self.tdnn3(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn4(self.bn_tdnn4(F.relu(self.tdnn4(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn5(self.bn_tdnn5(F.relu(self.tdnn5(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_fc1(self.bn_fc1(F.relu(self.fc1(stats))))",
                            "Call"
                        ],
                        [
                            "self.dropout_fc2(self.bn_fc2(F.relu(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, 2304, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.down_conversion(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_conversion(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 256, 9, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, 2304, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.down_conversion(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_conversion(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 256, 9, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.conv_layer_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.fully_connected(x)",
                            "Call"
                        ],
                        [
                            "x[idx, c_.long()]",
                            "Subscript"
                        ],
                        [
                            "self.conv_layer_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(x)",
                            "Call"
                        ],
                        [
                            "self.dis_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, c)",
                            "Call"
                        ],
                        [
                            "x[idx, c_.long()]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - u) * (x - u)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_87": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c_src, c_trg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_116": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_124": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn1(self.bn_tdnn1(F.relu(self.tdnn1(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn2(self.bn_tdnn2(F.relu(self.tdnn2(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn3(self.bn_tdnn3(F.relu(self.tdnn3(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn4(self.bn_tdnn4(F.relu(self.tdnn4(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn5(self.bn_tdnn5(F.relu(self.tdnn5(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_fc1(self.bn_fc1(F.relu(self.fc1(stats))))",
                            "Call"
                        ],
                        [
                            "self.dropout_fc2(self.bn_fc2(F.relu(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, 2304, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.down_conversion(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_conversion(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 256, 9, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, 2304, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.down_conversion(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_conversion(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 256, 9, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.conv_layer_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.fully_connected(x)",
                            "Call"
                        ],
                        [
                            "x[idx, c_.long()]",
                            "Subscript"
                        ],
                        [
                            "self.conv_layer_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(x)",
                            "Call"
                        ],
                        [
                            "self.dis_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, c)",
                            "Call"
                        ],
                        [
                            "x[idx, c_.long()]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - u) * (x - u)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_126": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_149": {
                "variable": {
                    "value": "self.glu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_162": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * dim_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_164": {
                "variable": {
                    "value": "self.glu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_175": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_195": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_208": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_214": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(mean)",
                            "Call"
                        ],
                        [
                            "self.relu1(z)",
                            "Call"
                        ],
                        [
                            "self.linear2(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.down_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=36, out_channels=256, kernel_size=5, stride=1, padding=2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.down_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=256, out_channels=256, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.down_sample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=256, out_channels=256, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "variable": {
                    "value": "self.down_sample_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "self.down_sample_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_275": {
                "variable": {
                    "value": "self.unshared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_301": {
                "variable": {
                    "value": "out_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x + conv_out * z.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "out.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "std_302": {
                "variable": {
                    "value": "out_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x + conv_out * z.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "out.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_mean, out_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_312": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "res + [layer(out)]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(res, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_330": {
                "variable": {
                    "value": "self.tdnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "36",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_331": {
                "variable": {
                    "value": "self.bn_tdnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_332": {
                "variable": {
                    "value": "self.dropout_tdnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_334": {
                "variable": {
                    "value": "self.tdnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_335": {
                "variable": {
                    "value": "self.bn_tdnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_336": {
                "variable": {
                    "value": "self.dropout_tdnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_338": {
                "variable": {
                    "value": "self.tdnn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_339": {
                "variable": {
                    "value": "self.bn_tdnn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_340": {
                "variable": {
                    "value": "self.dropout_tdnn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_342": {
                "variable": {
                    "value": "self.tdnn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_343": {
                "variable": {
                    "value": "self.bn_tdnn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_344": {
                "variable": {
                    "value": "self.dropout_tdnn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_346": {
                "variable": {
                    "value": "self.tdnn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1500",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_347": {
                "variable": {
                    "value": "self.bn_tdnn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1500",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_348": {
                "variable": {
                    "value": "self.dropout_tdnn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_351": {
                "variable": {
                    "value": "self.bn_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_352": {
                "variable": {
                    "value": "self.dropout_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_354": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_355": {
                "variable": {
                    "value": "self.bn_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_356": {
                "variable": {
                    "value": "self.dropout_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_358": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_381": {
                "variable": {
                    "value": "stats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.mean(dim=2), x.std(dim=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_402": {
                "variable": {
                    "value": "self.down_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=256, kernel_size=5, stride=1, padding=2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.down_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "variable": {
                    "value": "self.down_sample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_414": {
                "variable": {
                    "value": "self.down_sample_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_418": {
                "variable": {
                    "value": "self.down_sample_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_446": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_474": {
                "variable": {
                    "value": "out_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x + conv_out * z.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "out.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "std_475": {
                "variable": {
                    "value": "out_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x + conv_out * z.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "out.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_mean, out_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_503": {
                "variable": {
                    "value": "self.down_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=36, out_channels=256, kernel_size=5, stride=2, padding=2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_507": {
                "variable": {
                    "value": "self.down_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=256, out_channels=256, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_511": {
                "variable": {
                    "value": "self.down_sample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=256, out_channels=256, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_515": {
                "variable": {
                    "value": "self.down_sample_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=256, out_channels=256, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_519": {
                "variable": {
                    "value": "self.down_sample_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_550": {
                "variable": {
                    "value": "self.unshared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_573": {
                "variable": {
                    "value": "out_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x + conv_out * z.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "out.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "std_574": {
                "variable": {
                    "value": "out_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x + conv_out * z.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "out.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample_5(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_mean, out_std], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_576": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_mean, out_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_584": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "res + [layer(out)]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(res, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_618": {
                "variable": {
                    "value": "self.down_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=256, kernel_size=(3, 9), padding=(1, 4), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_622": {
                "variable": {
                    "value": "self.down_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=512, kernel_size=(4, 8), stride=(2, 2), padding=(1, 3), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_627": {
                "variable": {
                    "value": "self.down_sample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=512, kernel_size=(4, 8), stride=(2, 2), padding=(1, 3), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_687": {
                "variable": {
                    "value": "self.up_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=256, out_channels=512, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_692": {
                "variable": {
                    "value": "self.up_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=256, out_channels=256, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_698": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_735": {
                "variable": {
                    "value": "self.down_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=256, kernel_size=(3, 9), padding=(1, 4), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_739": {
                "variable": {
                    "value": "self.down_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=512, kernel_size=(4, 8), stride=(2, 2), padding=(1, 3), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_744": {
                "variable": {
                    "value": "self.down_sample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=512, kernel_size=(4, 8), stride=(2, 2), padding=(1, 3), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_750": {
                "variable": {
                    "value": "self.down_conversion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=2304, out_channels=256, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_795": {
                "variable": {
                    "value": "self.up_conversion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2304",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_804": {
                "variable": {
                    "value": "self.up_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_805": {
                "variable": {
                    "value": "self.up_in_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2 * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_806": {
                "variable": {
                    "value": "self.up_relu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_809": {
                "variable": {
                    "value": "self.up_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_810": {
                "variable": {
                    "value": "self.up_in_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_811": {
                "variable": {
                    "value": "self.up_relu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_815": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_857": {
                "variable": {
                    "value": "self.down_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=128, kernel_size=(3, 9), padding=(1, 4), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_862": {
                "variable": {
                    "value": "self.down_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=256, kernel_size=(4, 8), stride=(2, 2), padding=(1, 3), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_868": {
                "variable": {
                    "value": "self.down_sample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=256, kernel_size=(4, 8), stride=(2, 2), padding=(1, 3), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_875": {
                "variable": {
                    "value": "self.down_conversion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=2304, out_channels=256, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_897": {
                "variable": {
                    "value": "self.up_conversion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2304",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_906": {
                "variable": {
                    "value": "self.up_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_907": {
                "variable": {
                    "value": "self.up_in_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_909": {
                "variable": {
                    "value": "self.up_relu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_911": {
                "variable": {
                    "value": "self.up_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_912": {
                "variable": {
                    "value": "self.up_in_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_914": {
                "variable": {
                    "value": "self.up_relu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_917": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_962": {
                "variable": {
                    "value": "self.conv_layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=256, kernel_size=(3, 3), stride=(1, 2), padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_970": {
                "variable": {
                    "value": "self.down_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_977": {
                "variable": {
                    "value": "self.down_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_984": {
                "variable": {
                    "value": "self.down_sample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_990": {
                "variable": {
                    "value": "self.down_sample_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=(1, 5), stride=(1, 2), padding=(0, 2), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_996": {
                "variable": {
                    "value": "self.fully_connected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_speakers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_1026": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn1(self.bn_tdnn1(F.relu(self.tdnn1(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn2(self.bn_tdnn2(F.relu(self.tdnn2(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn3(self.bn_tdnn3(F.relu(self.tdnn3(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn4(self.bn_tdnn4(F.relu(self.tdnn4(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn5(self.bn_tdnn5(F.relu(self.tdnn5(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_fc1(self.bn_fc1(F.relu(self.fc1(stats))))",
                            "Call"
                        ],
                        [
                            "self.dropout_fc2(self.bn_fc2(F.relu(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, 2304, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.down_conversion(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_conversion(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 256, 9, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, 2304, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.down_conversion(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_conversion(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 256, 9, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.conv_layer_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.fully_connected(x)",
                            "Call"
                        ],
                        [
                            "x[idx, c_.long()]",
                            "Subscript"
                        ],
                        [
                            "self.conv_layer_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(x)",
                            "Call"
                        ],
                        [
                            "self.dis_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, c)",
                            "Call"
                        ],
                        [
                            "x[idx, c_.long()]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_1118": {
                "variable": {
                    "value": "self.conv_layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=128, kernel_size=4, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1124": {
                "variable": {
                    "value": "self.down_sample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=256, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1129": {
                "variable": {
                    "value": "self.down_sample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=512, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1134": {
                "variable": {
                    "value": "self.down_sample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1139": {
                "variable": {
                    "value": "self.down_sample_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=512, kernel_size=4, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_1144": {
                "variable": {
                    "value": "self.dis_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_speakers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self.cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_speakers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_361": {
                "variable": {
                    "value": "self.cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_speakers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_454": {
                "variable": {
                    "value": "self.cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_speakers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_16": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn1(self.bn_tdnn1(F.relu(self.tdnn1(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn2(self.bn_tdnn2(F.relu(self.tdnn2(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn3(self.bn_tdnn3(F.relu(self.tdnn3(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn4(self.bn_tdnn4(F.relu(self.tdnn4(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_tdnn5(self.bn_tdnn5(F.relu(self.tdnn5(x))))",
                            "Call"
                        ],
                        [
                            "self.dropout_fc1(self.bn_fc1(F.relu(self.fc1(stats))))",
                            "Call"
                        ],
                        [
                            "self.dropout_fc2(self.bn_fc2(F.relu(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, 2304, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.down_conversion(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_conversion(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 256, 9, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, 2304, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.down_conversion(x)",
                            "Call"
                        ],
                        [
                            "self.residual_1(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_2(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_3(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_4(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_5(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_6(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_7(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_8(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.residual_9(x, c_src, c_trg)",
                            "Call"
                        ],
                        [
                            "self.up_conversion(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 256, 9, width_size // 4)",
                            "Call"
                        ],
                        [
                            "self.up_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_1(x)",
                            "Call"
                        ],
                        [
                            "self.up_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_in_2(x)",
                            "Call"
                        ],
                        [
                            "self.up_relu_2(x)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.conv_layer_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.fully_connected(x)",
                            "Call"
                        ],
                        [
                            "x[idx, c_.long()]",
                            "Subscript"
                        ],
                        [
                            "self.conv_layer_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_1(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_2(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_3(x)",
                            "Call"
                        ],
                        [
                            "self.down_sample_4(x)",
                            "Call"
                        ],
                        [
                            "self.dis_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, c)",
                            "Call"
                        ],
                        [
                            "x[idx, c_.long()]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv1d_254": {
                "in_channels": {
                    "value": "36",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_255": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_258": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_259": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_262": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_263": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_266": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_267": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_270": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_271": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_403": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_404": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_407": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_408": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_411": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_412": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_415": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_416": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_419": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_420": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_504": {
                "in_channels": {
                    "value": "36",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_505": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_508": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_509": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_512": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_513": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_516": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_517": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_520": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_521": {
                "negative_slope": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_619": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_620": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_623": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_624": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "aff",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GLU_625": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_628": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_629": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "aff",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GLU_630": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_688": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_689": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_690": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_693": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_694": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_695": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_736": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_737": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_740": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_741": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "aff",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GLU_742": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_745": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_746": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "aff",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GLU_747": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_751": {
                "in_channels": {
                    "value": "2304",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_757": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "aff",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_858": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_859": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_863": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_864": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "aff",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_865": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_869": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_870": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "aff",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_871": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_876": {
                "in_channels": {
                    "value": "2304",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_882": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "aff",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_963": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_964": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_971": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_972": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_973": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_978": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_979": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_980": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_985": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_986": {
                "num_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_987": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_991": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_992": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_1119": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_1120": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_1125": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_1126": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_1130": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_1131": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_1135": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_1136": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_1140": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_1141": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_278": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_370": {
                "input": {
                    "value": "self.tdnn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_371": {
                "input": {
                    "value": "self.tdnn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_372": {
                "input": {
                    "value": "self.tdnn3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_373": {
                "input": {
                    "value": "self.tdnn4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_374": {
                "input": {
                    "value": "self.tdnn5(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_382": {
                "input": {
                    "value": "self.fc1(stats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_383": {
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_554": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "stgan_adain/resnet_speaker_encoder.py": {
        "torch": {
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_73": {
                "variable": {
                    "value": "self.globalAvgPool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(round(planes / 16))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(round(planes / 16))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_77": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(32 * ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(64 * ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(128 * ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_139": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inplanes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_speakers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_196": {
                "variable": {
                    "value": "buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_198": {
                "variable": {
                    "value": "normp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "buffer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.pow(input, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_200": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(buffer, 1).add_(1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_202": {
                "variable": {
                    "value": "_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm.view(-1, 1).expand_as(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(256 * ratio * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_182": {
                "variable": {
                    "value": "self.fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embedding_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(256 * ratio * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_188": {
                "variable": {
                    "value": "self.dp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "stgan_adain/solver.py": {
        "torch": {
            "device_63": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.generator.parameters()) + list(self.sp_enc.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "self.d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_160": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_169": {
                "variable": {
                    "value": "dydx_l2norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(dydx ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "lerp_114": {
                "variable": {
                    "value": "param_test.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "param_test.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_170": {
                "input": {
                    "value": "(dydx_l2norm - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_186": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "g_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_128": {
                "f": {
                    "value": "d_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_129": {
                "f": {
                    "value": "sp_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-sp.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-sp.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "grad_161": {
                "outputs": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(y.size()).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_169": {
                "input": {
                    "value": "dydx ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_269": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_out_fake ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_274": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - d_out_src) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_324": {
                "variable": {
                    "value": "g_loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - g_out_src) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_328": {
                "variable": {
                    "value": "g_loss_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(mc_src - mc_reconst)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_332": {
                "variable": {
                    "value": "g_loss_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(mc_src - mc_fake_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_338": {
                "variable": {
                    "value": "g_loss_stid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(mc_fake_style_c - spk_c_trg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "g_opt_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-g_opt.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-g_opt.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_134": {
                "f": {
                    "value": "d_opt_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-d_opt.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-d_opt.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_409": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_410": {
                "obj": {
                    "value": "self.generator_ema.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g_path_ema",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-G.ckpt.ema'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_411": {
                "obj": {
                    "value": "self.discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-D.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_412": {
                "obj": {
                    "value": "self.sp_enc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "sp_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-sp.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-sp.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_413": {
                "obj": {
                    "value": "self.sp_enc_ema.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "sp_path_ema",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-sp.ckpt.ema'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_414": {
                "obj": {
                    "value": "self.g_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g_opt_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-g_opt.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-g_opt.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_415": {
                "obj": {
                    "value": "self.d_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d_opt_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, '{}-d_opt.ckpt'.format(resume_iters))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, '{}-d_opt.ckpt'.format(i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_328": {
                "input": {
                    "value": "mc_src - mc_reconst",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_332": {
                "input": {
                    "value": "mc_src - mc_fake_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_338": {
                "input": {
                    "value": "mc_fake_style_c - spk_c_trg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "stgan_adain/stylegan2_module.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(dim_out, dim_in).div_(lr_mul)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dim_out).fill_(bias_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_27": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, h, w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, dim_out, dim_in, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c_src, c_trg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rsqrt_61": {
                "variable": {
                    "value": "demod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_68": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, h, w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * (self.weight * s + beta)",
                            "BinOp"
                        ],
                        [
                            "(weight - demod_mean.view(batch_size, self.dim_out, 1, 1)) * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.dim_out, dim_in, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_93": {
                "variable": {
                    "value": "self.glu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_107": {
                "variable": {
                    "value": "demod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_108": {
                "variable": {
                    "value": "demod_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.view(batch_size, self.dim_out, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_115": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, h, w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * (self.weight * s + beta)",
                            "BinOp"
                        ],
                        [
                            "(weight - demod_mean.view(batch_size, self.dim_out, 1, 1)) * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.dim_out, dim_in, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_141": {
                "variable": {
                    "value": "self.glu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_155": {
                "variable": {
                    "value": "demod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_162": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, h, w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * (self.weight * s + beta)",
                            "BinOp"
                        ],
                        [
                            "(weight - demod_mean.view(batch_size, self.dim_out, 1, 1)) * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, dim_out, dim_in, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_198": {
                "variable": {
                    "value": "demod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_205": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, t)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch_size * in_channel, h, w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * (self.weight * s + beta)",
                            "BinOp"
                        ],
                        [
                            "(weight - demod_mean.view(batch_size, self.dim_out, 1, 1)) * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "self.scale * self.weight * s",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch_size, self.dim_out, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch_size * self.dim_out, self.dim_in, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_15": {
                "*size": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_85": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_133": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_178": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}