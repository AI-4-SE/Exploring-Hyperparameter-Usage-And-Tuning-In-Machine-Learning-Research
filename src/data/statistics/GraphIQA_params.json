{
    "datasets/folders.py": {
        "torch": {}
    },
    "datasets/kadid.py": {
        "torch": {
            "Tensor_34": {
                "variable": {
                    "value": "mos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_37": {
                "variable": {
                    "value": "level",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/utils.py": {
        "torch": {
            "DataLoader_43": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KadisFolder(dataset_path, None, None, None)",
                            "Call"
                        ],
                        [
                            "Kadid10k(dataset_dict, dataset_path)",
                            "Call"
                        ],
                        [
                            "KadidFolder(dataset_path, trainsz, patch_num, sel)",
                            "Call"
                        ],
                        [
                            "Koniq_10kFolder(dataset_path, trainsz, patch_num)",
                            "Call"
                        ],
                        [
                            "LIVEChallengeFolder(dataset_path, trainsz, patch_num)",
                            "Call"
                        ],
                        [
                            "CSIQFolder(dataset_path, trainsz, patch_num, sel)",
                            "Call"
                        ],
                        [
                            "LIVEFolder(dataset_path, trainsz, patch_num, sel)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "finetune.py": {
        "torch": {
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MSELoss_92": {
                "variable": {
                    "value": "MSE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Reg_Domain(do_emb_size=args.dosz, eg_emb_size=args.egsz, pretrain=False)",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net, device_ids=gpus_list)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(args.gpus))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_83": {
                "variable": {
                    "value": "pretained_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.ckpt)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/modules.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.feature_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.feature_extractor.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_102": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, in_dim, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, in_dim // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_171": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(A.mm(X))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W2(A.mm(X))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_94": {
                "*size": {
                    "value": "mean.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(mean.size()) if torch.cuda.is_available() else torch.FloatTensor(mean.size())",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[do_emb, eg_emb_eg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_151": {
                "in_features": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_185": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_norm(A, self_loop=True, symmetric=True)",
                            "Call"
                        ],
                        [
                            "cal_similarity(X)",
                            "Call"
                        ],
                        [
                            "graph_norm(A, self_loop=True, symmetric=True)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_76": {
                "n": {
                    "value": "do_emb.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "AdaptiveAvgPool2d_25": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2048, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, in_dim // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "[ins_emb, eg_emb_eg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain.py": {
        "torch": {
            "Adam_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MSELoss_96": {
                "variable": {
                    "value": "MSE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_97": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_84": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Reg_Domain(do_emb_size=args.dosz, eg_emb_size=args.egsz, pretrain=True)",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net, device_ids=gpus_list)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(args.gpus))",
                            "Call"
                        ]
                    ]
                }
            },
            "TripletMarginLoss_143": {
                "variable": {
                    "value": "tri_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "args.margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "pretained_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.ckpt)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/dgreg_utils.py": {
        "torch": {
            "softmax_33": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "remaining_scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_34": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(remaining_scores.view(-1), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_134": {
                "variable": {
                    "value": "x_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_134": {
                "variable": {
                    "value": "x_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "variable": {
                    "value": "x_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "variable": {
                    "value": "x_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_136": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(x, 0, 1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(x, 0, 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_136": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_145": {
                "variable": {
                    "value": "h_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad=(0, 1, 0, 0), mode='constant', value=0)[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(h_x, weight=h_kernel)",
                            "Call"
                        ],
                        [
                            "torch.triu(h_x, diagonal=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "h_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, -1])[None, None, None, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_146": {
                "variable": {
                    "value": "h_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad=(0, 1, 0, 0), mode='constant', value=0)[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(h_x, weight=h_kernel)",
                            "Call"
                        ],
                        [
                            "torch.triu(h_x, diagonal=1)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_150": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad=(0, 0, 1, 0), mode='constant', value=0)[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(v_x, weight=v_kernel)",
                            "Call"
                        ],
                        [
                            "torch.triu(v_x, diagonal=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "v_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[-1], [1]])[None, None, :].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_151": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad=(0, 0, 1, 0), mode='constant', value=0)[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(v_x, weight=v_kernel)",
                            "Call"
                        ],
                        [
                            "torch.triu(v_x, diagonal=1)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_29": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_82": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_out_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "folder + '/' + '{}_step_{}.pth'.format(name, step)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "gt_mos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_mos, mos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_score, score.cpu()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_126": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_159": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "A.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_167": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.pow(d, -0.5)",
                            "Call"
                        ],
                        [
                            "torch.pow(d, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_178": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.pow(d, -0.5)",
                            "Call"
                        ],
                        [
                            "torch.pow(d, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_143": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_148": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=p, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_174": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.pow(d, -0.5)",
                            "Call"
                        ],
                        [
                            "torch.pow(d, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_185": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.pow(d, -0.5)",
                            "Call"
                        ],
                        [
                            "torch.pow(d, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_171": {
                "variable": {
                    "value": "D[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_182": {
                "variable": {
                    "value": "D[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_144": {},
            "Tensor_149": {}
        }
    }
}