{
    "batched_synth_net.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "self.pe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((max_seq_len, d_model))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_85": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.first_rule_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, 1, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.no_example_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.concat_init_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context.sum(1), embed_rs.sum(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_235": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_236": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_237": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_238": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_246": {
                "variable": {
                    "value": "self.attn_concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_277": {
                "variable": {
                    "value": "(z_lengths, perm_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(z_lengths)",
                            "Call"
                        ],
                        [
                            "z_lengths.cuda()",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_282": {
                "variable": {
                    "value": "packed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(z_padded)",
                            "Call"
                        ],
                        [
                            "self.dropout(z_embed)",
                            "Call"
                        ],
                        [
                            "z_embed[perm_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "z_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(z_lengths)",
                            "Call"
                        ],
                        [
                            "z_lengths.cuda()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_285": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_output, rule_context.transpose(0, 1), context.transpose(0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_output, rule_context, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "xs_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(xs_padded, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "ys_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ys_padded, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "flat_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embed_xs, embed_ys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ],
                        [
                            "len(z_lengths)",
                            "Call"
                        ],
                        [
                            "input.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ],
                        [
                            "len(z_lengths)",
                            "Call"
                        ],
                        [
                            "input.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_n_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(support_exs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "rs_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rs_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rs_padded, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "embed_rs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ],
                        [
                            "len(z_lengths)",
                            "Call"
                        ],
                        [
                            "input.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "embed_rs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ],
                        [
                            "len(z_lengths)",
                            "Call"
                        ],
                        [
                            "input.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_n_rules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(rule_counts)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_86": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_87": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_295": {
                "tensors": {
                    "value": "(rule_context, rnn_output.transpose(0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_344": {
                "tensors": {
                    "value": "(rule_context, rnn_output.transpose(0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval_rb.py": {
        "torch": {
            "load_98": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate.py": {
        "torch": {
            "set_device_67": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "masked_cross_entropy.py": {
        "torch": {
            "arange_12": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_46": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_53": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "metanet_attn.py": {
        "torch": {
            "Linear_80": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_81": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "concat_by_step",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embed_xq_by_step, value_by_step)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_115": {
                "variable": {
                    "value": "context_last",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[context_by_step[len_xq[q] - 1, q, :] for q in range(nq)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(context_last, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_144": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_145": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_146": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_161": {
                "variable": {
                    "value": "(z_lengths, perm_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(z_lengths)",
                            "Call"
                        ],
                        [
                            "z_lengths.cuda()",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_165": {
                "variable": {
                    "value": "packed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(z_padded)",
                            "Call"
                        ],
                        [
                            "self.dropout(z_embed)",
                            "Call"
                        ],
                        [
                            "z_embed[perm_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "z_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(z_lengths)",
                            "Call"
                        ],
                        [
                            "z_lengths.cuda()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_169": {
                "variable": {
                    "value": "(hidden_by_step, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(Q.size(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_219": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_lin(Q).relu().view(Q.size(0), self.n_heads, Q.size(1), self.d_q)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_220": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=3)",
                            "Call"
                        ],
                        [
                            "attn_weights.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sqrt(query_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_221": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=3)",
                            "Call"
                        ],
                        [
                            "attn_weights.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_222": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=3)",
                            "Call"
                        ],
                        [
                            "attn_weights.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V_lin(V).relu().view(V.size(0), self.n_heads, V.size(1), self.d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(Q.size(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_249": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_lin(Q).relu().view(Q.size(0), self.n_heads, Q.size(1), self.d_q)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_270": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=3)",
                            "Call"
                        ],
                        [
                            "attn_weights.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sqrt(query_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=3)",
                            "Call"
                        ],
                        [
                            "attn_weights.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_275": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=3)",
                            "Call"
                        ],
                        [
                            "attn_weights.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V_lin(V).relu().view(V.size(0), self.n_heads, V.size(1), self.d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.Q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "q_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "q_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.K_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "q_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "q_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.V_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "v_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "v_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "variable": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(self.d_q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_326": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_lin(Q).relu().view(Q.size(0), self.n_heads, Q.size(1), self.d_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_329": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=3)",
                            "Call"
                        ],
                        [
                            "attn_weights.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sqrt(query_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_330": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=3)",
                            "Call"
                        ],
                        [
                            "attn_weights.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_331": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(Q, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.div(attn_weights, torch.sqrt(query_dim))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=3)",
                            "Call"
                        ],
                        [
                            "attn_weights.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V_lin(V).relu().view(V.size(0), self.n_heads, V.size(1), self.d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_350": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_351": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_352": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_353": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_359": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_360": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_output, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_429": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_430": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_431": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_174": {
                "variable": {
                    "value": "hidden_by_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_by_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_by_step.view(max_length, n, 2, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "torch.sum(hidden_by_step, 2)",
                            "Call"
                        ],
                        [
                            "hidden_by_step[:, unperm_idx, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_176": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.view(self.nlayers, 2, n, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "torch.sum(hidden, 1)",
                            "Call"
                        ],
                        [
                            "hidden[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "hidden[unperm_idx, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_220": {
                "input": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(float(Q.size(2)))",
                            "Call"
                        ],
                        [
                            "query_dim.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(float(Q.size(2)))",
                            "Call"
                        ],
                        [
                            "query_dim.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(float(self.d_q))",
                            "Call"
                        ],
                        [
                            "query_dim.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_270": {
                "input": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(float(Q.size(2)))",
                            "Call"
                        ],
                        [
                            "query_dim.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(float(Q.size(2)))",
                            "Call"
                        ],
                        [
                            "query_dim.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(float(self.d_q))",
                            "Call"
                        ],
                        [
                            "query_dim.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_329": {
                "input": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(float(Q.size(2)))",
                            "Call"
                        ],
                        [
                            "query_dim.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(float(Q.size(2)))",
                            "Call"
                        ],
                        [
                            "query_dim.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(float(self.d_q))",
                            "Call"
                        ],
                        [
                            "query_dim.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "load_27": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "adam_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint['adam_learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "adam_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint['adam_learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.adam_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.adam_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'encoder_state_dict': self.encoder.state_dict(), 'decoder_state_dict': self.decoder.state_dict(), 'input_lang': self.input_lang, 'output_lang': self.output_lang, 'prog_lang': self.prog_lang, 'episodes_validation': self.samples_val, 'episode_type': self.episode_type, 'emb_size': self.emb_size, 'dropout': self.dropout_p, 'nlayers': self.nlayers, 'pretrain_episode': self.pretrain_episode, 'rl_episode': self.rl_episode, 'adam_learning_rate': self.adam_learning_rate, 'max_length_eval': self.max_length_eval, 'num_pretrain_episodes': self.num_pretrain_episodes, 'num_rl_episodes': self.num_rl_episodes, 'positional': self.encoder.rule_positions}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyprob_distribution.py": {
        "torch": {
            "tensor_28": {
                "data": {
                    "value": "[1 - p, p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "[1.0] * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[1.0] * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[1.0] * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro_num_distribution.py": {
        "torch": {
            "tensor_14": {
                "data": {
                    "value": "lst.index(obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "lst.index(obs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scan_search.py": {
        "torch": {}
    },
    "syntax_robustfill.py": {
        "torch": {
            "Parameter_29": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size if self.no_inputs else 2 * self.hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.v_target + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.syntax_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.syntax_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.v_target + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.As",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Bilinear(self.hidden_size, self.hidden_size, 1, bias=False) for i in range(self.n_encoders)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "self.V.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "V_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "self.V.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "V_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "self.decoder_cell.weight_ih.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoder_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "self.syntax_V.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "syntax_V_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "self.syntax_V.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "syntax_V_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "self.syntax_decoder_cell.weight_ih.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "syntax_decoder_ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_249": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_582": {
                "variable": {
                    "value": "syntax_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.syntax_W(syntax_p_aug)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_596": {
                "variable": {
                    "value": "syntax_logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "syntax_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.syntax_V(syntax_m)",
                            "Call"
                        ],
                        [
                            "self.syntax_V(syntax_m)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_604": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V(m)",
                            "Call"
                        ],
                        [
                            "v + syntax_logsoftmax",
                            "BinOp"
                        ],
                        [
                            "v.masked_fill(1 - vocab_mask, float('-inf'))",
                            "Call"
                        ],
                        [
                            "self.V(m)",
                            "Call"
                        ],
                        [
                            "v + syntax_logsoftmax",
                            "BinOp"
                        ],
                        [
                            "v.masked_fill(1 - vocab_mask, float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_614": {
                "variable": {
                    "value": "target[k, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.encoder_init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.encoder_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRUCell(input_size=self.v_inputs[0] + 1, hidden_size=self.hidden_size, bias=True)] + [nn.GRUCell(input_size=self.v_inputs[i] + 1 + self.hidden_size, hidden_size=self.hidden_size, bias=True) for i in range(1, self.n_encoders)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GRUCell_49": {
                "variable": {
                    "value": "self.decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.v_target + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRUCell_51": {
                "variable": {
                    "value": "self.syntax_decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.v_target + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.encoder_init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ParameterList_55": {
                "variable": {
                    "value": "self.encoder_init_cs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[Parameter(torch.rand(1, self.hidden_size)) for i in range(len(self.v_inputs))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.encoder_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_62": {
                "variable": {
                    "value": "self.decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.v_target + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.decoder_init_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_65": {
                "variable": {
                    "value": "self.syntax_decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.v_target + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.syntax_decoder_init_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.syntax_decoder_init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_393": {
                "variable": {
                    "value": "syntax_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.syntax_W(syntax_p_aug)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_407": {
                "variable": {
                    "value": "syntax_logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "syntax_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.syntax_V(syntax_m)",
                            "Call"
                        ],
                        [
                            "self.syntax_V(syntax_m)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_413": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V(m)",
                            "Call"
                        ],
                        [
                            "v + syntax_logsoftmax",
                            "BinOp"
                        ],
                        [
                            "v.masked_fill(1 - vocab_mask, float('-inf'))",
                            "Call"
                        ],
                        [
                            "self.V(m)",
                            "Call"
                        ],
                        [
                            "v + syntax_logsoftmax",
                            "BinOp"
                        ],
                        [
                            "v.masked_fill(1 - vocab_mask, float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_16": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "matrix.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_588": {
                "input": {
                    "value": "torch.cat(FC, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_44": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_67": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_68": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bilinear_76": {
                "in1_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_tensor_256": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V(m)",
                            "Call"
                        ],
                        [
                            "v + syntax_logsoftmax",
                            "BinOp"
                        ],
                        [
                            "v.masked_fill(1 - vocab_mask, float('-inf'))",
                            "Call"
                        ],
                        [
                            "self.V(m)",
                            "Call"
                        ],
                        [
                            "v + syntax_logsoftmax",
                            "BinOp"
                        ],
                        [
                            "v.masked_fill(1 - vocab_mask, float('-inf'))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_399": {
                "input": {
                    "value": "torch.cat(FC, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_577": {
                "tensors": {
                    "value": "[h, self.attend_for_beam(self.n_encoders, j, h, H, attention_mask, max_length_inputs, batch_size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_578": {
                "input": {
                    "value": "self.W(p_aug)[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_588": {
                "tensors": {
                    "value": "FC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "data": {
                    "value": "torch.rand(1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_61": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_inputs[i] + 1 + (self.hidden_size if i > 0 else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_365": {
                "tensors": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_388": {
                "tensors": {
                    "value": "[h, attend(self.n_encoders, j, h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_389": {
                "input": {
                    "value": "self.W(p_aug)[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_399": {
                "tensors": {
                    "value": "FC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_414": {
                "input": {
                    "value": "logsoftmax.data.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_568": {
                "input": {
                    "value": "scores[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_46": {
                "input_size": {
                    "value": "self.v_inputs[0] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRUCell_47": {
                "input_size": {
                    "value": "self.v_inputs[i] + 1 + self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_56": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_342": {
                "input": {
                    "value": "scores[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "[inputs_scatter[i][j][k, :, :], attend(i, j, h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "synthTrain.py": {
        "torch": {
            "is_available_31": {
                "variable": {
                    "value": "args.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[model.prog_lang.symbol2index[SOS_token]] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Categorical_67": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "test_rb.py": {
        "torch": {
            "load_61": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.save_path)",
                            "Call"
                        ],
                        [
                            "SyntaxCheckingRobustFill((input_lang.symbols, output_lang.symbols), prog_lang.symbols, hidden_size=512, embedding_size=128, max_length=50)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.save_path)",
                            "Call"
                        ],
                        [
                            "SyntaxCheckingRobustFill((input_lang.symbols, output_lang.symbols), prog_lang.symbols, hidden_size=512, embedding_size=128, max_length=50)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_path + str(m.iter)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "tensor_67": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[model.prog_lang.symbol2index[SOS_token]] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "variable": {
                    "value": "target_batches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([sample['g_padded'] for sample in samples], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "all_decoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "model.decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__115": {
                "variable": {
                    "value": "encoder_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__116": {
                "variable": {
                    "value": "decoder_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "[sample['g_padded'] for sample in samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_101": {
                "input": {
                    "value": "all_decoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(max_target_length, batch_size, model.decoder.output_size)",
                            "Call"
                        ],
                        [
                            "all_decoder_outputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_102": {
                "input": {
                    "value": "target_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.cat([sample['g_padded'] for sample in samples], 0), 0, 1)",
                            "Call"
                        ],
                        [
                            "target_batches.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_metanet_attn.py": {
        "torch": {
            "is_available_19": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "z_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pad_seq(z, max_len) for z in z_eos]",
                            "ListComp"
                        ],
                        [
                            "[lang.variableFromSymbols(z, add_eos=False).unsqueeze(0) for z in z_padded]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(z_padded, dim=0)",
                            "Call"
                        ],
                        [
                            "z_padded.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[output_lang.symbol2index[SOS_token]] * nq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[output_lang.symbol2index[SOS_token]] * nq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_302": {
                "variable": {
                    "value": "target_batches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample['yq_padded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "variable": {
                    "value": "all_decoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sample['yq'])",
                            "Call"
                        ],
                        [
                            "len(sample['yq'])",
                            "Call"
                        ],
                        [
                            "len(input_patterns)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__331": {
                "variable": {
                    "value": "encoder_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50.0",
                            "float"
                        ]
                    ]
                }
            },
            "clip_grad_norm__332": {
                "variable": {
                    "value": "decoder_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50.0",
                            "float"
                        ]
                    ]
                }
            },
            "load_582": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_out_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.fn_out_model",
                            "Attribute"
                        ],
                        [
                            "'net_' + episode_type + '.tar'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(dir_model, fn_out_model)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_324": {
                "input": {
                    "value": "all_decoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((nq, max_length), dtype=int)",
                            "Call"
                        ],
                        [
                            "torch.zeros(max_target_length, nq, decoder.output_size)",
                            "Call"
                        ],
                        [
                            "all_decoder_outputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_325": {
                "input": {
                    "value": "target_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(sample['yq_padded'], 0, 1)",
                            "Call"
                        ],
                        [
                            "target_batches.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_464": {
                "variable": {
                    "value": "encoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "adam_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_465": {
                "variable": {
                    "value": "decoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "adam_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_487": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_out_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.fn_out_model",
                            "Attribute"
                        ],
                        [
                            "'net_' + episode_type + '.tar'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(dir_model, fn_out_model)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_516": {
                "variable": {
                    "value": "encoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "adam_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_517": {
                "variable": {
                    "value": "decoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "adam_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_device_444": {
                "device": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_571": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'encoder_state_dict': encoder.state_dict(), 'decoder_state_dict': decoder.state_dict(), 'input_lang': input_lang, 'output_lang': output_lang, 'episodes_validation': samples_val, 'episode_type': episode_type, 'emb_size': emb_size, 'dropout': dropout_p, 'nlayers': nlayers, 'episode': episode, 'disable_memory': disable_memory, 'disable_recon_loss': disable_recon_loss, 'use_attention': use_attention, 'max_length_eval': max_length_eval, 'num_episodes': num_episodes, 'args': args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fn_out_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.fn_out_model",
                            "Attribute"
                        ],
                        [
                            "'net_' + episode_type + '.tar'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(dir_model, fn_out_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_570": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'encoder_state_dict': encoder.state_dict(), 'decoder_state_dict': decoder.state_dict(), 'input_lang': input_lang, 'output_lang': output_lang, 'episodes_validation': samples_val, 'episode_type': episode_type, 'emb_size': emb_size, 'dropout': dropout_p, 'nlayers': nlayers, 'episode': episode, 'disable_memory': disable_memory, 'disable_recon_loss': disable_recon_loss, 'use_attention': use_attention, 'max_length_eval': max_length_eval, 'num_episodes': num_episodes, 'args': args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fn_out_model + '_' + str(episode)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "current_device_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "cat_107": {
                "variable": {
                    "value": "z_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pad_seq(z, max_len) for z in z_eos]",
                            "ListComp"
                        ],
                        [
                            "[lang.variableFromSymbols(z, add_eos=False).unsqueeze(0) for z in z_padded]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(z_padded, dim=0)",
                            "Call"
                        ],
                        [
                            "z_padded.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}