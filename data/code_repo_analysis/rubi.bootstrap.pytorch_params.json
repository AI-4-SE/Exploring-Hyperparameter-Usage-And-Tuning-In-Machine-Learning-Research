{
    "rubi/datasets/vqa2.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "item_rcnn",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_rcnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.dir_rcnn, '{}.pth'.format(item['image_name']))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "item[question]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "question['question_wids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "item[lengths]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(question['question_wids'])]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.image_features_train['att'][index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "item[class_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[item['answer_id']]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.image_features_val['att'][index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rubi/datasets/vqacp2.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "item_rcnn",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_rcnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.dir_rcnn, '{}.pth'.format(item['image_name']))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_96": {
                "variable": {
                    "value": "visual",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.dir_vgg16, 'train', filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dir_vgg16, 'val', filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.image_features_train['att'][index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.image_features_val['att'][index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rubi/models/criterions/rubi_criterion.py": {
        "torch": {
            "CrossEntropyLoss_15": {
                "variable": {
                    "value": "self.fusion_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "self.question_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rubi/models/metrics/vqa_rubi_metrics.py": {
        "torch": {}
    },
    "rubi/models/networks/baseline_net.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.q_att_linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.q_att_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_111": {
                "variable": {
                    "value": "(mm, mm_argmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mm.contiguous().view(bsize * n_regions, -1)",
                            "Call"
                        ],
                        [
                            "self.fusion_module([q, mm])",
                            "Call"
                        ],
                        [
                            "mm.view(bsize, n_regions, -1)",
                            "Call"
                        ],
                        [
                            "self.process_fusion(q_expand, v)",
                            "Call"
                        ],
                        [
                            "v + mm",
                            "BinOp"
                        ],
                        [
                            "torch.max(mm, 1)",
                            "Call"
                        ],
                        [
                            "mm.mean(1)",
                            "Call"
                        ],
                        [
                            "mm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_135": {
                "variable": {
                    "value": "q_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_att_linear0(q)",
                            "Call"
                        ],
                        [
                            "F.relu(q_att)",
                            "Call"
                        ],
                        [
                            "q_att_linear1(q_att)",
                            "Call"
                        ],
                        [
                            "mask_softmax(q_att, l)",
                            "Call"
                        ],
                        [
                            "q_att.expand_as(q)",
                            "Call"
                        ],
                        [
                            "q_atts",
                            "variable"
                        ],
                        [
                            "q_att.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "q_att.expand_as(q)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_140": {
                "variable": {
                    "value": "q_atts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_att_linear0(q)",
                            "Call"
                        ],
                        [
                            "F.relu(q_att)",
                            "Call"
                        ],
                        [
                            "q_att_linear1(q_att)",
                            "Call"
                        ],
                        [
                            "mask_softmax(q_att, l)",
                            "Call"
                        ],
                        [
                            "q_att.expand_as(q)",
                            "Call"
                        ],
                        [
                            "q_atts",
                            "variable"
                        ],
                        [
                            "q_att.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "q_att.expand_as(q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rubi/models/networks/factory.py": {
        "torch": {
            "device_count_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rubi/models/networks/rubi.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.c_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_34": {
                "input": {
                    "value": "q_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_1(q_embedding)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rubi/models/networks/utils.py": {
        "torch": {
            "zeros_like_4": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_6": {
                "variable": {
                    "value": "arange_id",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "mask.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_15": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - torch.max(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2 * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rubi/optimizers/factory.py": {
        "torch": {}
    }
}