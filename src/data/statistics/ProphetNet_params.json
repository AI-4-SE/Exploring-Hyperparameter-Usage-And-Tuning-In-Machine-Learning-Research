{
    "ProphetNet_Dialog_En/utils/processor.py": {
        "sklearn": {
            "train_test_split_242": {
                "variable": {
                    "value": "(train_src, valid_src, train_tgt, valid_tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "src_lines",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "tgt_lines",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "GLGE_baselines/script/prophetnet/bert_dictionary.py": {
        "torch": {}
    },
    "GLGE_baselines/script/prophetnet/learned_positional_embedding.py": {
        "torch": {}
    },
    "GLGE_baselines/script/prophetnet/ngram_criterions.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], return_all_hiddens=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                }
            },
            "where_57": {
                "variable": {
                    "value": "expend_targets[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "sample['target_idx'] >= i",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(targets).fill_(self.padding_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GLGE_baselines/script/prophetnet/ngram_multihead_attention.py": {
        "torch": {
            "from_numpy_29": {
                "ndarray": {
                    "value": "np.array(bias_result, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.relative_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_buckets * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_122": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_125": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_171": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_217": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_301": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_main.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_315": {
                "variable": {
                    "value": "attn_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_value, v_main), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_321": {
                "variable": {
                    "value": "q_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "[k_main, k_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "h_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[v_main, v_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbtc,nbsc->nbts",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_ngram, k_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_350": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('nbtc,nbsc->nbts', (q_ngram, k_ngram))",
                            "Call"
                        ],
                        [
                            "attn_weights_ngram + predict_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_ngram + ngram_mask_matrix",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_ngram, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_ngram)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_ngram, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_353": {
                "variable": {
                    "value": "attn_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbts,nbsc->nbtc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_weights_ngram, v_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_118": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_weights.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_404": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_127": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_376": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "query.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_386": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_396": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_287": {
                "variable": {
                    "value": "k_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_key, k_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_value, v_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_331": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GLGE_baselines/script/prophetnet/ngram_s2s_model.py": {
        "torch": {
            "Embedding_850": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_857": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_293": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_393": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_421": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_455": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_505": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_583": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "lt_637": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_640": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_positions_shift_predicting_stream, real_positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "finetune_i_bucket_predicting_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._finetune_i_bucket_predicting_stream[:, :n_tokens, :n_tokens], self._finetune_i_bucket_predicting_stream[:, :n_tokens, self.max_target_positions:self.max_target_positions + n_tokens]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_758": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] + ngram_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_763": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_842": {
                "variable": {
                    "value": "ngram_future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._ngram_future_mask[:, :dim, :dim], self._ngram_future_mask[:, :dim, self.max_target_positions:self.max_target_positions + dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_from_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_601": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_633": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_635": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_678": {
                "variable": {
                    "value": "fake_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_target_positions + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_833": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_94": {
                "obj": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "new_lang_embed_to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_langids_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(encoder.dictionary) - loaded_dict_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states['encoder.embed_tokens.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "states[encoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['encoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "states[decoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['decoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_642": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_818": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_820": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "states[position_name].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_635": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_640": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_97": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_index[1:], _index[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "states[position_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[position_name], expend_position_states[:, _index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_638": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Code/prophetnet/bert_dictionary.py": {
        "torch": {}
    },
    "ProphetNet_Code/prophetnet/learned_positional_embedding.py": {
        "torch": {}
    },
    "ProphetNet_Code/prophetnet/ngram_criterions.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], return_all_hiddens=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                }
            },
            "where_57": {
                "variable": {
                    "value": "expend_targets[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "sample['target_idx'] >= i",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(targets).fill_(self.padding_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Code/prophetnet/ngram_multihead_attention.py": {
        "torch": {
            "from_numpy_29": {
                "ndarray": {
                    "value": "np.array(bias_result, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.relative_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_buckets * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_122": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_125": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_171": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_217": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_301": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_main.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_315": {
                "variable": {
                    "value": "attn_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_value, v_main), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_321": {
                "variable": {
                    "value": "q_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "[k_main, k_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "h_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[v_main, v_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbtc,nbsc->nbts",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_ngram, k_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_350": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('nbtc,nbsc->nbts', (q_ngram, k_ngram))",
                            "Call"
                        ],
                        [
                            "attn_weights_ngram + predict_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_ngram + ngram_mask_matrix",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_ngram, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_ngram)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_ngram, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_353": {
                "variable": {
                    "value": "attn_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbts,nbsc->nbtc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_weights_ngram, v_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_118": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_weights.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_404": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_127": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_376": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "query.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_386": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_396": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_287": {
                "variable": {
                    "value": "k_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_key, k_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_value, v_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_331": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Code/prophetnet/ngram_s2s_model.py": {
        "torch": {
            "Embedding_850": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_857": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_293": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_393": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_421": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_455": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_505": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_583": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "lt_637": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_640": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_positions_shift_predicting_stream, real_positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "finetune_i_bucket_predicting_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._finetune_i_bucket_predicting_stream[:, :n_tokens, :n_tokens], self._finetune_i_bucket_predicting_stream[:, :n_tokens, self.max_target_positions:self.max_target_positions + n_tokens]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_758": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] + ngram_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_763": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_842": {
                "variable": {
                    "value": "ngram_future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._ngram_future_mask[:, :dim, :dim], self._ngram_future_mask[:, :dim, self.max_target_positions:self.max_target_positions + dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_from_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_601": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_633": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_635": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_678": {
                "variable": {
                    "value": "fake_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_target_positions + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_833": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_94": {
                "obj": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "new_lang_embed_to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_langids_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(encoder.dictionary) - loaded_dict_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states['encoder.embed_tokens.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "states[encoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['encoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "states[decoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['decoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_642": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_818": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_820": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "states[position_name].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_635": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_640": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_97": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_index[1:], _index[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "states[position_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[position_name], expend_position_states[:, _index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_638": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Dialog_En/prophetnet/bert_dictionary.py": {
        "torch": {}
    },
    "ProphetNet_Dialog_En/prophetnet/learned_positional_embedding.py": {
        "torch": {}
    },
    "ProphetNet_Dialog_En/prophetnet/ngram_criterions.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], return_all_hiddens=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                }
            },
            "where_57": {
                "variable": {
                    "value": "expend_targets[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "sample['target_idx'] >= i",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(targets).fill_(self.padding_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Dialog_En/prophetnet/ngram_multihead_attention.py": {
        "torch": {
            "from_numpy_29": {
                "ndarray": {
                    "value": "np.array(bias_result, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.relative_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_buckets * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_122": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_125": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_171": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_217": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_301": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_main.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_315": {
                "variable": {
                    "value": "attn_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_value, v_main), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_321": {
                "variable": {
                    "value": "q_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "[k_main, k_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "h_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[v_main, v_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbtc,nbsc->nbts",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_ngram, k_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_350": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('nbtc,nbsc->nbts', (q_ngram, k_ngram))",
                            "Call"
                        ],
                        [
                            "attn_weights_ngram + predict_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_ngram + ngram_mask_matrix",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_ngram, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_ngram)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_ngram, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_353": {
                "variable": {
                    "value": "attn_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbts,nbsc->nbtc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_weights_ngram, v_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_118": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_weights.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_404": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_127": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_376": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "query.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_386": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_396": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_287": {
                "variable": {
                    "value": "k_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_key, k_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_value, v_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_331": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Dialog_En/prophetnet/ngram_s2s_model.py": {
        "torch": {
            "Embedding_850": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_857": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_293": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_393": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_421": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_455": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_505": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_583": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "lt_637": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_640": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_positions_shift_predicting_stream, real_positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "finetune_i_bucket_predicting_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._finetune_i_bucket_predicting_stream[:, :n_tokens, :n_tokens], self._finetune_i_bucket_predicting_stream[:, :n_tokens, self.max_target_positions:self.max_target_positions + n_tokens]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_758": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] + ngram_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_763": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_842": {
                "variable": {
                    "value": "ngram_future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._ngram_future_mask[:, :dim, :dim], self._ngram_future_mask[:, :dim, self.max_target_positions:self.max_target_positions + dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_from_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_601": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_633": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_635": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_678": {
                "variable": {
                    "value": "fake_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_target_positions + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_833": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_94": {
                "obj": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "new_lang_embed_to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_langids_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(encoder.dictionary) - loaded_dict_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states['encoder.embed_tokens.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "states[encoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['encoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "states[decoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['decoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_642": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_818": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_820": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "states[position_name].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_635": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_640": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_97": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_index[1:], _index[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "states[position_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[position_name], expend_position_states[:, _index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_638": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Dialog_Zh/prophetnet/bert_dictionary.py": {
        "torch": {}
    },
    "ProphetNet_Dialog_Zh/prophetnet/learned_positional_embedding.py": {
        "torch": {}
    },
    "ProphetNet_Dialog_Zh/prophetnet/ngram_criterions.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], return_all_hiddens=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                }
            },
            "where_57": {
                "variable": {
                    "value": "expend_targets[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "sample['target_idx'] >= i",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(targets).fill_(self.padding_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Dialog_Zh/prophetnet/ngram_multihead_attention.py": {
        "torch": {
            "from_numpy_29": {
                "ndarray": {
                    "value": "np.array(bias_result, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.relative_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_buckets * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_122": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_125": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_171": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_217": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_301": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_main.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_315": {
                "variable": {
                    "value": "attn_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_value, v_main), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_321": {
                "variable": {
                    "value": "q_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "[k_main, k_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "h_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[v_main, v_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbtc,nbsc->nbts",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_ngram, k_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_350": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('nbtc,nbsc->nbts', (q_ngram, k_ngram))",
                            "Call"
                        ],
                        [
                            "attn_weights_ngram + predict_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_ngram + ngram_mask_matrix",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_ngram, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_ngram)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_ngram, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_353": {
                "variable": {
                    "value": "attn_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbts,nbsc->nbtc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_weights_ngram, v_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_118": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_weights.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_404": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_127": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_376": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "query.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_386": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_396": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_287": {
                "variable": {
                    "value": "k_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_key, k_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_value, v_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_331": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Dialog_Zh/prophetnet/ngram_s2s_model.py": {
        "torch": {
            "Embedding_850": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_857": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_293": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_393": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_421": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_455": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_505": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_583": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "lt_637": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_640": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_positions_shift_predicting_stream, real_positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "finetune_i_bucket_predicting_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._finetune_i_bucket_predicting_stream[:, :n_tokens, :n_tokens], self._finetune_i_bucket_predicting_stream[:, :n_tokens, self.max_target_positions:self.max_target_positions + n_tokens]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_758": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] + ngram_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_763": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_842": {
                "variable": {
                    "value": "ngram_future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._ngram_future_mask[:, :dim, :dim], self._ngram_future_mask[:, :dim, self.max_target_positions:self.max_target_positions + dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_from_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_601": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_633": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_635": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_678": {
                "variable": {
                    "value": "fake_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_target_positions + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_833": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_94": {
                "obj": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "new_lang_embed_to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_langids_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(encoder.dictionary) - loaded_dict_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states['encoder.embed_tokens.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "states[encoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['encoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "states[decoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['decoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_642": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_818": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_820": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "states[position_name].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_635": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_640": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_97": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_index[1:], _index[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "states[position_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[position_name], expend_position_states[:, _index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_638": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_En/prophetnet/bert_dictionary.py": {
        "torch": {}
    },
    "ProphetNet_En/prophetnet/learned_positional_embedding.py": {
        "torch": {}
    },
    "ProphetNet_En/prophetnet/ngram_criterions.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], return_all_hiddens=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                }
            },
            "where_57": {
                "variable": {
                    "value": "expend_targets[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "sample['target_idx'] >= i",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(targets).fill_(self.padding_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_En/prophetnet/ngram_multihead_attention.py": {
        "torch": {
            "from_numpy_29": {
                "ndarray": {
                    "value": "np.array(bias_result, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.relative_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_buckets * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_122": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_125": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_171": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_217": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_301": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_main.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_315": {
                "variable": {
                    "value": "attn_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_value, v_main), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_321": {
                "variable": {
                    "value": "q_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "[k_main, k_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "h_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[v_main, v_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbtc,nbsc->nbts",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_ngram, k_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_350": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('nbtc,nbsc->nbts', (q_ngram, k_ngram))",
                            "Call"
                        ],
                        [
                            "attn_weights_ngram + predict_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_ngram + ngram_mask_matrix",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_ngram, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_ngram)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_ngram, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_353": {
                "variable": {
                    "value": "attn_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbts,nbsc->nbtc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_weights_ngram, v_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_118": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_weights.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_404": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_127": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_376": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "query.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_386": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_396": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_287": {
                "variable": {
                    "value": "k_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_key, k_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_value, v_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_331": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_En/prophetnet/ngram_s2s_model.py": {
        "torch": {
            "Embedding_850": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_857": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_293": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_393": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_421": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_455": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_505": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_583": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "lt_637": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_640": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_positions_shift_predicting_stream, real_positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "finetune_i_bucket_predicting_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._finetune_i_bucket_predicting_stream[:, :n_tokens, :n_tokens], self._finetune_i_bucket_predicting_stream[:, :n_tokens, self.max_target_positions:self.max_target_positions + n_tokens]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_758": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] + ngram_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_763": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_842": {
                "variable": {
                    "value": "ngram_future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._ngram_future_mask[:, :dim, :dim], self._ngram_future_mask[:, :dim, self.max_target_positions:self.max_target_positions + dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_from_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_601": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_633": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_635": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_678": {
                "variable": {
                    "value": "fake_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_target_positions + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_833": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_94": {
                "obj": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "new_lang_embed_to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_langids_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(encoder.dictionary) - loaded_dict_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states['encoder.embed_tokens.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "states[encoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['encoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "states[decoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['decoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_642": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_818": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_820": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "states[position_name].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_635": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_640": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_97": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_index[1:], _index[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "states[position_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[position_name], expend_position_states[:, _index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_638": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Multi/prophetnet/bert_dictionary.py": {
        "torch": {}
    },
    "ProphetNet_Multi/prophetnet/learned_positional_embedding.py": {
        "torch": {}
    },
    "ProphetNet_Multi/prophetnet/ngram_criterions.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], return_all_hiddens=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                }
            },
            "where_57": {
                "variable": {
                    "value": "expend_targets[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "sample['target_idx'] >= i",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(targets).fill_(self.padding_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Multi/prophetnet/ngram_multihead_attention.py": {
        "torch": {
            "from_numpy_29": {
                "ndarray": {
                    "value": "np.array(bias_result, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.relative_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_buckets * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_122": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_125": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_171": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_217": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_301": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_main.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_315": {
                "variable": {
                    "value": "attn_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_value, v_main), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_321": {
                "variable": {
                    "value": "q_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "[k_main, k_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "h_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[v_main, v_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbtc,nbsc->nbts",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_ngram, k_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_350": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('nbtc,nbsc->nbts', (q_ngram, k_ngram))",
                            "Call"
                        ],
                        [
                            "attn_weights_ngram + predict_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_ngram + ngram_mask_matrix",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_ngram, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_ngram)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_ngram, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_353": {
                "variable": {
                    "value": "attn_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbts,nbsc->nbtc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_weights_ngram, v_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_118": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_weights.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_404": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_127": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_376": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "query.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_386": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_396": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_287": {
                "variable": {
                    "value": "k_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_key, k_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_value, v_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_331": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Multi/prophetnet/ngram_s2s_model.py": {
        "torch": {
            "Embedding_825": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_832": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_262": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_270": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_325": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_368": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_388": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_394": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_396": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_430": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_480": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_558": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "lt_612": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_615": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_633": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_positions_shift_predicting_stream, real_positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_633": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_660": {
                "variable": {
                    "value": "finetune_i_bucket_predicting_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._finetune_i_bucket_predicting_stream[:, :n_tokens, :n_tokens], self._finetune_i_bucket_predicting_stream[:, :n_tokens, self.max_target_positions:self.max_target_positions + n_tokens]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_733": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] + ngram_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_738": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_817": {
                "variable": {
                    "value": "ngram_future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._ngram_future_mask[:, :dim, :dim], self._ngram_future_mask[:, :dim, self.max_target_positions:self.max_target_positions + dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_from_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_576": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_608": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_610": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_653": {
                "variable": {
                    "value": "fake_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_target_positions + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_808": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_94": {
                "obj": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_617": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_793": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_795": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_160": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "states[position_name].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_610": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_615": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_97": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_index[1:], _index[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "states[position_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[position_name], expend_position_states[:, _index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_607": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_613": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_607": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Zh/prophetnet/bert_dictionary.py": {
        "torch": {}
    },
    "ProphetNet_Zh/prophetnet/learned_positional_embedding.py": {
        "torch": {}
    },
    "ProphetNet_Zh/prophetnet/ngram_criterions.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], return_all_hiddens=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                }
            },
            "where_57": {
                "variable": {
                    "value": "expend_targets[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "sample['target_idx'] >= i",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits_list[0]])",
                            "Call"
                        ],
                        [
                            "expend_targets",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "padding_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(targets).fill_(self.padding_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Zh/prophetnet/ngram_multihead_attention.py": {
        "torch": {
            "from_numpy_29": {
                "ndarray": {
                    "value": "np.array(bias_result, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.relative_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_buckets * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lt_122": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_125": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_171": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_217": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(values.size(0), values.size(1), self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "values.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ],
                        [
                            "self.relative_linear(query)",
                            "Call"
                        ],
                        [
                            "values.view(*values.size()[:-1], self.num_buckets, self.num_heads)",
                            "Call"
                        ],
                        [
                            "values.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "values.reshape(N * BH, T, -1)",
                            "Call"
                        ],
                        [
                            "values.reshape(-1, values.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_bucket_main_stream",
                            "variable"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ],
                        [
                            "i_buckets.repeat(1, self.num_heads, 1).view(attn_weights.size(0), attn_weights.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "i_bucket_relative_stream",
                            "variable"
                        ],
                        [
                            "i_buckets.unsqueeze(0).repeat(N, 1, self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "i_buckets.view(-1, i_buckets.size(-1)).long()",
                            "Call"
                        ],
                        [
                            "self._relative_positions_bucket(relative_positions, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_301": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_main.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_315": {
                "variable": {
                    "value": "attn_main",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_main, k_main.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights_main + main_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_main + self_attn_mask",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_main, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_main)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_main, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_value, v_main), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_321": {
                "variable": {
                    "value": "q_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "[k_main, k_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "h_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_predict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[v_main, v_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbtc,nbsc->nbts",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q_ngram, k_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_350": {
                "variable": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_ngram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('nbtc,nbsc->nbts', (q_ngram, k_ngram))",
                            "Call"
                        ],
                        [
                            "attn_weights_ngram + predict_relative_logits",
                            "BinOp"
                        ],
                        [
                            "attn_weights_ngram + ngram_mask_matrix",
                            "BinOp"
                        ],
                        [
                            "utils.softmax(attn_weights_ngram, dim=-1, onnx_trace=self.onnx_trace).type_as(attn_weights_ngram)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_ngram, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_353": {
                "variable": {
                    "value": "attn_ngram",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbts,nbsc->nbtc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_weights_ngram, v_ngram)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_118": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_weights.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_404": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_127": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_376": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "query.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_386": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_396": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.v_proj_weight",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[self.embed_dim:2 * self.embed_dim]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[2 * self.embed_dim:]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_287": {
                "variable": {
                    "value": "k_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_key, k_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "v_main",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_value, v_main)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_331": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ProphetNet_Zh/prophetnet/ngram_s2s_model.py": {
        "torch": {
            "Embedding_850": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_857": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_293": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_393": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_421": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_455": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_505": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_583": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "lt_637": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_640": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_positions_shift_predicting_stream, real_positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_658": {
                "variable": {
                    "value": "predicting_stream_relative_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "finetune_i_bucket_predicting_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._finetune_i_bucket_predicting_stream[:, :n_tokens, :n_tokens], self._finetune_i_bucket_predicting_stream[:, :n_tokens, self.max_target_positions:self.max_target_positions + n_tokens]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_758": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] + ngram_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_763": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "x + main_stream_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + ngram_masks, 0)",
                            "Call"
                        ],
                        [
                            "self.emb_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_842": {
                "variable": {
                    "value": "ngram_future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._ngram_future_mask[:, :dim, :dim], self._ngram_future_mask[:, :dim, self.max_target_positions:self.max_target_positions + dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_from_pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_601": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_633": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_635": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_678": {
                "variable": {
                    "value": "fake_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_target_positions + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_833": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_94": {
                "obj": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "new_lang_embed_to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_langids_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(encoder.dictionary) - loaded_dict_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states['encoder.embed_tokens.weight'].size(1)",
                            "Call"
                        ],
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "states[encoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['encoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "states[decoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states['decoder.embed_tokens.weight'], new_lang_embed_to_add]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_642": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_818": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_820": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "states[position_name].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_635": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_640": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1))",
                            "Call"
                        ],
                        [
                            "val_if_large.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_97": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "net_output[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_index[1:], _index[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "states[position_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[position_name], expend_position_states[:, _index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_638": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_632": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_positions",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}