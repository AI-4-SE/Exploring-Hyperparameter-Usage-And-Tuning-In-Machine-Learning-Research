{
    "tools/convert_tf_bert_to_npz.py": {
        "tensorflow": {
            "load_variable_81": {
                "variable": {
                    "value": "arrays[trans_layer_name_tf2turbo(dic, names[i])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, 'bert_model.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "names[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "list_variables_75": {
                "ckpt_dir_or_file": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, 'bert_model.ckpt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/benchmark_helper.py": {
        "torch": {
            "randint_87": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_gpu else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Event_26": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_27": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_80": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, generated_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_gpu else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "synchronize_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_73": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Event_138": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_139": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_99": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_100": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/jit_benchmark_helper.py": {
        "torch": {}
    },
    "benchmark/onnx_benchmark_helper.py": {
        "torch": {
            "randint_59": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if backend == 'GPU' and use_gpu else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_32": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_grad_enabled_136": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(low=0, high=cfg.vocab_size - 1, size=(batch_size, seq_len), dtype=torch.long, device=test_device)",
                            "Call"
                        ],
                        [
                            "numpy.random.randint(low=0, high=cfg.vocab_size - 1, size=(2, 17), dtype=numpy.int64)",
                            "Call"
                        ],
                        [
                            "numpy.random.randint(low=0, high=cfg.vocab_size - 1, size=(batch_size, seq_len), dtype=numpy.int64)",
                            "Call"
                        ],
                        [
                            "numpy.random.randint(low=0, high=vocab_size - 1, size=(batch_size, seq_len), dtype=numpy.int64)",
                            "Call"
                        ],
                        [
                            "numpy.random.randint(low=0, high=cfg.vocab_size - 1, size=(1, generated_seq_len), dtype=numpy.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "Event_203": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_204": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_177": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_178": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/qbert_layer_benchmark.py": {
        "torch": {
            "set_grad_enabled_9": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_19": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, l, 768)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_20": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, l)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "torch.abs(res[0] - res2[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_45": {
                "input": {
                    "value": "torch.abs(res[1] - res2[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_47": {
                "input": {
                    "value": "torch.abs(res3[0] - res2[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_48": {
                "input": {
                    "value": "torch.abs(res3[1] - res2[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "torch.abs(res3[0] - res[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_51": {
                "input": {
                    "value": "torch.abs(res3[1] - res[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "res[0] - res2[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_45": {
                "input": {
                    "value": "res[1] - res2[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_47": {
                "input": {
                    "value": "res3[0] - res2[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_48": {
                "input": {
                    "value": "res3[1] - res2[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_50": {
                "input": {
                    "value": "res3[0] - res[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_51": {
                "input": {
                    "value": "res3[1] - res[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/qbert_model_benchmark.py": {
        "torch": {
            "set_grad_enabled_10": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_20": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_42": {
                "input": {
                    "value": "torch.abs(res[0] - res2[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_43": {
                "input": {
                    "value": "torch.abs(res[1] - res2[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_45": {
                "input": {
                    "value": "torch.abs(res3[0] - res2[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_46": {
                "input": {
                    "value": "torch.abs(res3[1] - res2[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_48": {
                "input": {
                    "value": "torch.abs(res3[0] - res[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_49": {
                "input": {
                    "value": "torch.abs(res3[1] - res[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_42": {
                "input": {
                    "value": "res[0] - res2[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "res[1] - res2[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_45": {
                "input": {
                    "value": "res3[0] - res2[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_46": {
                "input": {
                    "value": "res3[1] - res2[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_48": {
                "input": {
                    "value": "res3[0] - res[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_49": {
                "input": {
                    "value": "res3[1] - res[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/torch_benchmark_helper.py": {
        "torch": {
            "set_grad_enabled_25": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_num_threads_26": {
                "int": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_54": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_gpu else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_24": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/turbo_benchmark_helper.py": {
        "torch": {
            "set_grad_enabled_28": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_68": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_gpu else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_26": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "distrill/distrill_bert.py": {
        "torch": {}
    },
    "example/python/albert_example.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "([12166, 10699, 16752, 4454], [5342, 16471, 817, 16022])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_33": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_35": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_36": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "example/python/bert_example.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "([12166, 10699, 16752, 4454], [5342, 16471, 817, 16022])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "([1, 1, 1, 0], [1, 0, 0, 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_34": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_95": {
                "input": {
                    "value": "torch.abs(res[0] - torch_res[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_95": {
                "input": {
                    "value": "res[0] - torch_res[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "example/python/bert_for_sequence_classification_example.py": {
        "torch": {
            "device_96": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "example/python/bert_smart_batch.py": {
        "torch": {
            "set_grad_enabled_51": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_68": {
                "variable": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, query_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "concat_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_res, res_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_42": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_78": {
                "input": {
                    "value": "torch.abs(b_res - s_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_79": {
                "input": {
                    "value": "torch.abs(b_res - s_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_78": {
                "input": {
                    "value": "b_res - s_res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_79": {
                "input": {
                    "value": "b_res - s_res",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "example/python/bert_smart_pad.py": {
        "torch": {
            "set_grad_enabled_51": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_68": {
                "variable": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, query_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "concat_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_res, res_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_42": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_78": {
                "input": {
                    "value": "torch.abs(b_res - s_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_79": {
                "input": {
                    "value": "torch.abs(b_res - s_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_78": {
                "input": {
                    "value": "b_res - s_res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_79": {
                "input": {
                    "value": "b_res - s_res",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "example/python/distil_bert/distil_bert.py": {
        "torch": {}
    },
    "example/python/gpt2_example.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "([12166, 10699, 16752, 4454], [5342, 16471, 817, 16022])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_31": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "example/python/memory_comparison/bert_notorch.py": {
        "torch": {
            "device_25": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_26": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "example/python/memory_comparison/bert_torch.py": {
        "torch": {
            "tensor_32": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "([12166, 10699, 16752, 4454], [5342, 16471, 817, 16022])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "([1, 1, 1, 0], [1, 0, 0, 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_28": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_23": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "example/python/roberta_example.py": {
        "torch": {
            "randint_41": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_24": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_num_threads_25": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/convert_huggingface_bert_pytorch_to_npz.py": {
        "torch": {
            "set_grad_enabled_30": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clone_47": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(torch.cat([arrays[k], arrays[k[:-len(q_weight_key)] + k_weight_key], arrays[k[:-len(q_weight_key)] + v_weight_key]], 0).contiguous()).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[arrays[k], arrays[k[:-len(q_bias_key)] + k_bias_key], arrays[k[:-len(q_bias_key)] + v_bias_key]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_48": {
                "input": {
                    "value": "torch.cat([arrays[k], arrays[k[:-len(q_weight_key)] + k_weight_key], arrays[k[:-len(q_weight_key)] + v_weight_key]], 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_68": {
                "variable": {
                    "value": "numpy_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(arrays[k]).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "[arrays[k], arrays[k[:-len(q_weight_key)] + k_weight_key], arrays[k[:-len(q_weight_key)] + v_weight_key]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_68": {
                "input": {
                    "value": "arrays[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/albert_attention_test.py": {
        "torch": {
            "rand_49": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_53": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_36": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_34": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_83": {
                "input": {
                    "value": "torch.abs(torch_attention_result[0] - turbo_self_attention_result[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_88": {
                "input": {
                    "value": "torch.abs(torch_attention_result[1] - turbo_self_attention_result[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_84": {
                "input": {
                    "value": "torch_attention_result[0] - turbo_self_attention_result[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_89": {
                "input": {
                    "value": "torch_attention_result[1] - turbo_self_attention_result[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/albert_embedding_test.py": {
        "torch": {
            "randint_58": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_63": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 20, 40, 80, 100, 120]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(low=0, high=cfg.vocab_size - 1, size=(batch_size, seq_length), dtype=torch.long, device=test_device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_44": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_42": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_92": {
                "input": {
                    "value": "torch.abs(torch_result - turbo_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_92": {
                "input": {
                    "value": "torch_result - turbo_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/albert_layer_test.py": {
        "torch": {
            "rand_46": {
                "variable": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_51": {
                "variable": {
                    "value": "self.attention_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_36": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_33": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_87": {
                "input": {
                    "value": "torch.abs(torch_result[0] - turbo_result[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_87": {
                "input": {
                    "value": "torch_result[0] - turbo_result[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/albert_model_test.py": {
        "torch": {
            "randint_51": {
                "variable": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_34": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_31": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_90": {
                "input": {
                    "value": "torch.abs(torch_result[0] - turbo_result[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_90": {
                "input": {
                    "value": "torch_result[0] - turbo_result[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/bert_attention_test.py": {
        "torch": {
            "rand_54": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_58": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_37": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_34": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_93": {
                "input": {
                    "value": "torch.abs(torch_attention_result[0] - turbo_attention_result[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_123": {
                "input": {
                    "value": "torch.abs(torch_attention_result[0] - turbo_decoder_attn_result[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_94": {
                "input": {
                    "value": "torch_attention_result[0] - turbo_attention_result[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_124": {
                "input": {
                    "value": "torch_attention_result[0] - turbo_decoder_attn_result[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/bert_embedding_test.py": {
        "torch": {
            "randint_43": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_48": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 20, 40, 80, 100, 120]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(low=0, high=cfg.vocab_size - 1, size=(batch_size, seq_length), dtype=torch.long, device=test_device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_31": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_77": {
                "input": {
                    "value": "torch.abs(torch_result - turbo_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_77": {
                "input": {
                    "value": "torch_result - turbo_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/bert_encoder_test.py": {
        "torch": {
            "rand_45": {
                "variable": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.batch_size, self.seq_length, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_50": {
                "variable": {
                    "value": "self.attention_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "abs_94": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_bert_layer_result[0] - turbo_bert_layer_result[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_33": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_31": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_96": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch_bert_layer_result[0] - turbo_bert_layer_result[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "turbo_transformers/python/tests/bert_intermediate_test.py": {
        "torch": {
            "rand_52": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_36": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_33": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/bert_layer_test.py": {
        "torch": {
            "rand_47": {
                "variable": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_52": {
                "variable": {
                    "value": "self.attention_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_37": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_35": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_84": {
                "input": {
                    "value": "torch.abs(torch_bert_layer_result[0] - turbo_bert_layer_result[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_85": {
                "input": {
                    "value": "torch_bert_layer_result[0] - turbo_bert_layer_result[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/bert_model_test.py": {
        "torch": {
            "randint_52": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_28": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_num_threads_29": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_80": {
                "input": {
                    "value": "torch_result[0].cpu() - turbo_result[0].cpu()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/bert_output_test.py": {
        "torch": {
            "rand_47": {
                "variable": {
                    "value": "self.intermediate_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length, self.intermediate_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "rand_51": {
                "variable": {
                    "value": "self.attention_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_35": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_33": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_77": {
                "input": {
                    "value": "torch.abs(torch_result - turbo_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_77": {
                "input": {
                    "value": "torch_result - turbo_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/bert_pooler_test.py": {
        "torch": {
            "rand_52": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_35": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_33": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/bert_smart_batch_test.py": {
        "torch": {
            "set_grad_enabled_38": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_58": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_78": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_100": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, query_seq_len, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_123": {
                "variable": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, query_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_149": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, Q.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_36": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_53": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_54": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_56": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_73": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_74": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_76": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "self.concat_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.concat_Q, self.input_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "concat_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_res, res_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "concat_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_res, res_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "concat_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_res, res_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_176": {
                "input": {
                    "value": "torch.abs(concat_res - pad_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_205": {
                "input": {
                    "value": "torch.abs(concat_res - pad_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_243": {
                "input": {
                    "value": "torch.abs(concat_res - pad_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_176": {
                "input": {
                    "value": "concat_res - pad_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_205": {
                "input": {
                    "value": "concat_res - pad_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_243": {
                "input": {
                    "value": "concat_res - pad_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/distill_bert_attention_test.py": {
        "torch": {
            "LayerNorm_44": {
                "variable": {
                    "value": "self.torch_sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.cfg.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_57": {
                "variable": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, seq_length, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_62": {
                "variable": {
                    "value": "self.attention_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_39": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_36": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_96": {
                "input": {
                    "value": "torch.abs(torch_attention_result - turbo_attention_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_97": {
                "input": {
                    "value": "torch_attention_result - turbo_attention_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/distill_bert_ffn_test.py": {
        "torch": {
            "LayerNorm_45": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.cfg.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_54": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, input_len, self.cfg.dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_42": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_36": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_85": {
                "input": {
                    "value": "torch.abs(torch_res - turbo_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_85": {
                "input": {
                    "value": "torch_res - turbo_res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_86": {
                "input": {
                    "value": "torch.abs(torch_res - turbo_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_86": {
                "input": {
                    "value": "torch_res - turbo_res",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/distill_bert_model_test.py": {
        "torch": {
            "randint_51": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, input_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_56": {
                "variable": {
                    "value": "self.attention_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, input_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_42": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_36": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_85": {
                "input": {
                    "value": "torch.abs(torch_res[0] - turbo_res[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_85": {
                "input": {
                    "value": "torch_res[0] - turbo_res[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/distill_transformer_block_test.py": {
        "torch": {
            "ones_51": {
                "variable": {
                    "value": "self.attention_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, input_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, input_len, self.cfg.dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_42": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_36": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_84": {
                "input": {
                    "value": "torch.abs(torch_res[0] - turbo_res[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_84": {
                "input": {
                    "value": "torch_res[0] - turbo_res[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/distill_transformer_test.py": {
        "torch": {
            "ones_51": {
                "variable": {
                    "value": "self.attention_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, input_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, input_len, self.cfg.dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_42": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_36": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_84": {
                "input": {
                    "value": "torch.abs(torch_res[0] - turbo_res[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_84": {
                "input": {
                    "value": "torch_res[0] - turbo_res[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_86": {
                "input": {
                    "value": "torch.abs(torch_res[0] - turbo_res[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_86": {
                "input": {
                    "value": "torch_res[0] - turbo_res[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/gpt2_model_test.py": {
        "torch": {
            "randint_48": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_28": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_num_threads_29": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/multi_head_attn_smart_batch_test.py": {
        "torch": {
            "set_grad_enabled_45": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, query_seq_len, self.model_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_74": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, key_seq_len, self.model_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_82": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, key_seq_len, self.model_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_42": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "concat_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_res, res_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "concat_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_Q, self.Q_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "concat_K",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_K, self.K_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "concat_V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_V, self.V_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_154": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_res - concat_res",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/numpy2tensor_test.py": {
        "torch": {
            "device_25": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_26": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_28": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/positionwise_ffn_test.py": {
        "torch": {
            "rand_52": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, input_len, self.model_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_41": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_35": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_91": {
                "input": {
                    "value": "torch.abs(turbo_model_result - onmt_model_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_91": {
                "input": {
                    "value": "turbo_model_result - onmt_model_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/qbert_intermediate_test.py": {
        "torch": {
            "set_grad_enabled_10": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_20": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lens",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "torch.abs(res - res2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_35": {
                "input": {
                    "value": "res - res2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/qbert_layer_test.py": {
        "torch": {
            "set_grad_enabled_22": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, l, 768)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_33": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, l)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_58": {
                "input": {
                    "value": "torch.abs(res[0] - res2[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_60": {
                "input": {
                    "value": "torch.abs(res3[0] - res2[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "torch.abs(res3[0] - res[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_58": {
                "input": {
                    "value": "res[0] - res2[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_60": {
                "input": {
                    "value": "res3[0] - res2[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "res3[0] - res[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/qbert_output_test.py": {
        "torch": {
            "set_grad_enabled_10": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_20": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lens",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3072",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_21": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lens",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_36": {
                "input": {
                    "value": "torch.abs(res - res2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "res - res2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/roberta_model_test.py": {
        "torch": {
            "randint_49": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.cfg.vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_28": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_num_threads_29": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/sequence_pool_test.py": {
        "torch": {
            "set_grad_enabled_37": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_44": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_45": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_47": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/tensor_conversion_test.py": {
        "torch": {
            "rand_29": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "test_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if use_cuda else torch.device('cpu:0')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_24": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_25": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_27": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/test_helper.py": {
        "torch": {
            "clone_64": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clone(T)",
                            "Call"
                        ]
                    ]
                }
            },
            "Event_27": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_28": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "T.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/transformer_decoder_layer_test.py": {
        "torch": {
            "rand_62": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[4]",
                            "List"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(10, src_length, 10)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_67": {
                "variable": {
                    "value": "self.memory_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[4]",
                            "List"
                        ]
                    ]
                },
                "out": {
                    "value": "src_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 20, 40, 60, 80, 100]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "self.src_pad_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[4]",
                            "List"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "self.tgt_pad_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[4]",
                            "List"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_37": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_34": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_150": {
                "input": {
                    "value": "torch.abs(onmt_mid - turbo_mid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_153": {
                "input": {
                    "value": "torch.abs(attns - turbo_attns)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_150": {
                "input": {
                    "value": "onmt_mid - turbo_mid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_153": {
                "input": {
                    "value": "attns - turbo_attns",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/transformer_encoder_layer_test.py": {
        "torch": {
            "rand_61": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[4]",
                            "List"
                        ]
                    ]
                },
                "out": {
                    "value": "src_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 20, 40, 60, 80, 100]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_68": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1, src_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_37": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_34": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_105": {
                "input": {
                    "value": "torch.abs(onmt_result - turbo_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_103": {
                "input": {
                    "value": "torch.abs(onmt_result - turbo_result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_105": {
                "input": {
                    "value": "onmt_result - turbo_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_103": {
                "input": {
                    "value": "onmt_result - turbo_result",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/tests/transformer_multi_headed_attention_test.py": {
        "torch": {
            "LayerNorm_53": {
                "variable": {
                    "value": "torch_layernorm",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.model_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_60": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, key_seq_len, self.model_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_67": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, key_seq_len, self.model_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_70": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, query_seq_len, self.model_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_45": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1, key_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_113": {
                "variable": {
                    "value": "memory_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, self.head_count, key_seq_len, self.size_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_118": {
                "variable": {
                    "value": "memory_values",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, self.head_count, key_seq_len, self.size_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "self_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, self.head_count, query_seq_len, self.size_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_128": {
                "variable": {
                    "value": "self_values",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, self.head_count, query_seq_len, self.size_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.test_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_num_threads_42": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_135": {
                "input": {
                    "value": "memory_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, key_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_136": {
                "input": {
                    "value": "memory_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, key_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_137": {
                "input": {
                    "value": "self_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, query_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_138": {
                "input": {
                    "value": "self_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, query_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_195": {
                "input": {
                    "value": "memory_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, key_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_196": {
                "input": {
                    "value": "memory_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, key_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_197": {
                "input": {
                    "value": "self_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, query_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_198": {
                "input": {
                    "value": "self_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, query_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_229": {
                "input": {
                    "value": "torch.abs(onmt_output - turbo_output_trans)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_232": {
                "input": {
                    "value": "torch.abs(onmt_attns - turbo_attns_trans)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_245": {
                "input": {
                    "value": "memory_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, key_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_246": {
                "input": {
                    "value": "memory_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, key_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_247": {
                "input": {
                    "value": "self_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, query_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_248": {
                "input": {
                    "value": "self_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(size=(batch_size, self.head_count, query_seq_len, self.size_per_head), dtype=torch.float32, device=self.test_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_281": {
                "input": {
                    "value": "torch.abs(onmt_output - turbo_output_notrans)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_284": {
                "input": {
                    "value": "torch.abs(onmt_attns - turbo_attns_notrans)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_151": {
                "input": {
                    "value": "torch_layernorm(Q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_229": {
                "input": {
                    "value": "onmt_output - turbo_output_trans",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_232": {
                "input": {
                    "value": "onmt_attns - turbo_attns_trans",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_281": {
                "input": {
                    "value": "onmt_output - turbo_output_notrans",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_284": {
                "input": {
                    "value": "onmt_attns - turbo_attns_notrans",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_172": {
                "input": {
                    "value": "torch_layernorm(Q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_239": {
                "input": {
                    "value": "torch.abs(layer_cache_turbo[k] - v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_239": {
                "input": {
                    "value": "layer_cache_turbo[k] - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/modeling_albert.py": {
        "torch": {
            "clone_165": {
                "variable": {
                    "value": "ffn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(ffn_params['weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_166": {
                "variable": {
                    "value": "ffn_output_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(ffn_output_params['weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_315": {
                "variable": {
                    "value": "self.pooler_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_100": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(torch.cat((params['query.weight'], params['key.weight'], params['value.weight']), 0)).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(params['query.bias'], params['key.bias'], params['value.bias'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_107": {
                "variable": {
                    "value": "output_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['dense.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_348": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_350": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_165": {
                "input": {
                    "value": "ffn_params['weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_167": {
                "input": {
                    "value": "ffn_output_params['weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_101": {
                "input": {
                    "value": "torch.cat((params['query.weight'], params['key.weight'], params['value.weight']), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_108": {
                "input": {
                    "value": "params['dense.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "(params['query.weight'], params['key.weight'], params['value.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/modeling_bert.py": {
        "torch": {
            "clone_91": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(intermediate_params['dense.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_382": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(pooler_params['dense.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_184": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(torch.cat((params['self.query.weight'], params['self.key.weight'], params['self.value.weight']), 0).contiguous()).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(params['self.query.bias'], params['self.key.bias'], params['self.value.bias'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_194": {
                "variable": {
                    "value": "output_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['output.dense.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_92": {
                "input": {
                    "value": "intermediate_params['dense.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clone_128": {
                "input": {
                    "value": "torch.t(params['dense.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_383": {
                "input": {
                    "value": "pooler_params['dense.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_546": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_128": {
                "input": {
                    "value": "params['dense.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_185": {
                "input": {
                    "value": "torch.cat((params['self.query.weight'], params['self.key.weight'], params['self.value.weight']), 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_195": {
                "input": {
                    "value": "params['output.dense.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_526": {
                "variable": {
                    "value": "outputs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_567": {
                "low": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "[2, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_570": {
                "*size": {
                    "value": "[2, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_573": {
                "*size": {
                    "value": "[2, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "(params['self.query.weight'], params['self.key.weight'], params['self.value.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/modeling_decoder.py": {
        "torch": {
            "ones_97": {
                "variable": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[tgt_len, tgt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "tgt_pad_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_106": {
                "variable": {
                    "value": "dec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + future_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/modeling_distillbert.py": {
        "torch": {
            "clone_76": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(torch.cat((params['q_lin.weight'], params['k_lin.weight'], params['v_lin.weight']), 0).contiguous()).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(params['q_lin.bias'], params['k_lin.bias'], params['v_lin.bias'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_84": {
                "variable": {
                    "value": "output_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['out_lin.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "outputs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_77": {
                "input": {
                    "value": "torch.cat((params['q_lin.weight'], params['k_lin.weight'], params['v_lin.weight']), 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_85": {
                "input": {
                    "value": "params['out_lin.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clone_122": {
                "input": {
                    "value": "torch.t(ffn_params['lin1.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_124": {
                "input": {
                    "value": "torch.t(ffn_params['lin2.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_122": {
                "input": {
                    "value": "ffn_params['lin1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_124": {
                "input": {
                    "value": "ffn_params['lin2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_289": {
                "low": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "[2, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_292": {
                "*size": {
                    "value": "[2, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "(params['q_lin.weight'], params['k_lin.weight'], params['v_lin.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/modeling_encoder.py": {
        "torch": {
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/modeling_gpt2.py": {
        "torch": {
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "outputs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_130": {
                "low": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "[2, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "list(outputs[1][0].shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/modeling_roberta.py": {
        "torch": {
            "ones_88": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/modeling_smart_pad.py": {
        "torch": {
            "cat_177": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attn_params['linear_query.bias'], attn_params['linear_keys.bias'], attn_params['linear_values.bias'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attn_params['linear_query.weight'], attn_params['linear_keys.weight'], attn_params['linear_values.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_158": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(torch.cat((attn_params['linear_query.weight'], attn_params['linear_keys.weight'], attn_params['linear_values.weight']), 0).contiguous()).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(params['self.query.bias'], params['self.key.bias'], params['self.value.bias'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_466": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(query_seq_len_list)",
                            "Call"
                        ],
                        [
                            "len(query_seq_len_list)",
                            "Call"
                        ],
                        [
                            "len(query_seq_len_list)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(params['self.query.weight'], params['self.key.weight'], params['self.value.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_239": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(torch.cat((params['self.query.weight'], params['self.key.weight'], params['self.value.weight']), 0).contiguous()).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_245": {
                "variable": {
                    "value": "output_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['output.dense.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_247": {
                "variable": {
                    "value": "k_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['self.key.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_249": {
                "variable": {
                    "value": "v_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['self.value.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_251": {
                "variable": {
                    "value": "q_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['self.query.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "self.concat_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.concat_Q, Q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(query_seq_len_list)",
                            "Call"
                        ],
                        [
                            "len(query_seq_len_list)",
                            "Call"
                        ],
                        [
                            "len(query_seq_len_list)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "query_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_159": {
                "input": {
                    "value": "torch.cat((attn_params['linear_query.weight'], attn_params['linear_keys.weight'], attn_params['linear_values.weight']), 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_165": {
                "input": {
                    "value": "torch.t(attn_params['linear_keys.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_168": {
                "input": {
                    "value": "torch.t(attn_params['linear_values.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_171": {
                "input": {
                    "value": "torch.t(attn_params['linear_query.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_174": {
                "input": {
                    "value": "torch.t(attn_params['final_linear.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(query_seq_len_list)",
                            "Call"
                        ],
                        [
                            "len(query_seq_len_list)",
                            "Call"
                        ],
                        [
                            "len(query_seq_len_list)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "query_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_166": {
                "input": {
                    "value": "attn_params['linear_keys.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_169": {
                "input": {
                    "value": "attn_params['linear_values.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_172": {
                "input": {
                    "value": "attn_params['linear_query.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_175": {
                "input": {
                    "value": "attn_params['final_linear.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_240": {
                "input": {
                    "value": "torch.cat((params['self.query.weight'], params['self.key.weight'], params['self.value.weight']), 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_246": {
                "input": {
                    "value": "params['output.dense.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_248": {
                "input": {
                    "value": "params['self.key.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_250": {
                "input": {
                    "value": "params['self.value.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_252": {
                "input": {
                    "value": "params['self.query.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "(attn_params['linear_query.weight'], attn_params['linear_keys.weight'], attn_params['linear_values.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "(params['self.query.weight'], params['self.key.weight'], params['self.value.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/modules.py": {
        "torch": {
            "cat_134": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attn_params['linear_query.bias'], attn_params['linear_keys.bias'], attn_params['linear_values.bias'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attn_params['linear_query.weight'], attn_params['linear_keys.weight'], attn_params['linear_values.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_115": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(torch.cat((attn_params['linear_query.weight'], attn_params['linear_keys.weight'], attn_params['linear_values.weight']), 0).contiguous()).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(params['self.query.bias'], params['self.key.bias'], params['self.value.bias'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(params['self.query.weight'], params['self.key.weight'], params['self.value.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_194": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(torch.cat((params['self.query.weight'], params['self.key.weight'], params['self.value.weight']), 0).contiguous()).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_200": {
                "variable": {
                    "value": "output_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['output.dense.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_202": {
                "variable": {
                    "value": "k_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['self.key.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_204": {
                "variable": {
                    "value": "v_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['self.value.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_206": {
                "variable": {
                    "value": "q_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(params['self.query.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_116": {
                "input": {
                    "value": "torch.cat((attn_params['linear_query.weight'], attn_params['linear_keys.weight'], attn_params['linear_values.weight']), 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_122": {
                "input": {
                    "value": "torch.t(attn_params['linear_keys.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_125": {
                "input": {
                    "value": "torch.t(attn_params['linear_values.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_128": {
                "input": {
                    "value": "torch.t(attn_params['linear_query.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_131": {
                "input": {
                    "value": "torch.t(attn_params['final_linear.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_296": {
                "input": {
                    "value": "torch.t(params['w_1.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_298": {
                "input": {
                    "value": "torch.t(params['w_2.weight']).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_123": {
                "input": {
                    "value": "attn_params['linear_keys.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_126": {
                "input": {
                    "value": "attn_params['linear_values.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_129": {
                "input": {
                    "value": "attn_params['linear_query.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_132": {
                "input": {
                    "value": "attn_params['final_linear.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_195": {
                "input": {
                    "value": "torch.cat((params['self.query.weight'], params['self.key.weight'], params['self.value.weight']), 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_201": {
                "input": {
                    "value": "params['output.dense.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_203": {
                "input": {
                    "value": "params['self.key.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_205": {
                "input": {
                    "value": "params['self.value.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_207": {
                "input": {
                    "value": "params['self.query.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_296": {
                "input": {
                    "value": "params['w_1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_298": {
                "input": {
                    "value": "params['w_2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_117": {
                "tensors": {
                    "value": "(attn_params['linear_query.weight'], attn_params['linear_keys.weight'], attn_params['linear_values.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "tensors": {
                    "value": "(params['self.query.weight'], params['self.key.weight'], params['self.value.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/qmodeling_bert.py": {
        "torch": {
            "ones_108": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_109": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "variable": {
                    "value": "outputs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "turbo_transformers/python/turbo_transformers/layers/return_type.py": {
        "torch": {}
    },
    "turbo_transformers/python/turbo_transformers/layers/utils.py": {
        "torch": {}
    }
}